// Generated by Haxe 4.0.5
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.init = function() {
	if(Main.firstcall) {
		Main.firstcall = false;
	}
};
Main.update = function() {
	hashagon_Text.display(0,0,"Choose a test scene:",null,null,null,{ fileName : "src/Main.hx", lineNumber : 15, className : "Main", methodName : "update"});
	hashagon_Text.display(0,20,"(1) Basic RPG",null,null,null,{ fileName : "src/Main.hx", lineNumber : 16, className : "Main", methodName : "update"});
	if(hashagon_Input.justpressed(49) || Main.presetchoice == 1) {
		hashagon_Scene.change("TestLevel");
	}
};
Main.cleanup = function() {
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s1 = _g_s;
		var index = _g_offset++;
		var c = s1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var TestLevel = function() { };
$hxClasses["TestLevel"] = TestLevel;
TestLevel.__name__ = "TestLevel";
TestLevel.init = function() {
	if(TestLevel.firstcall) {
		hashagon_Gfx.loadtiles("adam_jawbreaker",8,8);
		hashagon_Sound.load("euryfind");
		TestLevel.stresstest = 40;
		TestLevel.firstcall = false;
	}
};
TestLevel.update = function() {
	var numtiles = hashagon_Gfx.numberoftiles("adam_jawbreaker");
	var _g = 0;
	var _g1 = TestLevel.stresstest;
	while(_g < _g1) {
		var j = _g++;
		var _g2 = 0;
		var _g11 = TestLevel.stresstest;
		while(_g2 < _g11) {
			var i = _g2++;
			hashagon_Gfx.drawtile(TestLevel.temp + i * 10,j * 10,"adam_jawbreaker",(i + j) % numtiles,"t_" + i + "_" + j,{ fileName : "src/TestLevel.hx", lineNumber : 21, className : "TestLevel", methodName : "update"});
		}
	}
	TestLevel.temp += hashagon_Core.deltatime * 60;
	if(TestLevel.temp > 400) {
		TestLevel.temp = -320;
	}
	if(hashagon_Input.justreleased(32)) {
		hashagon_Sound.play("euryfind");
	}
	hashagon_Text.display(2 + TestLevel.temp,2,"test: " + TestLevel.stresstest,hashagon_Col.RED,null,null,{ fileName : "src/TestLevel.hx", lineNumber : 31, className : "TestLevel", methodName : "update"});
	if(hashagon_Input.justpressed(50)) {
		hashagon_Scene.change("Main");
	}
};
TestLevel.cleanup = function() {
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( e1 ) {
		var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var _$Xml_XmlType_$Impl_$ = {};
$hxClasses["_Xml.XmlType_Impl_"] = _$Xml_XmlType_$Impl_$;
_$Xml_XmlType_$Impl_$.__name__ = "_Xml.XmlType_Impl_";
_$Xml_XmlType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.attributeMap.keys();
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(child.nodeType));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var format_gif_Block = $hxEnums["format.gif.Block"] = { __ename__ : true, __constructs__ : ["BFrame","BExtension","BEOF"]
	,BFrame: ($_=function(frame) { return {_hx_index:0,frame:frame,__enum__:"format.gif.Block",toString:$estr}; },$_.__params__ = ["frame"],$_)
	,BExtension: ($_=function(extension) { return {_hx_index:1,extension:extension,__enum__:"format.gif.Block",toString:$estr}; },$_.__params__ = ["extension"],$_)
	,BEOF: {_hx_index:2,__enum__:"format.gif.Block",toString:$estr}
};
format_gif_Block.__empty_constructs__ = [format_gif_Block.BEOF];
var format_gif_Extension = $hxEnums["format.gif.Extension"] = { __ename__ : true, __constructs__ : ["EGraphicControl","EComment","EText","EApplicationExtension","EUnknown"]
	,EGraphicControl: ($_=function(gce) { return {_hx_index:0,gce:gce,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["gce"],$_)
	,EComment: ($_=function(text) { return {_hx_index:1,text:text,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["text"],$_)
	,EText: ($_=function(pte) { return {_hx_index:2,pte:pte,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["pte"],$_)
	,EApplicationExtension: ($_=function(ext) { return {_hx_index:3,ext:ext,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["ext"],$_)
	,EUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["id","data"],$_)
};
format_gif_Extension.__empty_constructs__ = [];
var format_gif_ApplicationExtension = $hxEnums["format.gif.ApplicationExtension"] = { __ename__ : true, __constructs__ : ["AENetscapeLooping","AEUnknown"]
	,AENetscapeLooping: ($_=function(loops) { return {_hx_index:0,loops:loops,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_.__params__ = ["loops"],$_)
	,AEUnknown: ($_=function(name,version,data) { return {_hx_index:1,name:name,version:version,data:data,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_.__params__ = ["name","version","data"],$_)
};
format_gif_ApplicationExtension.__empty_constructs__ = [];
var format_gif_Version = $hxEnums["format.gif.Version"] = { __ename__ : true, __constructs__ : ["GIF87a","GIF89a","Unknown"]
	,GIF87a: {_hx_index:0,__enum__:"format.gif.Version",toString:$estr}
	,GIF89a: {_hx_index:1,__enum__:"format.gif.Version",toString:$estr}
	,Unknown: ($_=function(version) { return {_hx_index:2,version:version,__enum__:"format.gif.Version",toString:$estr}; },$_.__params__ = ["version"],$_)
};
format_gif_Version.__empty_constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a];
var format_gif_DisposalMethod = $hxEnums["format.gif.DisposalMethod"] = { __ename__ : true, __constructs__ : ["UNSPECIFIED","NO_ACTION","FILL_BACKGROUND","RENDER_PREVIOUS","UNDEFINED"]
	,UNSPECIFIED: {_hx_index:0,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,NO_ACTION: {_hx_index:1,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,FILL_BACKGROUND: {_hx_index:2,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,RENDER_PREVIOUS: {_hx_index:3,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,UNDEFINED: ($_=function(index) { return {_hx_index:4,index:index,__enum__:"format.gif.DisposalMethod",toString:$estr}; },$_.__params__ = ["index"],$_)
};
format_gif_DisposalMethod.__empty_constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS];
var format_gif_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.gif.Reader"] = format_gif_Reader;
format_gif_Reader.__name__ = "format.gif.Reader";
format_gif_Reader.prototype = {
	read: function() {
		var b = 71;
		if(this.i.readByte() != b) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b1 = 73;
		if(this.i.readByte() != b1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b2 = 70;
		if(this.i.readByte() != b2) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var gifVer = this.i.readString(3);
		var version = format_gif_Version.GIF89a;
		switch(gifVer) {
		case "87a":
			version = format_gif_Version.GIF87a;
			break;
		case "89a":
			version = format_gif_Version.GIF89a;
			break;
		default:
			version = format_gif_Version.Unknown(gifVer);
		}
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packedField = this.i.readByte();
		var bgIndex = this.i.readByte();
		var pixelAspectRatio = this.i.readByte();
		if(pixelAspectRatio != 0) {
			pixelAspectRatio = (pixelAspectRatio + 15) / 64;
		} else {
			pixelAspectRatio = 1;
		}
		var lsd = { width : width, height : height, hasGlobalColorTable : (packedField & 128) == 128, colorResolution : (packedField & 112) >>> 4, sorted : (packedField & 8) == 8, globalColorTableSize : 2 << (packedField & 7), backgroundColorIndex : bgIndex, pixelAspectRatio : pixelAspectRatio};
		var gct = null;
		if(lsd.hasGlobalColorTable) {
			gct = this.readColorTable(lsd.globalColorTableSize);
		}
		var blocks = new haxe_ds_List();
		while(true) {
			var b3 = this.readBlock();
			blocks.add(b3);
			if(b3 == format_gif_Block.BEOF) {
				break;
			}
		}
		return { version : version, logicalScreenDescriptor : lsd, globalColorTable : gct, blocks : blocks};
	}
	,readBlock: function() {
		var blockID = this.i.readByte();
		switch(blockID) {
		case 33:
			return this.readExtension();
		case 44:
			return this.readImage();
		case 59:
			return format_gif_Block.BEOF;
		}
		return format_gif_Block.BEOF;
	}
	,readImage: function() {
		var x = this.i.readUInt16();
		var y = this.i.readUInt16();
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packed = this.i.readByte();
		var localColorTable = (packed & 128) == 128;
		var interlaced = (packed & 64) == 64;
		var sorted = (packed & 32) == 32;
		var localColorTableSize = 2 << (packed & 7);
		var lct = null;
		if(localColorTable) {
			lct = this.readColorTable(localColorTableSize);
		}
		return format_gif_Block.BFrame({ x : x, y : y, width : width, height : height, localColorTable : localColorTable, interlaced : interlaced, sorted : sorted, localColorTableSize : localColorTableSize, pixels : this.readPixels(width,height,interlaced), colorTable : lct});
	}
	,readPixels: function(width,height,interlaced) {
		var input = this.i;
		var pixelsCount = width * height;
		var pixels = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
		var minCodeSize = input.readByte();
		var blockSize = input.readByte() - 1;
		var bits = input.readByte();
		var bitsCount = 8;
		var clearCode = 1 << minCodeSize;
		var eoiCode = clearCode + 1;
		var codeSize = minCodeSize + 1;
		var codeSizeLimit = 1 << codeSize;
		var codeMask = codeSizeLimit - 1;
		var baseDict = [];
		var _g = 0;
		var _g1 = clearCode;
		while(_g < _g1) {
			var i = _g++;
			baseDict[i] = [i];
		}
		var dict = [];
		var dictLen = clearCode + 2;
		var newRecord;
		var i1 = 0;
		var code = 0;
		var last;
		while(i1 < pixelsCount) {
			last = code;
			while(bitsCount < codeSize) {
				if(blockSize == 0) {
					break;
				}
				bits |= input.readByte() << bitsCount;
				bitsCount += 8;
				--blockSize;
				if(blockSize == 0) {
					blockSize = input.readByte();
				}
			}
			code = bits & codeMask;
			bits >>= codeSize;
			bitsCount -= codeSize;
			if(code == clearCode) {
				dict = baseDict.slice();
				dictLen = clearCode + 2;
				codeSize = minCodeSize + 1;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
				continue;
			}
			if(code == eoiCode) {
				break;
			}
			if(code < dictLen) {
				if(last != clearCode) {
					newRecord = dict[last].slice();
					newRecord.push(dict[code][0]);
					dict[dictLen++] = newRecord;
				}
			} else {
				if(code != dictLen) {
					throw new js__$Boot_HaxeError("Invalid LZW code. Excepted: " + dictLen + ", got: " + code);
				}
				newRecord = dict[last].slice();
				newRecord.push(newRecord[0]);
				dict[dictLen++] = newRecord;
			}
			newRecord = dict[code];
			var _g2 = 0;
			while(_g2 < newRecord.length) {
				var item = newRecord[_g2];
				++_g2;
				pixels.b[i1++] = item;
			}
			if(dictLen == codeSizeLimit && codeSize < 12) {
				++codeSize;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
			}
		}
		while(blockSize > 0) {
			input.readByte();
			--blockSize;
			if(blockSize == 0) {
				blockSize = input.readByte();
			}
		}
		while(i1 < pixelsCount) pixels.b[i1++] = 0;
		if(interlaced) {
			var buffer = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
			var offset = this.deinterlace(pixels,buffer,8,0,0,width,height);
			offset = this.deinterlace(pixels,buffer,8,4,offset,width,height);
			offset = this.deinterlace(pixels,buffer,4,2,offset,width,height);
			this.deinterlace(pixels,buffer,2,1,offset,width,height);
			pixels = buffer;
		}
		return pixels;
	}
	,deinterlace: function(input,output,step,y,offset,width,height) {
		while(y < height) {
			output.blit(y * width,input,offset,width);
			offset += width;
			y += step;
		}
		return offset;
	}
	,readExtension: function() {
		var subId = this.i.readByte();
		switch(subId) {
		case 1:
			if(this.i.readByte() != 12) {
				throw new js__$Boot_HaxeError("Incorrect size of Plain Text Extension introducer block.");
			}
			var tmp = this.i.readUInt16();
			var tmp1 = this.i.readUInt16();
			var tmp2 = this.i.readUInt16();
			var tmp3 = this.i.readUInt16();
			var tmp4 = this.i.readByte();
			var tmp5 = this.i.readByte();
			var tmp6 = this.i.readByte();
			var tmp7 = this.i.readByte();
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EText({ textGridX : tmp, textGridY : tmp1, textGridWidth : tmp2, textGridHeight : tmp3, charCellWidth : tmp4, charCellHeight : tmp5, textForegroundColorIndex : tmp6, textBackgroundColorIndex : tmp7, text : bytes.toString()}));
		case 249:
			if(this.i.readByte() != 4) {
				throw new js__$Boot_HaxeError("Incorrect Graphic Control Extension block size!");
			}
			var packed = this.i.readByte();
			var disposalMethod;
			switch((packed & 28) >> 2) {
			case 0:
				disposalMethod = format_gif_DisposalMethod.UNSPECIFIED;
				break;
			case 1:
				disposalMethod = format_gif_DisposalMethod.NO_ACTION;
				break;
			case 2:
				disposalMethod = format_gif_DisposalMethod.FILL_BACKGROUND;
				break;
			case 3:
				disposalMethod = format_gif_DisposalMethod.RENDER_PREVIOUS;
				break;
			default:
				disposalMethod = format_gif_DisposalMethod.UNDEFINED((packed & 28) >> 2);
			}
			var b = format_gif_Block.BExtension(format_gif_Extension.EGraphicControl({ disposalMethod : disposalMethod, userInput : (packed & 2) == 2, hasTransparentColor : (packed & 1) == 1, delay : this.i.readUInt16(), transparentIndex : this.i.readByte()}));
			this.i.readByte();
			return b;
		case 254:
			var buffer1 = new haxe_io_BytesOutput();
			var bytes1 = new haxe_io_Bytes(new ArrayBuffer(255));
			var len1 = this.i.readByte();
			while(len1 != 0) {
				this.i.readBytes(bytes1,0,len1);
				buffer1.writeBytes(bytes1,0,len1);
				len1 = this.i.readByte();
			}
			buffer1.flush();
			bytes1 = buffer1.getBytes();
			buffer1.close();
			return format_gif_Block.BExtension(format_gif_Extension.EComment(bytes1.toString()));
		case 255:
			return this.readApplicationExtension();
		default:
			var buffer2 = new haxe_io_BytesOutput();
			var bytes2 = new haxe_io_Bytes(new ArrayBuffer(255));
			var len2 = this.i.readByte();
			while(len2 != 0) {
				this.i.readBytes(bytes2,0,len2);
				buffer2.writeBytes(bytes2,0,len2);
				len2 = this.i.readByte();
			}
			buffer2.flush();
			bytes2 = buffer2.getBytes();
			buffer2.close();
			return format_gif_Block.BExtension(format_gif_Extension.EUnknown(subId,bytes2));
		}
	}
	,readApplicationExtension: function() {
		if(this.i.readByte() != 11) {
			throw new js__$Boot_HaxeError("Incorrect size of Application Extension introducer block.");
		}
		var name = this.i.readString(8);
		var version = this.i.readString(3);
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		var data = bytes;
		if(name == "NETSCAPE" && version == "2.0" && data.b[0] == 1) {
			return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AENetscapeLooping(data.b[1] | data.b[2] << 8)));
		}
		return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AEUnknown(name,version,data)));
	}
	,readColorTable: function(size) {
		size *= 3;
		var output = new haxe_io_Bytes(new ArrayBuffer(size));
		var c = 0;
		while(c < size) {
			var v = this.i.readByte();
			output.b[c] = v;
			var v1 = this.i.readByte();
			output.b[c + 1] = v1;
			var v2 = this.i.readByte();
			output.b[c + 2] = v2;
			c += 3;
		}
		return output;
	}
	,__class__: format_gif_Reader
};
var format_gif_Tools = function() { };
$hxClasses["format.gif.Tools"] = format_gif_Tools;
format_gif_Tools.__name__ = "format.gif.Tools";
format_gif_Tools.extractFullBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw new js__$Boot_HaxeError("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g11 = pixels.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index + 2];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
var format_mp3_SamplingRate = $hxEnums["format.mp3.SamplingRate"] = { __ename__ : true, __constructs__ : ["SR_8000","SR_11025","SR_12000","SR_22050","SR_24000","SR_32000","SR_44100","SR_48000","SR_Bad"]
	,SR_8000: {_hx_index:0,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_11025: {_hx_index:1,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_12000: {_hx_index:2,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_22050: {_hx_index:3,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_24000: {_hx_index:4,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_32000: {_hx_index:5,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_44100: {_hx_index:6,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_48000: {_hx_index:7,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_Bad: {_hx_index:8,__enum__:"format.mp3.SamplingRate",toString:$estr}
};
format_mp3_SamplingRate.__empty_constructs__ = [format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_Bad];
var format_mp3_Bitrate = $hxEnums["format.mp3.Bitrate"] = { __ename__ : true, __constructs__ : ["BR_8","BR_16","BR_24","BR_32","BR_40","BR_48","BR_56","BR_64","BR_80","BR_96","BR_112","BR_128","BR_144","BR_160","BR_176","BR_192","BR_224","BR_256","BR_288","BR_320","BR_352","BR_384","BR_416","BR_448","BR_Free","BR_Bad"]
	,BR_8: {_hx_index:0,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_16: {_hx_index:1,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_24: {_hx_index:2,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_32: {_hx_index:3,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_40: {_hx_index:4,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_48: {_hx_index:5,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_56: {_hx_index:6,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_64: {_hx_index:7,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_80: {_hx_index:8,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_96: {_hx_index:9,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_112: {_hx_index:10,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_128: {_hx_index:11,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_144: {_hx_index:12,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_160: {_hx_index:13,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_176: {_hx_index:14,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_192: {_hx_index:15,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_224: {_hx_index:16,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_256: {_hx_index:17,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_288: {_hx_index:18,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_320: {_hx_index:19,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_352: {_hx_index:20,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_384: {_hx_index:21,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_416: {_hx_index:22,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_448: {_hx_index:23,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Free: {_hx_index:24,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Bad: {_hx_index:25,__enum__:"format.mp3.Bitrate",toString:$estr}
};
format_mp3_Bitrate.__empty_constructs__ = [format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_Bad];
var format_mp3_MPEG = function() { };
$hxClasses["format.mp3.MPEG"] = format_mp3_MPEG;
format_mp3_MPEG.__name__ = "format.mp3.MPEG";
format_mp3_MPEG.enum2Num = function(m) {
	switch(m._hx_index) {
	case 0:
		return 3;
	case 1:
		return 2;
	case 2:
		return 0;
	case 3:
		return format_mp3_MPEG.Reserved;
	}
};
format_mp3_MPEG.num2Enum = function(m) {
	switch(m) {
	case 0:
		return format_mp3_MPEGVersion.MPEG_V25;
	case 2:
		return format_mp3_MPEGVersion.MPEG_V2;
	case 3:
		return format_mp3_MPEGVersion.MPEG_V1;
	default:
		return format_mp3_MPEGVersion.MPEG_Reserved;
	}
};
format_mp3_MPEG.srEnum2Num = function(sr) {
	switch(sr._hx_index) {
	case 0:
		return 8000;
	case 1:
		return 11025;
	case 2:
		return 12000;
	case 3:
		return 22050;
	case 4:
		return 24000;
	case 5:
		return 32000;
	case 6:
		return 44100;
	case 7:
		return 48000;
	case 8:
		return -1;
	}
};
format_mp3_MPEG.bitrateEnum2Num = function(br) {
	switch(br._hx_index) {
	case 0:
		return 8;
	case 1:
		return 16;
	case 2:
		return 24;
	case 3:
		return 32;
	case 4:
		return 40;
	case 5:
		return 48;
	case 6:
		return 56;
	case 7:
		return 64;
	case 8:
		return 80;
	case 9:
		return 96;
	case 10:
		return 112;
	case 11:
		return 128;
	case 12:
		return 144;
	case 13:
		return 160;
	case 14:
		return 176;
	case 15:
		return 192;
	case 16:
		return 224;
	case 17:
		return 256;
	case 18:
		return 288;
	case 19:
		return 320;
	case 20:
		return 352;
	case 21:
		return 384;
	case 22:
		return 416;
	case 23:
		return 448;
	case 24:
		return 0;
	case 25:
		return -1;
	}
};
var format_mp3_CLayer = function() { };
$hxClasses["format.mp3.CLayer"] = format_mp3_CLayer;
format_mp3_CLayer.__name__ = "format.mp3.CLayer";
format_mp3_CLayer.num2Enum = function(l) {
	switch(l) {
	case 1:
		return format_mp3_Layer.Layer3;
	case 2:
		return format_mp3_Layer.Layer2;
	case 3:
		return format_mp3_Layer.Layer1;
	default:
		return format_mp3_Layer.LayerReserved;
	}
};
var format_mp3_CChannelMode = function() { };
$hxClasses["format.mp3.CChannelMode"] = format_mp3_CChannelMode;
format_mp3_CChannelMode.__name__ = "format.mp3.CChannelMode";
format_mp3_CChannelMode.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_ChannelMode.Stereo;
	case 1:
		return format_mp3_ChannelMode.JointStereo;
	case 2:
		return format_mp3_ChannelMode.DualChannel;
	case 3:
		return format_mp3_ChannelMode.Mono;
	default:
		throw new js__$Boot_HaxeError("assert");
	}
};
var format_mp3_CEmphasis = function() { };
$hxClasses["format.mp3.CEmphasis"] = format_mp3_CEmphasis;
format_mp3_CEmphasis.__name__ = "format.mp3.CEmphasis";
format_mp3_CEmphasis.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_Emphasis.NoEmphasis;
	case 1:
		return format_mp3_Emphasis.Ms50_15;
	case 2:
		return format_mp3_Emphasis.InvalidEmphasis;
	case 3:
		return format_mp3_Emphasis.CCIT_J17;
	default:
		throw new js__$Boot_HaxeError("assert");
	}
};
var format_mp3_MPEGVersion = $hxEnums["format.mp3.MPEGVersion"] = { __ename__ : true, __constructs__ : ["MPEG_V1","MPEG_V2","MPEG_V25","MPEG_Reserved"]
	,MPEG_V1: {_hx_index:0,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V2: {_hx_index:1,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V25: {_hx_index:2,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_Reserved: {_hx_index:3,__enum__:"format.mp3.MPEGVersion",toString:$estr}
};
format_mp3_MPEGVersion.__empty_constructs__ = [format_mp3_MPEGVersion.MPEG_V1,format_mp3_MPEGVersion.MPEG_V2,format_mp3_MPEGVersion.MPEG_V25,format_mp3_MPEGVersion.MPEG_Reserved];
var format_mp3_Layer = $hxEnums["format.mp3.Layer"] = { __ename__ : true, __constructs__ : ["LayerReserved","Layer3","Layer2","Layer1"]
	,LayerReserved: {_hx_index:0,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer3: {_hx_index:1,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer2: {_hx_index:2,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer1: {_hx_index:3,__enum__:"format.mp3.Layer",toString:$estr}
};
format_mp3_Layer.__empty_constructs__ = [format_mp3_Layer.LayerReserved,format_mp3_Layer.Layer3,format_mp3_Layer.Layer2,format_mp3_Layer.Layer1];
var format_mp3_ChannelMode = $hxEnums["format.mp3.ChannelMode"] = { __ename__ : true, __constructs__ : ["Stereo","JointStereo","DualChannel","Mono"]
	,Stereo: {_hx_index:0,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,JointStereo: {_hx_index:1,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,DualChannel: {_hx_index:2,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,Mono: {_hx_index:3,__enum__:"format.mp3.ChannelMode",toString:$estr}
};
format_mp3_ChannelMode.__empty_constructs__ = [format_mp3_ChannelMode.Stereo,format_mp3_ChannelMode.JointStereo,format_mp3_ChannelMode.DualChannel,format_mp3_ChannelMode.Mono];
var format_mp3_Emphasis = $hxEnums["format.mp3.Emphasis"] = { __ename__ : true, __constructs__ : ["NoEmphasis","Ms50_15","CCIT_J17","InvalidEmphasis"]
	,NoEmphasis: {_hx_index:0,__enum__:"format.mp3.Emphasis",toString:$estr}
	,Ms50_15: {_hx_index:1,__enum__:"format.mp3.Emphasis",toString:$estr}
	,CCIT_J17: {_hx_index:2,__enum__:"format.mp3.Emphasis",toString:$estr}
	,InvalidEmphasis: {_hx_index:3,__enum__:"format.mp3.Emphasis",toString:$estr}
};
format_mp3_Emphasis.__empty_constructs__ = [format_mp3_Emphasis.NoEmphasis,format_mp3_Emphasis.Ms50_15,format_mp3_Emphasis.CCIT_J17,format_mp3_Emphasis.InvalidEmphasis];
var format_mp3_FrameType = $hxEnums["format.mp3.FrameType"] = { __ename__ : true, __constructs__ : ["FT_MP3","FT_NONE"]
	,FT_MP3: {_hx_index:0,__enum__:"format.mp3.FrameType",toString:$estr}
	,FT_NONE: {_hx_index:1,__enum__:"format.mp3.FrameType",toString:$estr}
};
format_mp3_FrameType.__empty_constructs__ = [format_mp3_FrameType.FT_MP3,format_mp3_FrameType.FT_NONE];
var format_mp3_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.bits = new format_tools_BitsInput(i);
	this.samples = 0;
	this.sampleSize = 0;
	this.any_read = false;
};
$hxClasses["format.mp3.Reader"] = format_mp3_Reader;
format_mp3_Reader.__name__ = "format.mp3.Reader";
format_mp3_Reader.prototype = {
	skipID3v2: function() {
		this.id3v2_version = this.i.readUInt16();
		this.id3v2_flags = this.i.readByte();
		var size = this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		this.id3v2_data = this.i.read(size);
	}
	,seekFrame: function() {
		var found = false;
		try {
			var b;
			while(true) {
				b = this.i.readByte();
				if(!this.any_read) {
					this.any_read = true;
					if(b == 73) {
						b = this.i.readByte();
						if(b == 68) {
							b = this.i.readByte();
							if(b == 51) {
								this.skipID3v2();
							}
						}
					}
				}
				if(b == 255) {
					this.bits.nbits = 0;
					b = this.bits.readBits(3);
					if(b == 7) {
						return format_mp3_FrameType.FT_MP3;
					}
				}
			}
		} catch( ex ) {
			var ex1 = ((ex) instanceof js__$Boot_HaxeError) ? ex.val : ex;
			if(((ex1) instanceof haxe_io_Eof)) {
				var ex2 = ex1;
				return format_mp3_FrameType.FT_NONE;
			} else {
				throw ex;
			}
		}
	}
	,readFrames: function() {
		var frames = [];
		var ft;
		while(true) {
			ft = this.seekFrame();
			if(!(ft != format_mp3_FrameType.FT_NONE)) {
				break;
			}
			switch(ft._hx_index) {
			case 0:
				var f = this.readFrame();
				if(f != null) {
					frames.push(f);
				}
				break;
			case 1:
				break;
			}
		}
		return frames;
	}
	,readFrameHeader: function() {
		var version = this.bits.readBits(2);
		var layer = this.bits.readBits(2);
		var hasCrc = !this.bits.readBit();
		if(version == format_mp3_MPEG.Reserved || layer == format_mp3_CLayer.LReserved) {
			return null;
		}
		var bitrateIdx = this.bits.readBits(4);
		var bitrate = format_mp3_Tools.getBitrate(version,layer,bitrateIdx);
		var samplingRateIdx = this.bits.readBits(2);
		var samplingRate = format_mp3_Tools.getSamplingRate(version,samplingRateIdx);
		var isPadded = this.bits.readBit();
		var privateBit = this.bits.readBit();
		if(bitrate == format_mp3_Bitrate.BR_Bad || bitrate == format_mp3_Bitrate.BR_Free || samplingRate == format_mp3_SamplingRate.SR_Bad) {
			return null;
		}
		var channelMode = this.bits.readBits(2);
		var isIntensityStereo = this.bits.readBit();
		var isMSStereo = this.bits.readBit();
		var isCopyrighted = this.bits.readBit();
		var isOriginal = this.bits.readBit();
		var emphasis = this.bits.readBits(2);
		var crc16 = 0;
		if(hasCrc) {
			crc16 = this.i.readUInt16();
		}
		return { version : format_mp3_MPEG.num2Enum(version), layer : format_mp3_CLayer.num2Enum(layer), hasCrc : hasCrc, crc16 : crc16, bitrate : bitrate, samplingRate : samplingRate, isPadded : isPadded, privateBit : privateBit, channelMode : format_mp3_CChannelMode.num2Enum(channelMode), isIntensityStereo : isIntensityStereo, isMSStereo : isMSStereo, isCopyrighted : isCopyrighted, isOriginal : isOriginal, emphasis : format_mp3_CEmphasis.num2Enum(emphasis)};
	}
	,readFrame: function() {
		var header = this.readFrameHeader();
		if(header == null || format_mp3_Tools.isInvalidFrameHeader(header)) {
			return null;
		}
		try {
			var data = this.i.read(format_mp3_Tools.getSampleDataSizeHdr(header));
			this.samples += format_mp3_Tools.getSampleCountHdr(header);
			this.sampleSize += data.length;
			return { header : header, data : data};
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof haxe_io_Eof)) {
				var e2 = e1;
				return null;
			} else {
				throw e;
			}
		}
	}
	,read: function() {
		var fs = this.readFrames();
		return { frames : fs, sampleCount : this.samples, sampleSize : this.sampleSize, id3v2 : this.id3v2_data == null ? null : { versionBytes : this.id3v2_version, flagByte : this.id3v2_flags, data : this.id3v2_data}};
	}
	,__class__: format_mp3_Reader
};
var format_mp3_Tools = function() { };
$hxClasses["format.mp3.Tools"] = format_mp3_Tools;
format_mp3_Tools.__name__ = "format.mp3.Tools";
format_mp3_Tools.getBitrate = function(mpegVersion,layerIdx,bitrateIdx) {
	if(mpegVersion == format_mp3_MPEG.Reserved || layerIdx == format_mp3_CLayer.LReserved) {
		return format_mp3_Bitrate.BR_Bad;
	}
	return (mpegVersion == 3 ? format_mp3_MPEG.V1_Bitrates : format_mp3_MPEG.V2_Bitrates)[layerIdx][bitrateIdx];
};
format_mp3_Tools.getSamplingRate = function(mpegVersion,samplingRateIdx) {
	return format_mp3_MPEG.SamplingRates[mpegVersion][samplingRateIdx];
};
format_mp3_Tools.isInvalidFrameHeader = function(hdr) {
	if(!(hdr.version == format_mp3_MPEGVersion.MPEG_Reserved || hdr.layer == format_mp3_Layer.LayerReserved || hdr.bitrate == format_mp3_Bitrate.BR_Bad || hdr.bitrate == format_mp3_Bitrate.BR_Free)) {
		return hdr.samplingRate == format_mp3_SamplingRate.SR_Bad;
	} else {
		return true;
	}
};
format_mp3_Tools.getSampleDataSize = function(mpegVersion,bitrate,samplingRate,isPadded,hasCrc) {
	return ((mpegVersion == 3 ? 144 : 72) * bitrate * 1000 / samplingRate | 0) + (isPadded ? 1 : 0) - (hasCrc ? 2 : 0) - 4;
};
format_mp3_Tools.getSampleDataSizeHdr = function(hdr) {
	return format_mp3_Tools.getSampleDataSize(format_mp3_MPEG.enum2Num(hdr.version),format_mp3_MPEG.bitrateEnum2Num(hdr.bitrate),format_mp3_MPEG.srEnum2Num(hdr.samplingRate),hdr.isPadded,hdr.hasCrc);
};
format_mp3_Tools.getSampleCount = function(mpegVersion) {
	if(mpegVersion == 3) {
		return 1152;
	} else {
		return 576;
	}
};
format_mp3_Tools.getSampleCountHdr = function(hdr) {
	return format_mp3_Tools.getSampleCount(format_mp3_MPEG.enum2Num(hdr.version));
};
var format_png_Color = $hxEnums["format.png.Color"] = { __ename__ : true, __constructs__ : ["ColGrey","ColTrue","ColIndexed"]
	,ColGrey: ($_=function(alpha) { return {_hx_index:0,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_.__params__ = ["alpha"],$_)
	,ColTrue: ($_=function(alpha) { return {_hx_index:1,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_.__params__ = ["alpha"],$_)
	,ColIndexed: {_hx_index:2,__enum__:"format.png.Color",toString:$estr}
};
format_png_Color.__empty_constructs__ = [format_png_Color.ColIndexed];
var format_png_Chunk = $hxEnums["format.png.Chunk"] = { __ename__ : true, __constructs__ : ["CEnd","CHeader","CData","CPalette","CUnknown"]
	,CEnd: {_hx_index:0,__enum__:"format.png.Chunk",toString:$estr}
	,CHeader: ($_=function(h) { return {_hx_index:1,h:h,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["h"],$_)
	,CData: ($_=function(b) { return {_hx_index:2,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CPalette: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["id","data"],$_)
};
format_png_Chunk.__empty_constructs__ = [format_png_Chunk.CEnd];
var format_png_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.checkCRC = true;
};
$hxClasses["format.png.Reader"] = format_png_Reader;
format_png_Reader.__name__ = "format.png.Reader";
format_png_Reader.prototype = {
	read: function() {
		var b = 137;
		if(this.i.readByte() != b) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b1 = 80;
		if(this.i.readByte() != b1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b2 = 78;
		if(this.i.readByte() != b2) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b3 = 71;
		if(this.i.readByte() != b3) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b4 = 13;
		if(this.i.readByte() != b4) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b5 = 10;
		if(this.i.readByte() != b5) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b6 = 26;
		if(this.i.readByte() != b6) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b7 = 10;
		if(this.i.readByte() != b7) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var l = new haxe_ds_List();
		while(true) {
			var c = this.readChunk();
			l.add(c);
			if(c == format_png_Chunk.CEnd) {
				break;
			}
		}
		return l;
	}
	,readHeader: function(i) {
		i.set_bigEndian(true);
		var width = i.readInt32();
		var height = i.readInt32();
		var colbits = i.readByte();
		var color = i.readByte();
		var color1;
		switch(color) {
		case 0:
			color1 = format_png_Color.ColGrey(false);
			break;
		case 2:
			color1 = format_png_Color.ColTrue(false);
			break;
		case 3:
			color1 = format_png_Color.ColIndexed;
			break;
		case 4:
			color1 = format_png_Color.ColGrey(true);
			break;
		case 6:
			color1 = format_png_Color.ColTrue(true);
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown color model " + color + ":" + colbits);
		}
		var compress = i.readByte();
		var filter = i.readByte();
		if(compress != 0 || filter != 0) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var interlace = i.readByte();
		if(interlace != 0 && interlace != 1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	,readChunk: function() {
		var dataLen = this.i.readInt32();
		var id = this.i.readString(4);
		var data = this.i.read(dataLen);
		var crc = this.i.readInt32();
		if(this.checkCRC) {
			var c_crc = -1;
			var tmp = (c_crc ^ HxOverrides.cca(id,0)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp1 = (c_crc ^ HxOverrides.cca(id,1)) & 255;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp1;
			var tmp2 = (c_crc ^ HxOverrides.cca(id,2)) & 255;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp2;
			var tmp3 = (c_crc ^ HxOverrides.cca(id,3)) & 255;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp3;
			var b = data.b.bufferValue;
			var _g = 0;
			var _g1 = data.length;
			while(_g < _g1) {
				var i = _g++;
				var tmp4 = (c_crc ^ b.bytes[i]) & 255;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				c_crc = c_crc >>> 8 ^ tmp4;
			}
			if((c_crc ^ -1) != crc) {
				throw new js__$Boot_HaxeError("CRC check failure");
			}
		}
		switch(id) {
		case "IDAT":
			return format_png_Chunk.CData(data);
		case "IEND":
			return format_png_Chunk.CEnd;
		case "IHDR":
			return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
		case "PLTE":
			return format_png_Chunk.CPalette(data);
		default:
			return format_png_Chunk.CUnknown(id,data);
		}
	}
	,__class__: format_png_Reader
};
var format_png_Tools = function() { };
$hxClasses["format.png.Tools"] = format_png_Tools;
format_png_Tools.__name__ = "format.png.Tools";
format_png_Tools.getHeader = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 1) {
			var h = c.h;
			return h;
		}
	}
	throw new js__$Boot_HaxeError("Header not found");
};
format_png_Tools.getPalette = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 3) {
			var b = c.b;
			return b;
		}
	}
	return null;
};
format_png_Tools.extract32 = function(d,bytes,flipY) {
	var h = format_png_Tools.getHeader(d);
	var bgra = bytes == null ? new haxe_io_Bytes(new ArrayBuffer(h.width * h.height * 4)) : bytes;
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw new js__$Boot_HaxeError("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var lineDelta = 0;
	if(flipY) {
		lineDelta = -h.width * 8;
		w = (h.height - 1) * (h.width * 4);
	}
	var flipY1 = flipY ? -1 : 1;
	var _g1 = h.color;
	switch(_g1._hx_index) {
	case 0:
		var alpha = _g1.alpha;
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphvaIdx = -1;
		if(!alpha) {
			var _g1_head = d.h;
			while(_g1_head != null) {
				var val1 = _g1_head.item;
				_g1_head = _g1_head.next;
				var t = val1;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 2) {
							alphvaIdx = data1.b[1];
						}
						break;
					}
				}
			}
		}
		var _g11 = 0;
		var _g2 = h.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g12 = 0;
					var _g21 = width;
					while(_g12 < _g21) {
						var x = _g12++;
						var v = data.b[r++];
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = data.b[r++];
					}
				} else {
					var _g13 = 0;
					var _g22 = width;
					while(_g13 < _g22) {
						var x1 = _g13++;
						var v1 = data.b[r++];
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 1:
				var cv = 0;
				var ca = 0;
				if(alpha) {
					var _g14 = 0;
					var _g23 = width;
					while(_g14 < _g23) {
						var x2 = _g14++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						ca += data.b[r++];
						bgra.b[w++] = ca;
					}
				} else {
					var _g15 = 0;
					var _g24 = width;
					while(_g15 < _g24) {
						var x3 = _g15++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 2:
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g16 = 0;
					var _g25 = width;
					while(_g16 < _g25) {
						var x4 = _g16++;
						var v2 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = data.b[r++] + bgra.b[w - stride1];
					}
				} else {
					var _g17 = 0;
					var _g26 = width;
					while(_g17 < _g26) {
						var x5 = _g17++;
						var v3 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 3:
				var cv1 = 0;
				var ca1 = 0;
				var stride2 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g18 = 0;
					var _g27 = width;
					while(_g18 < _g27) {
						var x6 = _g18++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						ca1 = data.b[r++] + (ca1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = ca1;
					}
				} else {
					var _g19 = 0;
					var _g28 = width;
					while(_g19 < _g28) {
						var x7 = _g19++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 4:
				var stride3 = width * 4 * flipY1;
				var cv2 = 0;
				var ca2 = 0;
				if(alpha) {
					var _g110 = 0;
					var _g29 = width;
					while(_g110 < _g29) {
						var x8 = _g110++;
						var b1 = y == 0 ? 0 : bgra.b[w - stride3];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k = cv2 + b1 - c1;
						var pa = k - cv2;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b1;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c1;
						if(pc < 0) {
							pc = -pc;
						}
						var pos = r++;
						cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b1 : c1) + data.b[pos] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						var b2 = y == 0 ? 0 : bgra.b[w - stride3];
						var c2 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k1 = ca2 + b2 - c2;
						var pa1 = k1 - ca2;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b2;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c2;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						var pos1 = r++;
						ca2 = (pa1 <= pb1 && pa1 <= pc1 ? ca2 : pb1 <= pc1 ? b2 : c2) + data.b[pos1] & 255;
						bgra.b[w++] = ca2;
					}
				} else {
					var _g111 = 0;
					var _g210 = width;
					while(_g111 < _g210) {
						var x9 = _g111++;
						var b3 = y == 0 ? 0 : bgra.b[w - stride3];
						var c3 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k2 = cv2 + b3 - c3;
						var pa2 = k2 - cv2;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b3;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c3;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						var pos2 = r++;
						cv2 = (pa2 <= pb2 && pa2 <= pc2 ? cv2 : pb2 <= pc2 ? b3 : c3) + data.b[pos2] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 1:
		var alpha1 = _g1.alpha;
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width1 = h.width;
		var stride4 = (alpha1 ? 4 : 3) * width1 + 1;
		if(data.length < h.height * stride4) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphaRed = -1;
		var alphaGreen = -1;
		var alphaBlue = -1;
		if(!alpha1) {
			var _g1_head1 = d.h;
			while(_g1_head1 != null) {
				var val2 = _g1_head1.item;
				_g1_head1 = _g1_head1.next;
				var t1 = val2;
				if(t1._hx_index == 4) {
					if(t1.id == "tRNS") {
						var data2 = t1.data;
						if(data2.length >= 6) {
							alphaRed = data2.b[1];
							alphaGreen = data2.b[3];
							alphaBlue = data2.b[5];
						}
						break;
					}
				}
			}
		}
		var cr = 0;
		var cg = 0;
		var cb = 0;
		var ca3 = 0;
		var _g112 = 0;
		var _g211 = h.height;
		while(_g112 < _g211) {
			var y1 = _g112++;
			var f1 = data.b[r++];
			switch(f1) {
			case 0:
				if(alpha1) {
					var _g113 = 0;
					var _g212 = width1;
					while(_g113 < _g212) {
						var x10 = _g113++;
						bgra.b[w++] = data.b[r + 2];
						bgra.b[w++] = data.b[r + 1];
						bgra.b[w++] = data.b[r];
						bgra.b[w++] = data.b[r + 3];
						r += 4;
					}
				} else {
					var _g114 = 0;
					var _g213 = width1;
					while(_g114 < _g213) {
						var x11 = _g114++;
						cb = data.b[r + 2];
						bgra.b[w++] = cb;
						cg = data.b[r + 1];
						bgra.b[w++] = cg;
						cr = data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 1:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g115 = 0;
					var _g214 = width1;
					while(_g115 < _g214) {
						var x12 = _g115++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						ca3 += data.b[r + 3];
						bgra.b[w++] = ca3;
						r += 4;
					}
				} else {
					var _g116 = 0;
					var _g215 = width1;
					while(_g116 < _g215) {
						var x13 = _g116++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 2:
				var stride5 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g117 = 0;
					var _g216 = width1;
					while(_g117 < _g216) {
						var x14 = _g117++;
						bgra.b[w] = data.b[r + 2] + bgra.b[w - stride5];
						++w;
						bgra.b[w] = data.b[r + 1] + bgra.b[w - stride5];
						++w;
						bgra.b[w] = data.b[r] + bgra.b[w - stride5];
						++w;
						bgra.b[w] = data.b[r + 3] + bgra.b[w - stride5];
						++w;
						r += 4;
					}
				} else {
					var _g118 = 0;
					var _g217 = width1;
					while(_g118 < _g217) {
						var x15 = _g118++;
						cb = data.b[r + 2] + bgra.b[w - stride5];
						bgra.b[w] = cb;
						++w;
						cg = data.b[r + 1] + bgra.b[w - stride5];
						bgra.b[w] = cg;
						++w;
						cr = data.b[r] + bgra.b[w - stride5];
						bgra.b[w] = cr;
						++w;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 3:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				var stride6 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g119 = 0;
					var _g218 = width1;
					while(_g119 < _g218) {
						var x16 = _g119++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr;
						ca3 = data.b[r + 3] + (ca3 + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = ca3;
						r += 4;
					}
				} else {
					var _g120 = 0;
					var _g219 = width1;
					while(_g120 < _g219) {
						var x17 = _g120++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 4:
				var stride7 = width1 * 4 * flipY1;
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g121 = 0;
					var _g220 = width1;
					while(_g121 < _g220) {
						var x18 = _g121++;
						var b4 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c4 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k3 = cb + b4 - c4;
						var pa3 = k3 - cb;
						if(pa3 < 0) {
							pa3 = -pa3;
						}
						var pb3 = k3 - b4;
						if(pb3 < 0) {
							pb3 = -pb3;
						}
						var pc3 = k3 - c4;
						if(pc3 < 0) {
							pc3 = -pc3;
						}
						cb = (pa3 <= pb3 && pa3 <= pc3 ? cb : pb3 <= pc3 ? b4 : c4) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b5 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c5 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k4 = cg + b5 - c5;
						var pa4 = k4 - cg;
						if(pa4 < 0) {
							pa4 = -pa4;
						}
						var pb4 = k4 - b5;
						if(pb4 < 0) {
							pb4 = -pb4;
						}
						var pc4 = k4 - c5;
						if(pc4 < 0) {
							pc4 = -pc4;
						}
						cg = (pa4 <= pb4 && pa4 <= pc4 ? cg : pb4 <= pc4 ? b5 : c5) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b6 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c6 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k5 = cr + b6 - c6;
						var pa5 = k5 - cr;
						if(pa5 < 0) {
							pa5 = -pa5;
						}
						var pb5 = k5 - b6;
						if(pb5 < 0) {
							pb5 = -pb5;
						}
						var pc5 = k5 - c6;
						if(pc5 < 0) {
							pc5 = -pc5;
						}
						cr = (pa5 <= pb5 && pa5 <= pc5 ? cr : pb5 <= pc5 ? b6 : c6) + data.b[r] & 255;
						bgra.b[w++] = cr;
						var b7 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c7 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k6 = ca3 + b7 - c7;
						var pa6 = k6 - ca3;
						if(pa6 < 0) {
							pa6 = -pa6;
						}
						var pb6 = k6 - b7;
						if(pb6 < 0) {
							pb6 = -pb6;
						}
						var pc6 = k6 - c7;
						if(pc6 < 0) {
							pc6 = -pc6;
						}
						ca3 = (pa6 <= pb6 && pa6 <= pc6 ? ca3 : pb6 <= pc6 ? b7 : c7) + data.b[r + 3] & 255;
						bgra.b[w++] = ca3;
						r += 4;
					}
				} else {
					var _g122 = 0;
					var _g221 = width1;
					while(_g122 < _g221) {
						var x19 = _g122++;
						var b8 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c8 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k7 = cb + b8 - c8;
						var pa7 = k7 - cb;
						if(pa7 < 0) {
							pa7 = -pa7;
						}
						var pb7 = k7 - b8;
						if(pb7 < 0) {
							pb7 = -pb7;
						}
						var pc7 = k7 - c8;
						if(pc7 < 0) {
							pc7 = -pc7;
						}
						cb = (pa7 <= pb7 && pa7 <= pc7 ? cb : pb7 <= pc7 ? b8 : c8) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b9 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c9 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k8 = cg + b9 - c9;
						var pa8 = k8 - cg;
						if(pa8 < 0) {
							pa8 = -pa8;
						}
						var pb8 = k8 - b9;
						if(pb8 < 0) {
							pb8 = -pb8;
						}
						var pc8 = k8 - c9;
						if(pc8 < 0) {
							pc8 = -pc8;
						}
						cg = (pa8 <= pb8 && pa8 <= pc8 ? cg : pb8 <= pc8 ? b9 : c9) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b10 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c10 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k9 = cr + b10 - c10;
						var pa9 = k9 - cr;
						if(pa9 < 0) {
							pa9 = -pa9;
						}
						var pb9 = k9 - b10;
						if(pb9 < 0) {
							pb9 = -pb9;
						}
						var pc9 = k9 - c10;
						if(pc9 < 0) {
							pc9 = -pc9;
						}
						cr = (pa9 <= pb9 && pa9 <= pc9 ? cr : pb9 <= pc9 ? b10 : c10) + data.b[r] & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f1);
			}
			w += lineDelta;
		}
		break;
	case 2:
		var pal = format_png_Tools.getPalette(d);
		if(pal == null) {
			throw new js__$Boot_HaxeError("PNG Palette is missing");
		}
		var alpha2 = null;
		var _g1_head2 = d.h;
		while(_g1_head2 != null) {
			var val3 = _g1_head2.item;
			_g1_head2 = _g1_head2.next;
			var t2 = val3;
			if(t2._hx_index == 4) {
				if(t2.id == "tRNS") {
					var data3 = t2.data;
					alpha2 = data3;
					break;
				}
			}
		}
		if(alpha2 != null && alpha2.length < 1 << h.colbits) {
			var alpha21 = new haxe_io_Bytes(new ArrayBuffer(1 << h.colbits));
			alpha21.blit(0,alpha2,0,alpha2.length);
			alpha21.fill(alpha2.length,alpha21.length - alpha2.length,255);
			alpha2 = alpha21;
		}
		var width2 = h.width;
		var stride8 = Math.ceil(width2 * h.colbits / 8) + 1;
		if(data.length < h.height * stride8) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var tmp = h.width * h.colbits;
		var rline = tmp >> 3;
		var _g222 = 0;
		var _g3 = h.height;
		while(_g222 < _g3) {
			var y2 = _g222++;
			var f2 = data.b[r++];
			if(f2 == 0) {
				r += rline;
				continue;
			}
			switch(f2) {
			case 1:
				var c11 = 0;
				var _g223 = 0;
				var _g31 = width2;
				while(_g223 < _g31) {
					var x20 = _g223++;
					var v4 = data.b[r];
					c11 += v4;
					data.b[r++] = c11 & 255;
				}
				break;
			case 2:
				var stride9 = y2 == 0 ? 0 : rline + 1;
				var _g224 = 0;
				var _g32 = width2;
				while(_g224 < _g32) {
					var x21 = _g224++;
					var v5 = data.b[r];
					data.b[r] = v5 + data.b[r - stride9];
					++r;
				}
				break;
			case 3:
				var c12 = 0;
				var stride10 = y2 == 0 ? 0 : rline + 1;
				var _g225 = 0;
				var _g33 = width2;
				while(_g225 < _g33) {
					var x22 = _g225++;
					var v6 = data.b[r];
					c12 = v6 + (c12 + data.b[r - stride10] >> 1) & 255;
					data.b[r++] = c12;
				}
				break;
			case 4:
				var stride11 = rline + 1;
				var c13 = 0;
				var _g226 = 0;
				var _g34 = width2;
				while(_g226 < _g34) {
					var x23 = _g226++;
					var v7 = data.b[r];
					var numChannels = 1;
					if(numChannels == null) {
						numChannels = 4;
					}
					var b11 = y2 == 0 ? 0 : data.b[r - stride11];
					var c14 = x23 == 0 || y2 == 0 ? 0 : data.b[r - stride11 - numChannels];
					var k10 = c13 + b11 - c14;
					var pa10 = k10 - c13;
					if(pa10 < 0) {
						pa10 = -pa10;
					}
					var pb10 = k10 - b11;
					if(pb10 < 0) {
						pb10 = -pb10;
					}
					var pc10 = k10 - c14;
					if(pc10 < 0) {
						pc10 = -pc10;
					}
					c13 = (pa10 <= pb10 && pa10 <= pc10 ? c13 : pb10 <= pc10 ? b11 : c14) + v7 & 255;
					data.b[r++] = c13;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f2);
			}
		}
		var r1 = 0;
		if(h.colbits == 8) {
			var _g4 = 0;
			var _g5 = h.height;
			while(_g4 < _g5) {
				var y3 = _g4++;
				++r1;
				var _g41 = 0;
				var _g51 = h.width;
				while(_g41 < _g51) {
					var x24 = _g41++;
					var c15 = data.b[r1++];
					bgra.b[w++] = pal.b[c15 * 3 + 2];
					bgra.b[w++] = pal.b[c15 * 3 + 1];
					bgra.b[w++] = pal.b[c15 * 3];
					bgra.b[w++] = alpha2 != null ? alpha2.b[c15] : 255;
				}
				w += lineDelta;
			}
		} else if(h.colbits < 8) {
			var req = h.colbits;
			var mask = (1 << req) - 1;
			var _g42 = 0;
			var _g52 = h.height;
			while(_g42 < _g52) {
				var y4 = _g42++;
				++r1;
				var bits = 0;
				var nbits = 0;
				var _g43 = 0;
				var _g53 = h.width;
				while(_g43 < _g53) {
					var x25 = _g43++;
					if(nbits < req) {
						bits = bits << 8 | data.b[r1++];
						nbits += 8;
					}
					var c16 = bits >>> nbits - req & mask;
					nbits -= req;
					bgra.b[w++] = pal.b[c16 * 3 + 2];
					bgra.b[w++] = pal.b[c16 * 3 + 1];
					bgra.b[w++] = pal.b[c16 * 3];
					bgra.b[w++] = alpha2 != null ? alpha2.b[c16] : 255;
				}
				w += lineDelta;
			}
		} else {
			throw new js__$Boot_HaxeError(h.colbits + " indexed bits per pixel not supported");
		}
		break;
	}
	return bgra;
};
var format_tga_ImageOrigin = $hxEnums["format.tga.ImageOrigin"] = { __ename__ : true, __constructs__ : ["BottomLeft","BottomRight","TopLeft","TopRight"]
	,BottomLeft: {_hx_index:0,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,BottomRight: {_hx_index:1,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopLeft: {_hx_index:2,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopRight: {_hx_index:3,__enum__:"format.tga.ImageOrigin",toString:$estr}
};
format_tga_ImageOrigin.__empty_constructs__ = [format_tga_ImageOrigin.BottomLeft,format_tga_ImageOrigin.BottomRight,format_tga_ImageOrigin.TopLeft,format_tga_ImageOrigin.TopRight];
var format_tga_ImageType = $hxEnums["format.tga.ImageType"] = { __ename__ : true, __constructs__ : ["NoImage","UncompressedColorMapped","UncompressedTrueColor","UncompressedBlackAndWhite","RunLengthColorMapped","RunLengthTrueColor","RunLengthBlackAndWhite","Unknown"]
	,NoImage: {_hx_index:0,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedColorMapped: {_hx_index:1,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedTrueColor: {_hx_index:2,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedBlackAndWhite: {_hx_index:3,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthColorMapped: {_hx_index:4,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthTrueColor: {_hx_index:5,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthBlackAndWhite: {_hx_index:6,__enum__:"format.tga.ImageType",toString:$estr}
	,Unknown: ($_=function(type) { return {_hx_index:7,type:type,__enum__:"format.tga.ImageType",toString:$estr}; },$_.__params__ = ["type"],$_)
};
format_tga_ImageType.__empty_constructs__ = [format_tga_ImageType.NoImage,format_tga_ImageType.UncompressedColorMapped,format_tga_ImageType.UncompressedTrueColor,format_tga_ImageType.UncompressedBlackAndWhite,format_tga_ImageType.RunLengthColorMapped,format_tga_ImageType.RunLengthTrueColor,format_tga_ImageType.RunLengthBlackAndWhite];
var format_tga_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.tga.Reader"] = format_tga_Reader;
format_tga_Reader.__name__ = "format.tga.Reader";
format_tga_Reader.prototype = {
	read: function() {
		var idLength = this.i.readByte();
		var header = this.readHeader();
		var id = idLength == 0 ? "" : this.i.readString(idLength);
		var colorMap = this.readColorMapData(header);
		return { header : header, imageId : id, colorMapData : colorMap, imageData : this.readImageData(header,colorMap), developerData : null};
	}
	,readHeader: function() {
		var colorMapType = this.i.readByte();
		var dataType;
		var dataId = this.i.readByte();
		switch(dataId) {
		case 0:
			dataType = format_tga_ImageType.NoImage;
			break;
		case 1:
			dataType = format_tga_ImageType.UncompressedColorMapped;
			break;
		case 2:
			dataType = format_tga_ImageType.UncompressedTrueColor;
			break;
		case 3:
			dataType = format_tga_ImageType.UncompressedBlackAndWhite;
			break;
		case 9:
			dataType = format_tga_ImageType.RunLengthColorMapped;
			break;
		case 10:
			dataType = format_tga_ImageType.RunLengthTrueColor;
			break;
		case 11:
			dataType = format_tga_ImageType.RunLengthBlackAndWhite;
			break;
		default:
			dataType = format_tga_ImageType.Unknown(dataId);
		}
		var colorMapOrigin = this.i.readInt16();
		var colorMapLength = this.i.readInt16();
		var colorMapDepth = this.i.readByte();
		var xOrigin = this.i.readInt16();
		var yOrigin = this.i.readInt16();
		var width = this.i.readInt16();
		var height = this.i.readInt16();
		var depth = this.i.readByte();
		var descriptor = this.i.readByte();
		var origin;
		switch(descriptor & 48) {
		case 16:
			origin = format_tga_ImageOrigin.BottomRight;
			break;
		case 32:
			origin = format_tga_ImageOrigin.TopLeft;
			break;
		case 48:
			origin = format_tga_ImageOrigin.TopRight;
			break;
		default:
			origin = format_tga_ImageOrigin.BottomLeft;
		}
		return { colorMapType : colorMapType, imageType : dataType, colorMapFirstIndex : colorMapOrigin, colorMapLength : colorMapLength, colorMapEntrySize : colorMapDepth, xOrigin : xOrigin, yOrigin : yOrigin, width : width, height : height, bitsPerPixel : depth, alphaChannelBits : descriptor & 15, imageOrigin : origin};
	}
	,readColorMapData: function(header) {
		if(header.colorMapType == 0) {
			return null;
		}
		return this.readPixels(header.colorMapEntrySize,header.colorMapLength,header.alphaChannelBits,false);
	}
	,readImageData: function(header,colorMap) {
		switch(header.imageType._hx_index) {
		case 0:
			return null;
		case 1:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,false);
		case 2:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 3:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 4:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,true);
		case 5:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		case 6:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		default:
			throw new js__$Boot_HaxeError("Unsupported image data type!");
		}
	}
	,readPixels: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var alpha = alphaChannelBits != 0;
		var bitFieldSize = bitsPerPixel / 3 | 0;
		if(bitFieldSize > 8) {
			bitFieldSize = 8;
		}
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixel2);
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			parsePixel = $bind(this,this.parsePixel3);
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			parsePixel = $bind(this,this.parsePixel4);
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i1 = _g++;
				list[i1] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readMono: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var alpha = alphaChannelBits != 0;
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixelGreyAlpha);
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i1 = _g++;
				list[i1] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readIndexes: function(bitsPerPixel,amount,colorMap,offset,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var i = 0;
			var rleChunk;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = colorMap[offset + readEntry()];
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = colorMap[offset + readEntry()];
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i1 = _g++;
				list[i1] = colorMap[offset + readEntry()];
			}
		}
		return list;
	}
	,parsePixel1: function(value,alpha) {
		return value << 16 | value << 8 | value;
	}
	,parsePixelGreyAlpha: function(value,alpha) {
		return (alpha ? (value & 65280) << 16 : 0) | this.parsePixel1(value & 255,false);
	}
	,parsePixel2: function(value,alpha) {
		return (alpha ? (value & 32768) == 1 ? -16777216 : 0 : 0) | (((value & 31744) >> 10) / 31 * 255 | 0) << 16 | (((value & 992) >> 5) / 31 * 255 | 0) << 8 | ((value & 31) / 31 * 255 | 0);
	}
	,parsePixel3: function(value,alpha) {
		return value;
	}
	,parsePixel4: function(value,alpha) {
		return value;
	}
	,__class__: format_tga_Reader
};
var format_tools_BitsInput = function(i) {
	this.i = i;
	this.nbits = 0;
	this.bits = 0;
};
$hxClasses["format.tools.BitsInput"] = format_tools_BitsInput;
format_tools_BitsInput.__name__ = "format.tools.BitsInput";
format_tools_BitsInput.prototype = {
	readBits: function(n) {
		if(this.nbits >= n) {
			var c = this.nbits - n;
			var k = this.bits >>> c & (1 << n) - 1;
			this.nbits = c;
			return k;
		}
		var k1 = this.i.readByte();
		if(this.nbits >= 24) {
			if(n > 31) {
				throw new js__$Boot_HaxeError("Bits error");
			}
			var c1 = 8 + this.nbits - n;
			var d = this.bits & (1 << this.nbits) - 1;
			d = d << 8 - c1 | k1 << c1;
			this.bits = k1;
			this.nbits = c1;
			return d;
		}
		this.bits = this.bits << 8 | k1;
		this.nbits += 8;
		return this.readBits(n);
	}
	,readBit: function() {
		if(this.nbits == 0) {
			this.bits = this.i.readByte();
			this.nbits = 8;
		}
		this.nbits--;
		return (this.bits >>> this.nbits & 1) == 1;
	}
	,__class__: format_tools_BitsInput
};
var format_tools_Inflate = function() { };
$hxClasses["format.tools.Inflate"] = format_tools_Inflate;
format_tools_Inflate.__name__ = "format.tools.Inflate";
format_tools_Inflate.run = function(bytes) {
	return haxe_zip_Uncompress.run(bytes);
};
var format_wav_WAVEFormat = $hxEnums["format.wav.WAVEFormat"] = { __ename__ : true, __constructs__ : ["WF_PCM"]
	,WF_PCM: {_hx_index:0,__enum__:"format.wav.WAVEFormat",toString:$estr}
};
format_wav_WAVEFormat.__empty_constructs__ = [format_wav_WAVEFormat.WF_PCM];
var format_wav_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.wav.Reader"] = format_wav_Reader;
format_wav_Reader.__name__ = "format.wav.Reader";
format_wav_Reader.prototype = {
	read: function() {
		if(this.i.readString(4) != "RIFF") {
			throw new js__$Boot_HaxeError("RIFF header expected");
		}
		var len = this.i.readInt32();
		if(this.i.readString(4) != "WAVE") {
			throw new js__$Boot_HaxeError("WAVE signature not found");
		}
		var fmt = this.i.readString(4);
		_hx_loop1: while(fmt != "fmt ") switch(fmt) {
		case "JUNK":
			var junkLen = this.i.readInt32();
			this.i.read(junkLen);
			fmt = this.i.readString(4);
			break;
		case "bext":
			var bextLen = this.i.readInt32();
			this.i.read(bextLen);
			fmt = this.i.readString(4);
			break;
		default:
			break _hx_loop1;
		}
		if(fmt != "fmt ") {
			throw new js__$Boot_HaxeError("unsupported wave chunk " + fmt);
		}
		var fmtlen = this.i.readInt32();
		var format1;
		switch(this.i.readUInt16()) {
		case 1:case 3:
			format1 = format_wav_WAVEFormat.WF_PCM;
			break;
		default:
			throw new js__$Boot_HaxeError("only PCM (uncompressed) WAV files are supported");
		}
		var channels = this.i.readUInt16();
		var samplingRate = this.i.readInt32();
		var byteRate = this.i.readInt32();
		var blockAlign = this.i.readUInt16();
		var bitsPerSample = this.i.readUInt16();
		if(fmtlen > 16) {
			this.i.read(fmtlen - 16);
		}
		var nextChunk = this.i.readString(4);
		while(nextChunk != "data") {
			this.i.read(this.i.readInt32());
			nextChunk = this.i.readString(4);
		}
		if(nextChunk != "data") {
			throw new js__$Boot_HaxeError("expected data subchunk");
		}
		var datalen = this.i.readInt32();
		var data;
		try {
			data = this.i.read(datalen);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof haxe_io_Eof)) {
				var e2 = e1;
				throw new js__$Boot_HaxeError("Invalid chunk data length");
			} else {
				throw e;
			}
		}
		var cuePoints = [];
		try {
			while(true) {
				var nextChunk1 = this.i.readString(4);
				if(nextChunk1 == "cue ") {
					this.i.readInt32();
					var nbCuePoints = this.i.readInt32();
					var _g1 = 0;
					var _g2 = nbCuePoints;
					while(_g1 < _g2) {
						var _ = _g1++;
						var cueId = this.i.readInt32();
						this.i.readInt32();
						this.i.readString(4);
						this.i.readInt32();
						this.i.readInt32();
						var cueSampleOffset = this.i.readInt32();
						cuePoints.push({ id : cueId, sampleOffset : cueSampleOffset});
					}
				} else {
					this.i.read(this.i.readInt32());
				}
			}
		} catch( e3 ) {
			var e4 = ((e3) instanceof js__$Boot_HaxeError) ? e3.val : e3;
			if(((e4) instanceof haxe_io_Eof)) {
				var e5 = e4;
			} else {
				throw e3;
			}
		}
		return { header : { format : format1, channels : channels, samplingRate : samplingRate, byteRate : byteRate, blockAlign : blockAlign, bitsPerSample : bitsPerSample}, data : data, cuePoints : cuePoints};
	}
	,__class__: format_wav_Reader
};
var h2d_Object = function(parent) {
	this.alpha = 1.;
	this.matA = 1;
	this.matB = 0;
	this.matC = 0;
	this.matD = 1;
	this.absX = 0;
	this.absY = 0;
	this.posChanged = true;
	this.x = 0;
	this.posChanged = true;
	this.y = 0;
	this.posChanged = true;
	this.scaleX = 1;
	this.posChanged = true;
	this.scaleY = 1;
	this.posChanged = true;
	this.rotation = 0;
	this.blendMode = h2d_BlendMode.Alpha;
	this.posChanged = parent != null;
	this.set_visible(true);
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h2d.Object"] = h2d_Object;
h2d_Object.__name__ = "h2d.Object";
h2d_Object.prototype = {
	getBounds: function(relativeTo,out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		if(relativeTo != null) {
			relativeTo.syncPos();
		}
		if(relativeTo != this) {
			this.syncPos();
		}
		this.getBoundsRec(relativeTo,out,false);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(relativeTo,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		return out;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		var n = this.children.length;
		if(n == 0) {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
			return;
		}
		if(n == 1) {
			var c1 = this.children[0];
			if(c1.visible) {
				c1.getBoundsRec(relativeTo,out,forSize);
			} else {
				out.xMin = 1e20;
				out.yMin = 1e20;
				out.xMax = -1e20;
				out.yMax = -1e20;
			}
			return;
		}
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var c2 = _g11[_g2];
			++_g2;
			if(!c2.visible) {
				continue;
			}
			c2.getBoundsRec(relativeTo,out,forSize);
			if(out.xMin < xmin) {
				xmin = out.xMin;
			}
			if(out.yMin < ymin) {
				ymin = out.yMin;
			}
			if(out.xMax > xmax) {
				xmax = out.xMax;
			}
			if(out.yMax > ymax) {
				ymax = out.yMax;
			}
		}
		out.xMin = xmin;
		out.yMin = ymin;
		out.xMax = xmax;
		out.yMax = ymax;
	}
	,addBounds: function(relativeTo,out,dx,dy,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		if(relativeTo == null) {
			var x;
			var y;
			var x1 = dx * this.matA + dy * this.matC + this.absX;
			var y1 = dx * this.matB + dy * this.matD + this.absY;
			if(x1 < out.xMin) {
				out.xMin = x1;
			}
			if(x1 > out.xMax) {
				out.xMax = x1;
			}
			if(y1 < out.yMin) {
				out.yMin = y1;
			}
			if(y1 > out.yMax) {
				out.yMax = y1;
			}
			var x2 = (dx + width) * this.matA + dy * this.matC + this.absX;
			var y2 = (dx + width) * this.matB + dy * this.matD + this.absY;
			if(x2 < out.xMin) {
				out.xMin = x2;
			}
			if(x2 > out.xMax) {
				out.xMax = x2;
			}
			if(y2 < out.yMin) {
				out.yMin = y2;
			}
			if(y2 > out.yMax) {
				out.yMax = y2;
			}
			var x3 = dx * this.matA + (dy + height) * this.matC + this.absX;
			var y3 = dx * this.matB + (dy + height) * this.matD + this.absY;
			if(x3 < out.xMin) {
				out.xMin = x3;
			}
			if(x3 > out.xMax) {
				out.xMax = x3;
			}
			if(y3 < out.yMin) {
				out.yMin = y3;
			}
			if(y3 > out.yMax) {
				out.yMax = y3;
			}
			var x4 = (dx + width) * this.matA + (dy + height) * this.matC + this.absX;
			var y4 = (dx + width) * this.matB + (dy + height) * this.matD + this.absY;
			if(x4 < out.xMin) {
				out.xMin = x4;
			}
			if(x4 > out.xMax) {
				out.xMax = x4;
			}
			if(y4 < out.yMin) {
				out.yMin = y4;
			}
			if(y4 > out.yMax) {
				out.yMax = y4;
			}
			return;
		}
		if(relativeTo == this) {
			if(out.xMin > dx) {
				out.xMin = dx;
			}
			if(out.yMin > dy) {
				out.yMin = dy;
			}
			if(out.xMax < dx + width) {
				out.xMax = dx + width;
			}
			if(out.yMax < dy + height) {
				out.yMax = dy + height;
			}
			return;
		}
		var r = relativeTo.matA * relativeTo.matD - relativeTo.matB * relativeTo.matC;
		if(r == 0) {
			return;
		}
		var det = 1 / r;
		var rA = relativeTo.matD * det;
		var rB = -relativeTo.matB * det;
		var rC = -relativeTo.matC * det;
		var rD = relativeTo.matA * det;
		var rX = this.absX - relativeTo.absX;
		var rY = this.absY - relativeTo.absY;
		var x5 = dx * this.matA + dy * this.matC + rX;
		var y5 = dx * this.matB + dy * this.matD + rY;
		var x6 = x5 * rA + y5 * rC;
		var y6 = x5 * rB + y5 * rD;
		if(x6 < out.xMin) {
			out.xMin = x6;
		}
		if(x6 > out.xMax) {
			out.xMax = x6;
		}
		if(y6 < out.yMin) {
			out.yMin = y6;
		}
		if(y6 > out.yMax) {
			out.yMax = y6;
		}
		x5 = (dx + width) * this.matA + dy * this.matC + rX;
		y5 = (dx + width) * this.matB + dy * this.matD + rY;
		var x7 = x5 * rA + y5 * rC;
		var y7 = x5 * rB + y5 * rD;
		if(x7 < out.xMin) {
			out.xMin = x7;
		}
		if(x7 > out.xMax) {
			out.xMax = x7;
		}
		if(y7 < out.yMin) {
			out.yMin = y7;
		}
		if(y7 > out.yMax) {
			out.yMax = y7;
		}
		x5 = dx * this.matA + (dy + height) * this.matC + rX;
		y5 = dx * this.matB + (dy + height) * this.matD + rY;
		var x8 = x5 * rA + y5 * rC;
		var y8 = x5 * rB + y5 * rD;
		if(x8 < out.xMin) {
			out.xMin = x8;
		}
		if(x8 > out.xMax) {
			out.xMax = x8;
		}
		if(y8 < out.yMin) {
			out.yMin = y8;
		}
		if(y8 > out.yMax) {
			out.yMax = y8;
		}
		x5 = (dx + width) * this.matA + (dy + height) * this.matC + rX;
		y5 = (dx + width) * this.matB + (dy + height) * this.matD + rY;
		var x9 = x5 * rA + y5 * rC;
		var y9 = x5 * rB + y5 * rD;
		if(x9 < out.xMin) {
			out.xMin = x9;
		}
		if(x9 > out.xMax) {
			out.xMax = x9;
		}
		if(y9 < out.yMin) {
			out.yMin = y9;
		}
		if(y9 > out.yMax) {
			out.yMax = y9;
		}
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h2d_col_Point();
		}
		var px = pt.x * this.matA + pt.y * this.matC + this.absX;
		var py = pt.x * this.matB + pt.y * this.matD + this.absY;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,globalToLocal: function(pt) {
		this.syncPos();
		pt.x -= this.absX;
		pt.y -= this.absY;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var px = (pt.x * this.matD - pt.y * this.matC) * invDet;
		var py = (-pt.x * this.matB + pt.y * this.matA) * invDet;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		return ((p) instanceof h2d_Scene) ? p : null;
	}
	,set_visible: function(b) {
		if(this.visible == b) {
			return b;
		}
		this.visible = b;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return b;
	}
	,addChild: function(s) {
		this.addChildAt(s,this.children.length);
	}
	,addChildAt: function(s,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == s) {
				throw new js__$Boot_HaxeError("Recursive addChild");
			}
			p = p.parent;
		}
		if(s.parent != null) {
			var old = s.allocated;
			s.allocated = false;
			s.parent.removeChild(s);
			s.allocated = old;
		}
		this.children.splice(pos,0,s);
		if(!this.allocated && s.allocated) {
			s.onRemove();
		}
		s.parent = this;
		s.parentContainer = this.parentContainer;
		s.posChanged = true;
		if(this.allocated) {
			if(!s.allocated) {
				s.onAdd();
			} else {
				s.onHierarchyMoved(true);
			}
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onHierarchyMoved(parentChanged);
		}
	}
	,onAdd: function() {
		this.allocated = true;
		if(this.filter != null) {
			this.filter.bind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		this.allocated = false;
		if(this.filter != null) {
			this.filter.unbind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,removeChild: function(s) {
		if(HxOverrides.remove(this.children,s)) {
			if(s.allocated) {
				s.onRemove();
			}
			s.parent = null;
			if(s.parentContainer != null) {
				s.setParentContainer(null);
			}
			s.posChanged = true;
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.setParentContainer(c);
		}
	}
	,draw: function(ctx) {
	}
	,sync: function(ctx) {
		var changed = this.posChanged;
		if(changed) {
			this.calcAbsPos();
			this.posChanged = false;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					c.posChanged = true;
				}
				c.sync(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
	}
	,calcAbsPos: function() {
		if(this.parent == null) {
			var cr;
			var sr;
			if(this.rotation == 0) {
				cr = 1.;
				sr = 0.;
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				cr = Math.cos(this.rotation);
				sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = this.x;
			this.absY = this.y;
		} else {
			if(this.rotation == 0) {
				this.matA = this.scaleX * this.parent.matA;
				this.matB = this.scaleX * this.parent.matB;
				this.matC = this.scaleY * this.parent.matC;
				this.matD = this.scaleY * this.parent.matD;
			} else {
				var cr1 = Math.cos(this.rotation);
				var sr1 = Math.sin(this.rotation);
				var tmpA = this.scaleX * cr1;
				var tmpB = this.scaleX * sr1;
				var tmpC = this.scaleY * -sr1;
				var tmpD = this.scaleY * cr1;
				this.matA = tmpA * this.parent.matA + tmpB * this.parent.matC;
				this.matB = tmpA * this.parent.matB + tmpB * this.parent.matD;
				this.matC = tmpC * this.parent.matA + tmpD * this.parent.matC;
				this.matD = tmpC * this.parent.matB + tmpD * this.parent.matD;
			}
			this.absX = this.x * this.parent.matA + this.y * this.parent.matC + this.parent.absX;
			this.absY = this.x * this.parent.matB + this.y * this.parent.matD + this.parent.absY;
		}
	}
	,emitTile: function(ctx,tile) {
		if(h2d_Object.nullDrawable == null) {
			h2d_Object.nullDrawable = new h2d_Drawable(null);
		}
		h2d_Object.nullDrawable.absX = this.absX;
		h2d_Object.nullDrawable.absY = this.absY;
		h2d_Object.nullDrawable.matA = this.matA;
		h2d_Object.nullDrawable.matB = this.matB;
		h2d_Object.nullDrawable.matC = this.matC;
		h2d_Object.nullDrawable.matD = this.matD;
		ctx.drawTile(h2d_Object.nullDrawable,tile);
		return;
	}
	,clipBounds: function(ctx,bounds) {
		var view = ctx.tmpBounds;
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			matA = this.matA * f1.x + this.matB * f1.y;
			matB = this.matA * f2.x + this.matB * f2.y;
			matC = this.matC * f1.x + this.matD * f1.y;
			matD = this.matC * f2.x + this.matD * f2.y;
			absX = this.absX * f1.x + this.absY * f1.y + f1.z;
			absY = this.absX * f2.x + this.absY * f2.y + f2.z;
		} else {
			matA = this.matA;
			matB = this.matB;
			matC = this.matC;
			matD = this.matD;
			absX = this.absX;
			absY = this.absY;
		}
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = bounds.xMin;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x2 = bounds.xMax;
		var y2 = bounds.yMin;
		var x3 = x2 * matA + y2 * matC + absX;
		var y3 = x2 * matB + y2 * matD + absY;
		if(x3 < view.xMin) {
			view.xMin = x3;
		}
		if(x3 > view.xMax) {
			view.xMax = x3;
		}
		if(y3 < view.yMin) {
			view.yMin = y3;
		}
		if(y3 > view.yMax) {
			view.yMax = y3;
		}
		var x4 = bounds.xMin;
		var y4 = bounds.yMax;
		var x5 = x4 * matA + y4 * matC + absX;
		var y5 = x4 * matB + y4 * matD + absY;
		if(x5 < view.xMin) {
			view.xMin = x5;
		}
		if(x5 > view.xMax) {
			view.xMax = x5;
		}
		if(y5 < view.yMin) {
			view.yMin = y5;
		}
		if(y5 > view.yMax) {
			view.yMax = y5;
		}
		var x6 = bounds.xMax;
		var y6 = bounds.yMax;
		var x7 = x6 * matA + y6 * matC + absX;
		var y7 = x6 * matB + y6 * matD + absY;
		if(x7 < view.xMin) {
			view.xMin = x7;
		}
		if(x7 > view.xMax) {
			view.xMax = x7;
		}
		if(y7 < view.yMin) {
			view.yMin = y7;
		}
		if(y7 > view.yMax) {
			view.yMax = y7;
		}
		if(view.xMin < ctx.curX) {
			view.xMin = ctx.curX;
		}
		if(view.yMin < ctx.curY) {
			view.yMin = ctx.curY;
		}
		if(view.xMax > ctx.curX + ctx.curWidth) {
			view.xMax = ctx.curX + ctx.curWidth;
		}
		if(view.yMax > ctx.curY + ctx.curHeight) {
			view.yMax = ctx.curY + ctx.curHeight;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		var sxMin = view.xMin;
		var syMin = view.yMin;
		var sxMax = view.xMax;
		var syMax = view.yMax;
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x8 = sxMin;
		var y8 = syMin;
		x8 -= absX;
		y8 -= absY;
		var x9 = (x8 * matD - y8 * matC) * invDet;
		var y9 = (-x8 * matB + y8 * matA) * invDet;
		if(x9 < view.xMin) {
			view.xMin = x9;
		}
		if(x9 > view.xMax) {
			view.xMax = x9;
		}
		if(y9 < view.yMin) {
			view.yMin = y9;
		}
		if(y9 > view.yMax) {
			view.yMax = y9;
		}
		var x10 = sxMax;
		var y10 = syMin;
		x10 -= absX;
		y10 -= absY;
		var x11 = (x10 * matD - y10 * matC) * invDet;
		var y11 = (-x10 * matB + y10 * matA) * invDet;
		if(x11 < view.xMin) {
			view.xMin = x11;
		}
		if(x11 > view.xMax) {
			view.xMax = x11;
		}
		if(y11 < view.yMin) {
			view.yMin = y11;
		}
		if(y11 > view.yMax) {
			view.yMax = y11;
		}
		var x12 = sxMin;
		var y12 = syMax;
		x12 -= absX;
		y12 -= absY;
		var x13 = (x12 * matD - y12 * matC) * invDet;
		var y13 = (-x12 * matB + y12 * matA) * invDet;
		if(x13 < view.xMin) {
			view.xMin = x13;
		}
		if(x13 > view.xMax) {
			view.xMax = x13;
		}
		if(y13 < view.yMin) {
			view.yMin = y13;
		}
		if(y13 > view.yMax) {
			view.yMax = y13;
		}
		var x14 = sxMax;
		var y14 = syMax;
		x14 -= absX;
		y14 -= absY;
		var x15 = (x14 * matD - y14 * matC) * invDet;
		var y15 = (-x14 * matB + y14 * matA) * invDet;
		if(x15 < view.xMin) {
			view.xMin = x15;
		}
		if(x15 > view.xMax) {
			view.xMax = x15;
		}
		if(y15 < view.yMin) {
			view.yMin = y15;
		}
		if(y15 > view.yMax) {
			view.yMax = y15;
		}
		var a = bounds.xMin;
		var b = view.xMin;
		bounds.xMin = a < b ? b : a;
		var a1 = bounds.yMin;
		var b1 = view.yMin;
		bounds.yMin = a1 < b1 ? b1 : a1;
		var a2 = bounds.xMax;
		var b2 = view.xMax;
		bounds.xMax = a2 > b2 ? b2 : a2;
		var a3 = bounds.yMax;
		var b3 = view.yMax;
		bounds.yMax = a3 > b3 ? b3 : a3;
	}
	,drawFilters: function(ctx) {
		if(!ctx.pushFilter(this)) {
			return;
		}
		var bounds = ctx.tmpBounds;
		var total = new h2d_col_Bounds();
		var maxExtent = -1.;
		this.filter.sync(ctx,this);
		if(this.filter.autoBounds) {
			maxExtent = this.filter.boundsExtend;
		} else {
			this.filter.getBounds(this,bounds);
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		if(maxExtent >= 0) {
			this.getBounds(this,bounds);
			bounds.xMin -= maxExtent;
			bounds.yMin -= maxExtent;
			bounds.xMax += maxExtent;
			bounds.yMax += maxExtent;
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		this.clipBounds(ctx,total);
		var xMin = Math.floor(total.xMin + 1e-10);
		var yMin = Math.floor(total.yMin + 1e-10);
		var width = Math.ceil(total.xMax - xMin - 1e-10);
		var height = Math.ceil(total.yMax - yMin - 1e-10);
		if(width <= 0 || height <= 0 || total.xMax < total.xMin) {
			ctx.popFilter();
			return;
		}
		var t = ctx.textures.allocTarget("filterTemp",width,height,false);
		ctx.pushTarget(t,xMin,yMin,width,height);
		ctx.engine.clear(0);
		var oldAlpha = ctx.globalAlpha;
		var shader = ctx.baseShader;
		var _this = shader.filterMatrixA__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		var w = _this.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var oldA_x = x;
		var oldA_y = y;
		var oldA_z = z;
		var oldA_w = w;
		var _this1 = shader.filterMatrixB__;
		var x1 = _this1.x;
		var y1 = _this1.y;
		var z1 = _this1.z;
		var w1 = _this1.w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var oldB_x = x1;
		var oldB_y = y1;
		var oldB_z = z1;
		var oldB_w = w1;
		var oldF = ctx.inFilter;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var invA = this.matD * invDet;
		var invB = -this.matB * invDet;
		var invC = -this.matC * invDet;
		var invD = this.matA * invDet;
		var invX = -(this.absX * invA + this.absY * invC);
		var invY = -(this.absX * invB + this.absY * invD);
		var _this2 = shader.filterMatrixA__;
		var x2 = invA;
		var y2 = invC;
		var z2 = invX;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this2.x = x2;
		_this2.y = y2;
		_this2.z = z2;
		_this2.w = 1.;
		var _this3 = shader.filterMatrixB__;
		var x3 = invB;
		var y3 = invD;
		var z3 = invY;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		_this3.x = x3;
		_this3.y = y3;
		_this3.z = z3;
		_this3.w = 1.;
		ctx.globalAlpha = 1;
		this.draw(ctx);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.drawRec(ctx);
		}
		var finalTile = h2d_Tile.fromTexture(t);
		finalTile.dx = xMin;
		finalTile.dy = yMin;
		var prev = finalTile;
		finalTile = this.filter.draw(ctx,finalTile);
		if(finalTile != prev && finalTile != null) {
			finalTile.dx += xMin;
			finalTile.dy += yMin;
		}
		var _this4 = shader.filterMatrixA__;
		_this4.x = oldA_x;
		_this4.y = oldA_y;
		_this4.z = oldA_z;
		_this4.w = oldA_w;
		var _this5 = shader.filterMatrixB__;
		_this5.x = oldB_x;
		_this5.y = oldB_y;
		_this5.z = oldB_z;
		_this5.w = oldB_w;
		ctx.popTarget();
		ctx.popFilter();
		ctx.globalAlpha = oldAlpha;
		if(finalTile == null) {
			return;
		}
		this.drawFiltered(ctx,finalTile);
	}
	,drawFiltered: function(ctx,tile) {
		var oldAlpha = ctx.globalAlpha;
		ctx.currentBlend = null;
		ctx.inFilterBlend = this.blendMode;
		ctx.globalAlpha *= this.alpha;
		this.emitTile(ctx,tile);
		ctx.globalAlpha = oldAlpha;
		ctx.inFilterBlend = null;
		ctx.currentBlend = null;
	}
	,drawRec: function(ctx) {
		if(!this.visible) {
			return;
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		if(this.filter != null && this.filter.get_enable()) {
			this.drawFilters(ctx);
		} else {
			var old = ctx.globalAlpha;
			ctx.globalAlpha *= this.alpha;
			if(ctx.front2back) {
				var nchilds = this.children.length;
				var _g2 = 0;
				var _g11 = nchilds;
				while(_g2 < _g11) {
					var i = _g2++;
					this.children[nchilds - 1 - i].drawRec(ctx);
				}
				this.draw(ctx);
			} else {
				this.draw(ctx);
				var _g3 = 0;
				var _g12 = this.children;
				while(_g3 < _g12.length) {
					var c1 = _g12[_g3];
					++_g3;
					c1.drawRec(ctx);
				}
			}
			ctx.globalAlpha = old;
		}
	}
	,contentChanged: function(s) {
	}
	,__class__: h2d_Object
};
var h2d_Drawable = function(parent) {
	h2d_Object.call(this,parent);
	this.color = new h3d_Vector(1,1,1,1);
};
$hxClasses["h2d.Drawable"] = h2d_Drawable;
h2d_Drawable.__name__ = "h2d.Drawable";
h2d_Drawable.__super__ = h2d_Object;
h2d_Drawable.prototype = $extend(h2d_Object.prototype,{
	drawFiltered: function(ctx,tile) {
		var old = this.shaders;
		this.shaders = null;
		h2d_Object.prototype.drawFiltered.call(this,ctx,tile);
		this.shaders = old;
	}
	,addShader: function(s) {
		if(s == null) {
			throw new js__$Boot_HaxeError("Can't add null shader");
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var prev = null;
		var cur = this.shaders;
		while(cur != null) {
			if(cur.s == s) {
				if(prev == null) {
					this.shaders = cur.next;
				} else {
					prev.next = cur.next;
				}
				return true;
			}
			prev = cur;
			cur = cur.next;
		}
		return false;
	}
	,emitTile: function(ctx,tile) {
		if(tile == null) {
			tile = new h2d_Tile(null,0,0,5,5);
		}
		if(!ctx.drawTile(this,tile)) {
			return;
		}
		return;
	}
	,__class__: h2d_Drawable
});
var h2d_Anim = function(frames,speed,parent) {
	this.fading = false;
	this.loop = true;
	this.pause = false;
	h2d_Drawable.call(this,parent);
	this.frames = frames == null ? [] : frames;
	this.curFrame = 0;
	this.speed = speed == null ? 15 : speed;
};
$hxClasses["h2d.Anim"] = h2d_Anim;
h2d_Anim.__name__ = "h2d.Anim";
h2d_Anim.__super__ = h2d_Drawable;
h2d_Anim.prototype = $extend(h2d_Drawable.prototype,{
	onAnimEnd: function() {
	}
	,set_currentFrame: function(frame) {
		this.curFrame = this.frames.length == 0 ? 0 : frame % this.frames.length;
		if(this.curFrame < 0) {
			this.curFrame += this.frames.length;
		}
		return this.curFrame;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		var tile = this.getFrame();
		if(tile != null) {
			this.addBounds(relativeTo,out,tile.dx,tile.dy,tile.width,tile.height);
		}
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		var prev = this.curFrame;
		if(!this.pause) {
			this.curFrame += this.speed * ctx.elapsedTime;
		}
		if(this.curFrame < this.frames.length) {
			return;
		}
		if(this.loop) {
			if(this.frames.length == 0) {
				this.curFrame = 0;
			} else {
				this.curFrame %= this.frames.length;
			}
			this.onAnimEnd();
		} else if(this.curFrame >= this.frames.length) {
			this.curFrame = this.frames.length;
			if(this.curFrame != prev) {
				this.onAnimEnd();
			}
		}
	}
	,getFrame: function() {
		var i = this.curFrame | 0;
		if(i == this.frames.length) {
			--i;
		}
		return this.frames[i];
	}
	,draw: function(ctx) {
		var t = this.getFrame();
		if(this.fading) {
			var i = (this.curFrame | 0) + 1;
			if(i >= this.frames.length) {
				if(!this.loop) {
					return;
				}
				i = 0;
			}
			var t2 = this.frames[i];
			var old = ctx.globalAlpha;
			var alpha = this.curFrame - (this.curFrame | 0);
			ctx.globalAlpha *= 1 - alpha;
			this.emitTile(ctx,t);
			ctx.globalAlpha = old * alpha;
			this.emitTile(ctx,t2);
			ctx.globalAlpha = old;
		} else {
			this.emitTile(ctx,t);
		}
	}
	,__class__: h2d_Anim
});
var h2d_Bitmap = function(tile,parent) {
	h2d_Drawable.call(this,parent);
	this.set_tile(tile);
};
$hxClasses["h2d.Bitmap"] = h2d_Bitmap;
h2d_Bitmap.__name__ = "h2d.Bitmap";
h2d_Bitmap.__super__ = h2d_Drawable;
h2d_Bitmap.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			if(this.width == null && this.height == null) {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.tile.width,this.tile.height);
			} else {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.width != null ? this.width : this.tile.width * this.height / this.tile.height,this.height != null ? this.height : this.tile.height * this.width / this.tile.width);
			}
		}
	}
	,set_tile: function(t) {
		if(this.tile == t) {
			return t;
		}
		this.tile = t;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t;
	}
	,draw: function(ctx) {
		if(this.width == null && this.height == null) {
			this.emitTile(ctx,this.tile);
			return;
		}
		if(this.tile == null) {
			this.set_tile(h2d_Tile.fromColor(16711935));
		}
		var ow = this.tile.width;
		var oh = this.tile.height;
		this.tile.width = this.width != null ? this.width : ow * this.height / oh;
		this.tile.height = this.height != null ? this.height : oh * this.width / ow;
		this.emitTile(ctx,this.tile);
		this.tile.width = ow;
		this.tile.height = oh;
	}
	,__class__: h2d_Bitmap
});
var h2d_BlendMode = $hxEnums["h2d.BlendMode"] = { __ename__ : true, __constructs__ : ["None","Alpha","Add","AlphaAdd","SoftAdd","Multiply","AlphaMultiply","Erase","Screen","Sub","Max","Min"]
	,None: {_hx_index:0,__enum__:"h2d.BlendMode",toString:$estr}
	,Alpha: {_hx_index:1,__enum__:"h2d.BlendMode",toString:$estr}
	,Add: {_hx_index:2,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaAdd: {_hx_index:3,__enum__:"h2d.BlendMode",toString:$estr}
	,SoftAdd: {_hx_index:4,__enum__:"h2d.BlendMode",toString:$estr}
	,Multiply: {_hx_index:5,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaMultiply: {_hx_index:6,__enum__:"h2d.BlendMode",toString:$estr}
	,Erase: {_hx_index:7,__enum__:"h2d.BlendMode",toString:$estr}
	,Screen: {_hx_index:8,__enum__:"h2d.BlendMode",toString:$estr}
	,Sub: {_hx_index:9,__enum__:"h2d.BlendMode",toString:$estr}
	,Max: {_hx_index:10,__enum__:"h2d.BlendMode",toString:$estr}
	,Min: {_hx_index:11,__enum__:"h2d.BlendMode",toString:$estr}
};
h2d_BlendMode.__empty_constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.AlphaAdd,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.AlphaMultiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen,h2d_BlendMode.Sub,h2d_BlendMode.Max,h2d_BlendMode.Min];
var h2d_Kerning = function(c,o) {
	this.prevChar = c;
	this.offset = o;
};
$hxClasses["h2d.Kerning"] = h2d_Kerning;
h2d_Kerning.__name__ = "h2d.Kerning";
h2d_Kerning.prototype = {
	__class__: h2d_Kerning
};
var h2d_FontChar = function(t,w) {
	this.t = t;
	this.width = w;
};
$hxClasses["h2d.FontChar"] = h2d_FontChar;
h2d_FontChar.__name__ = "h2d.FontChar";
h2d_FontChar.prototype = {
	addKerning: function(prevChar,offset) {
		var k = new h2d_Kerning(prevChar,offset);
		k.next = this.kerning;
		this.kerning = k;
	}
	,getKerningOffset: function(prevChar) {
		var k = this.kerning;
		while(k != null) {
			if(k.prevChar == prevChar) {
				return k.offset;
			}
			k = k.next;
		}
		return 0;
	}
	,__class__: h2d_FontChar
};
var h2d_FontType = $hxEnums["h2d.FontType"] = { __ename__ : true, __constructs__ : ["BitmapFont","SignedDistanceField"]
	,BitmapFont: {_hx_index:0,__enum__:"h2d.FontType",toString:$estr}
	,SignedDistanceField: ($_=function(channel,alphaCutoff,smoothing) { return {_hx_index:1,channel:channel,alphaCutoff:alphaCutoff,smoothing:smoothing,__enum__:"h2d.FontType",toString:$estr}; },$_.__params__ = ["channel","alphaCutoff","smoothing"],$_)
};
h2d_FontType.__empty_constructs__ = [h2d_FontType.BitmapFont];
var h2d_Font = function(name,size,type) {
	this.name = name;
	this.size = size;
	this.initSize = size;
	this.glyphs = new haxe_ds_IntMap();
	this.defaultChar = this.nullChar = new h2d_FontChar(new h2d_Tile(null,0,0,0,0),0);
	this.charset = hxd_Charset.getDefault();
	if(name != null) {
		this.tilePath = haxe_io_Path.withExtension(name,"png");
	}
	if(type == null) {
		this.type = h2d_FontType.BitmapFont;
	} else {
		this.type = type;
	}
};
$hxClasses["h2d.Font"] = h2d_Font;
h2d_Font.__name__ = "h2d.Font";
h2d_Font.prototype = {
	__class__: h2d_Font
};
var h2d_GPoint = function() {
};
$hxClasses["h2d.GPoint"] = h2d_GPoint;
h2d_GPoint.__name__ = "h2d.GPoint";
h2d_GPoint.prototype = {
	load: function(x,y,r,g,b,a) {
		this.x = x;
		this.y = y;
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
	}
	,__class__: h2d_GPoint
};
var hxd_impl__$Serializable_NoSerializeSupport = function() { };
$hxClasses["hxd.impl._Serializable.NoSerializeSupport"] = hxd_impl__$Serializable_NoSerializeSupport;
hxd_impl__$Serializable_NoSerializeSupport.__name__ = "hxd.impl._Serializable.NoSerializeSupport";
hxd_impl__$Serializable_NoSerializeSupport.__isInterface__ = true;
var h3d_prim_Primitive = function() {
	this.refCount = 0;
};
$hxClasses["h3d.prim.Primitive"] = h3d_prim_Primitive;
h3d_prim_Primitive.__name__ = "h3d.prim.Primitive";
h3d_prim_Primitive.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_prim_Primitive.prototype = {
	getBounds: function() {
		throw new js__$Boot_HaxeError("not implemented for " + Std.string(this));
	}
	,incref: function() {
		this.refCount++;
	}
	,decref: function() {
		this.refCount--;
		if(this.refCount <= 0) {
			this.refCount = 0;
			this.dispose();
		}
	}
	,alloc: function(engine) {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		if(this.indexes == null) {
			if((this.buffer.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0) {
				engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
			} else {
				engine.renderBuffer(this.buffer,engine.mem.triIndexes,3,0,-1);
			}
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__.split(".").pop();
	}
	,__class__: h3d_prim_Primitive
};
var h2d__$Graphics_GraphicsContent = function() {
	h3d_prim_Primitive.call(this);
	this.buffers = [];
};
$hxClasses["h2d._Graphics.GraphicsContent"] = h2d__$Graphics_GraphicsContent;
h2d__$Graphics_GraphicsContent.__name__ = "h2d._Graphics.GraphicsContent";
h2d__$Graphics_GraphicsContent.__super__ = h3d_prim_Primitive;
h2d__$Graphics_GraphicsContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	next: function() {
		var nvect = this.tmp.pos >> 3;
		if(nvect < 32768) {
			return false;
		}
		this.buffers.push({ buf : this.tmp, idx : this.index, vbuf : null, ibuf : null});
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		var this2 = new Array(0);
		this.index = this2;
		h3d_prim_Primitive.prototype.dispose.call(this);
		return true;
	}
	,alloc: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.RawFormat]);
		this.indexes = h3d_Indexes.alloc(this.index);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf == null || b.vbuf.isDisposed()) {
				b.vbuf = h3d_Buffer.ofFloats(b.buf,8,[h3d_BufferFlag.RawFormat]);
			}
			if(b.ibuf == null || b.ibuf.isDisposed()) {
				b.ibuf = h3d_Indexes.alloc(b.idx);
			}
		}
		this.bufferDirty = false;
		this.indexDirty = false;
	}
	,render: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		} else {
			if(this.bufferDirty) {
				this.buffer.dispose();
				this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.RawFormat]);
				this.bufferDirty = false;
			}
			if(this.indexDirty) {
				this.indexes.dispose();
				this.indexes = h3d_Indexes.alloc(this.index);
				this.indexDirty = false;
			}
		}
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			engine.renderIndexed(b.vbuf,b.ibuf);
		}
		h3d_prim_Primitive.prototype.render.call(this,engine);
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf != null) {
				b.vbuf.dispose();
			}
			if(b.ibuf != null) {
				b.ibuf.dispose();
			}
			b.vbuf = null;
			b.ibuf = null;
		}
		h3d_prim_Primitive.prototype.dispose.call(this);
	}
	,clear: function() {
		this.dispose();
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		var this2 = new Array(0);
		this.index = this2;
		this.buffers = [];
	}
	,__class__: h2d__$Graphics_GraphicsContent
});
var h2d_Graphics = function(parent) {
	this.bevel = 0.25;
	h2d_Drawable.call(this,parent);
	this.content = new h2d__$Graphics_GraphicsContent();
	this.tile = h2d_Tile.fromColor(16777215);
	this.clear();
};
$hxClasses["h2d.Graphics"] = h2d_Graphics;
h2d_Graphics.__name__ = "h2d.Graphics";
h2d_Graphics.__super__ = h2d_Drawable;
h2d_Graphics.prototype = $extend(h2d_Drawable.prototype,{
	onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		this.clear();
	}
	,clear: function() {
		this.content.clear();
		this.tmpPoints = [];
		this.pindex = 0;
		this.lineSize = 0;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.yMax = -Infinity;
		this.xMax = -Infinity;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			this.addBounds(relativeTo,out,this.xMin,this.yMin,this.xMax - this.xMin,this.yMax - this.yMin);
		}
	}
	,isConvex: function(points) {
		var first = true;
		var sign = false;
		var _g = 0;
		var _g1 = points.length;
		while(_g < _g1) {
			var i = _g++;
			var p1 = points[i];
			var p2 = points[(i + 1) % points.length];
			var p3 = points[(i + 2) % points.length];
			var s = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;
			if(first) {
				first = false;
				sign = s;
			} else if(sign != s) {
				return false;
			}
		}
		return true;
	}
	,flushLine: function(start) {
		var pts = this.tmpPoints;
		var last = pts.length - 1;
		var prev = pts[last];
		var p = pts[0];
		var closed = p.x == prev.x && p.y == prev.y;
		var count = pts.length;
		if(!closed) {
			var prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			var gp = new h2d_GPoint();
			gp.load(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,0,0,0,0);
			pts.push(gp);
			var pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			var gp1 = new h2d_GPoint();
			gp1.load(p.x * 2 - pNext.x,p.y * 2 - pNext.y,0,0,0,0);
			prev = gp1;
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var next = pts[(i + 1) % pts.length];
			var nx1 = prev.y - p.y;
			var ny1 = p.x - prev.x;
			var ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			var nx2 = p.y - next.y;
			var ny2 = next.x - p.x;
			var ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			var nx = nx1 * ns1 + nx2 * ns2;
			var ny = ny1 * ns1 + ny2 * ns2;
			var ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			var size = nx * nx1 * ns1 + ny * ny1 * ns1;
			if(size < 0.1) {
				size = 0.1;
			}
			var d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			if(size > this.bevel) {
				var _this = this.content;
				var x = p.x + nx;
				var y = p.y + ny;
				var r = p.r;
				var g = p.g;
				var b = p.b;
				var a = p.a;
				var this1 = _this.tmp;
				if(this1.pos == this1.array.length) {
					var newSize = this1.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(this1.array);
					this1.array = newArray;
				}
				this1.array[this1.pos++] = x;
				var this2 = _this.tmp;
				if(this2.pos == this2.array.length) {
					var newSize1 = this2.array.length << 1;
					if(newSize1 < 128) {
						newSize1 = 128;
					}
					var newArray1 = new Float32Array(newSize1);
					newArray1.set(this2.array);
					this2.array = newArray1;
				}
				this2.array[this2.pos++] = y;
				var this3 = _this.tmp;
				if(this3.pos == this3.array.length) {
					var newSize2 = this3.array.length << 1;
					if(newSize2 < 128) {
						newSize2 = 128;
					}
					var newArray2 = new Float32Array(newSize2);
					newArray2.set(this3.array);
					this3.array = newArray2;
				}
				this3.array[this3.pos++] = 0;
				var this4 = _this.tmp;
				if(this4.pos == this4.array.length) {
					var newSize3 = this4.array.length << 1;
					if(newSize3 < 128) {
						newSize3 = 128;
					}
					var newArray3 = new Float32Array(newSize3);
					newArray3.set(this4.array);
					this4.array = newArray3;
				}
				this4.array[this4.pos++] = 0;
				var this5 = _this.tmp;
				if(this5.pos == this5.array.length) {
					var newSize4 = this5.array.length << 1;
					if(newSize4 < 128) {
						newSize4 = 128;
					}
					var newArray4 = new Float32Array(newSize4);
					newArray4.set(this5.array);
					this5.array = newArray4;
				}
				this5.array[this5.pos++] = r;
				var this6 = _this.tmp;
				if(this6.pos == this6.array.length) {
					var newSize5 = this6.array.length << 1;
					if(newSize5 < 128) {
						newSize5 = 128;
					}
					var newArray5 = new Float32Array(newSize5);
					newArray5.set(this6.array);
					this6.array = newArray5;
				}
				this6.array[this6.pos++] = g;
				var this7 = _this.tmp;
				if(this7.pos == this7.array.length) {
					var newSize6 = this7.array.length << 1;
					if(newSize6 < 128) {
						newSize6 = 128;
					}
					var newArray6 = new Float32Array(newSize6);
					newArray6.set(this7.array);
					this7.array = newArray6;
				}
				this7.array[this7.pos++] = b;
				var this8 = _this.tmp;
				if(this8.pos == this8.array.length) {
					var newSize7 = this8.array.length << 1;
					if(newSize7 < 128) {
						newSize7 = 128;
					}
					var newArray7 = new Float32Array(newSize7);
					newArray7.set(this8.array);
					this8.array = newArray7;
				}
				this8.array[this8.pos++] = a;
				_this.bufferDirty = true;
				var _this1 = this.content;
				var x1 = p.x - nx;
				var y1 = p.y - ny;
				var r1 = p.r;
				var g1 = p.g;
				var b1 = p.b;
				var a1 = p.a;
				var this9 = _this1.tmp;
				if(this9.pos == this9.array.length) {
					var newSize8 = this9.array.length << 1;
					if(newSize8 < 128) {
						newSize8 = 128;
					}
					var newArray8 = new Float32Array(newSize8);
					newArray8.set(this9.array);
					this9.array = newArray8;
				}
				this9.array[this9.pos++] = x1;
				var this10 = _this1.tmp;
				if(this10.pos == this10.array.length) {
					var newSize9 = this10.array.length << 1;
					if(newSize9 < 128) {
						newSize9 = 128;
					}
					var newArray9 = new Float32Array(newSize9);
					newArray9.set(this10.array);
					this10.array = newArray9;
				}
				this10.array[this10.pos++] = y1;
				var this11 = _this1.tmp;
				if(this11.pos == this11.array.length) {
					var newSize10 = this11.array.length << 1;
					if(newSize10 < 128) {
						newSize10 = 128;
					}
					var newArray10 = new Float32Array(newSize10);
					newArray10.set(this11.array);
					this11.array = newArray10;
				}
				this11.array[this11.pos++] = 0;
				var this12 = _this1.tmp;
				if(this12.pos == this12.array.length) {
					var newSize11 = this12.array.length << 1;
					if(newSize11 < 128) {
						newSize11 = 128;
					}
					var newArray11 = new Float32Array(newSize11);
					newArray11.set(this12.array);
					this12.array = newArray11;
				}
				this12.array[this12.pos++] = 0;
				var this13 = _this1.tmp;
				if(this13.pos == this13.array.length) {
					var newSize12 = this13.array.length << 1;
					if(newSize12 < 128) {
						newSize12 = 128;
					}
					var newArray12 = new Float32Array(newSize12);
					newArray12.set(this13.array);
					this13.array = newArray12;
				}
				this13.array[this13.pos++] = r1;
				var this14 = _this1.tmp;
				if(this14.pos == this14.array.length) {
					var newSize13 = this14.array.length << 1;
					if(newSize13 < 128) {
						newSize13 = 128;
					}
					var newArray13 = new Float32Array(newSize13);
					newArray13.set(this14.array);
					this14.array = newArray13;
				}
				this14.array[this14.pos++] = g1;
				var this15 = _this1.tmp;
				if(this15.pos == this15.array.length) {
					var newSize14 = this15.array.length << 1;
					if(newSize14 < 128) {
						newSize14 = 128;
					}
					var newArray14 = new Float32Array(newSize14);
					newArray14.set(this15.array);
					this15.array = newArray14;
				}
				this15.array[this15.pos++] = b1;
				var this16 = _this1.tmp;
				if(this16.pos == this16.array.length) {
					var newSize15 = this16.array.length << 1;
					if(newSize15 < 128) {
						newSize15 = 128;
					}
					var newArray15 = new Float32Array(newSize15);
					newArray15.set(this16.array);
					this16.array = newArray15;
				}
				this16.array[this16.pos++] = a1;
				_this1.bufferDirty = true;
				var pnext = i == last ? start : this.pindex + 2;
				if(i < count - 1 || closed) {
					var _this2 = this.content;
					_this2.index.push(this.pindex);
					_this2.indexDirty = true;
					var _this3 = this.content;
					_this3.index.push(this.pindex + 1);
					_this3.indexDirty = true;
					var _this4 = this.content;
					_this4.index.push(pnext);
					_this4.indexDirty = true;
					var _this5 = this.content;
					_this5.index.push(this.pindex + 1);
					_this5.indexDirty = true;
					var _this6 = this.content;
					_this6.index.push(pnext);
					_this6.indexDirty = true;
					var _this7 = this.content;
					_this7.index.push(pnext + 1);
					_this7.indexDirty = true;
				}
				this.pindex += 2;
			} else {
				var n0x = next.x - p.x;
				var n0y = next.y - p.y;
				var sign = n0x * nx + n0y * ny;
				var nnx = -ny;
				var nny = nx;
				var size1 = nnx * nx1 * ns1 + nny * ny1 * ns1;
				var d1 = this.lineSize * 0.5 / size1;
				nnx *= d1;
				nny *= d1;
				var pnext1 = i == last ? start : this.pindex + 3;
				if(sign > 0) {
					var _this8 = this.content;
					var x2 = p.x + nx;
					var y2 = p.y + ny;
					var r2 = p.r;
					var g2 = p.g;
					var b2 = p.b;
					var a2 = p.a;
					var this17 = _this8.tmp;
					if(this17.pos == this17.array.length) {
						var newSize16 = this17.array.length << 1;
						if(newSize16 < 128) {
							newSize16 = 128;
						}
						var newArray16 = new Float32Array(newSize16);
						newArray16.set(this17.array);
						this17.array = newArray16;
					}
					this17.array[this17.pos++] = x2;
					var this18 = _this8.tmp;
					if(this18.pos == this18.array.length) {
						var newSize17 = this18.array.length << 1;
						if(newSize17 < 128) {
							newSize17 = 128;
						}
						var newArray17 = new Float32Array(newSize17);
						newArray17.set(this18.array);
						this18.array = newArray17;
					}
					this18.array[this18.pos++] = y2;
					var this19 = _this8.tmp;
					if(this19.pos == this19.array.length) {
						var newSize18 = this19.array.length << 1;
						if(newSize18 < 128) {
							newSize18 = 128;
						}
						var newArray18 = new Float32Array(newSize18);
						newArray18.set(this19.array);
						this19.array = newArray18;
					}
					this19.array[this19.pos++] = 0;
					var this20 = _this8.tmp;
					if(this20.pos == this20.array.length) {
						var newSize19 = this20.array.length << 1;
						if(newSize19 < 128) {
							newSize19 = 128;
						}
						var newArray19 = new Float32Array(newSize19);
						newArray19.set(this20.array);
						this20.array = newArray19;
					}
					this20.array[this20.pos++] = 0;
					var this21 = _this8.tmp;
					if(this21.pos == this21.array.length) {
						var newSize20 = this21.array.length << 1;
						if(newSize20 < 128) {
							newSize20 = 128;
						}
						var newArray20 = new Float32Array(newSize20);
						newArray20.set(this21.array);
						this21.array = newArray20;
					}
					this21.array[this21.pos++] = r2;
					var this22 = _this8.tmp;
					if(this22.pos == this22.array.length) {
						var newSize21 = this22.array.length << 1;
						if(newSize21 < 128) {
							newSize21 = 128;
						}
						var newArray21 = new Float32Array(newSize21);
						newArray21.set(this22.array);
						this22.array = newArray21;
					}
					this22.array[this22.pos++] = g2;
					var this23 = _this8.tmp;
					if(this23.pos == this23.array.length) {
						var newSize22 = this23.array.length << 1;
						if(newSize22 < 128) {
							newSize22 = 128;
						}
						var newArray22 = new Float32Array(newSize22);
						newArray22.set(this23.array);
						this23.array = newArray22;
					}
					this23.array[this23.pos++] = b2;
					var this24 = _this8.tmp;
					if(this24.pos == this24.array.length) {
						var newSize23 = this24.array.length << 1;
						if(newSize23 < 128) {
							newSize23 = 128;
						}
						var newArray23 = new Float32Array(newSize23);
						newArray23.set(this24.array);
						this24.array = newArray23;
					}
					this24.array[this24.pos++] = a2;
					_this8.bufferDirty = true;
					var _this9 = this.content;
					var x3 = p.x - nnx;
					var y3 = p.y - nny;
					var r3 = p.r;
					var g3 = p.g;
					var b3 = p.b;
					var a3 = p.a;
					var this25 = _this9.tmp;
					if(this25.pos == this25.array.length) {
						var newSize24 = this25.array.length << 1;
						if(newSize24 < 128) {
							newSize24 = 128;
						}
						var newArray24 = new Float32Array(newSize24);
						newArray24.set(this25.array);
						this25.array = newArray24;
					}
					this25.array[this25.pos++] = x3;
					var this26 = _this9.tmp;
					if(this26.pos == this26.array.length) {
						var newSize25 = this26.array.length << 1;
						if(newSize25 < 128) {
							newSize25 = 128;
						}
						var newArray25 = new Float32Array(newSize25);
						newArray25.set(this26.array);
						this26.array = newArray25;
					}
					this26.array[this26.pos++] = y3;
					var this27 = _this9.tmp;
					if(this27.pos == this27.array.length) {
						var newSize26 = this27.array.length << 1;
						if(newSize26 < 128) {
							newSize26 = 128;
						}
						var newArray26 = new Float32Array(newSize26);
						newArray26.set(this27.array);
						this27.array = newArray26;
					}
					this27.array[this27.pos++] = 0;
					var this28 = _this9.tmp;
					if(this28.pos == this28.array.length) {
						var newSize27 = this28.array.length << 1;
						if(newSize27 < 128) {
							newSize27 = 128;
						}
						var newArray27 = new Float32Array(newSize27);
						newArray27.set(this28.array);
						this28.array = newArray27;
					}
					this28.array[this28.pos++] = 0;
					var this29 = _this9.tmp;
					if(this29.pos == this29.array.length) {
						var newSize28 = this29.array.length << 1;
						if(newSize28 < 128) {
							newSize28 = 128;
						}
						var newArray28 = new Float32Array(newSize28);
						newArray28.set(this29.array);
						this29.array = newArray28;
					}
					this29.array[this29.pos++] = r3;
					var this30 = _this9.tmp;
					if(this30.pos == this30.array.length) {
						var newSize29 = this30.array.length << 1;
						if(newSize29 < 128) {
							newSize29 = 128;
						}
						var newArray29 = new Float32Array(newSize29);
						newArray29.set(this30.array);
						this30.array = newArray29;
					}
					this30.array[this30.pos++] = g3;
					var this31 = _this9.tmp;
					if(this31.pos == this31.array.length) {
						var newSize30 = this31.array.length << 1;
						if(newSize30 < 128) {
							newSize30 = 128;
						}
						var newArray30 = new Float32Array(newSize30);
						newArray30.set(this31.array);
						this31.array = newArray30;
					}
					this31.array[this31.pos++] = b3;
					var this32 = _this9.tmp;
					if(this32.pos == this32.array.length) {
						var newSize31 = this32.array.length << 1;
						if(newSize31 < 128) {
							newSize31 = 128;
						}
						var newArray31 = new Float32Array(newSize31);
						newArray31.set(this32.array);
						this32.array = newArray31;
					}
					this32.array[this32.pos++] = a3;
					_this9.bufferDirty = true;
					var _this10 = this.content;
					var x4 = p.x + nnx;
					var y4 = p.y + nny;
					var r4 = p.r;
					var g4 = p.g;
					var b4 = p.b;
					var a4 = p.a;
					var this33 = _this10.tmp;
					if(this33.pos == this33.array.length) {
						var newSize32 = this33.array.length << 1;
						if(newSize32 < 128) {
							newSize32 = 128;
						}
						var newArray32 = new Float32Array(newSize32);
						newArray32.set(this33.array);
						this33.array = newArray32;
					}
					this33.array[this33.pos++] = x4;
					var this34 = _this10.tmp;
					if(this34.pos == this34.array.length) {
						var newSize33 = this34.array.length << 1;
						if(newSize33 < 128) {
							newSize33 = 128;
						}
						var newArray33 = new Float32Array(newSize33);
						newArray33.set(this34.array);
						this34.array = newArray33;
					}
					this34.array[this34.pos++] = y4;
					var this35 = _this10.tmp;
					if(this35.pos == this35.array.length) {
						var newSize34 = this35.array.length << 1;
						if(newSize34 < 128) {
							newSize34 = 128;
						}
						var newArray34 = new Float32Array(newSize34);
						newArray34.set(this35.array);
						this35.array = newArray34;
					}
					this35.array[this35.pos++] = 0;
					var this36 = _this10.tmp;
					if(this36.pos == this36.array.length) {
						var newSize35 = this36.array.length << 1;
						if(newSize35 < 128) {
							newSize35 = 128;
						}
						var newArray35 = new Float32Array(newSize35);
						newArray35.set(this36.array);
						this36.array = newArray35;
					}
					this36.array[this36.pos++] = 0;
					var this37 = _this10.tmp;
					if(this37.pos == this37.array.length) {
						var newSize36 = this37.array.length << 1;
						if(newSize36 < 128) {
							newSize36 = 128;
						}
						var newArray36 = new Float32Array(newSize36);
						newArray36.set(this37.array);
						this37.array = newArray36;
					}
					this37.array[this37.pos++] = r4;
					var this38 = _this10.tmp;
					if(this38.pos == this38.array.length) {
						var newSize37 = this38.array.length << 1;
						if(newSize37 < 128) {
							newSize37 = 128;
						}
						var newArray37 = new Float32Array(newSize37);
						newArray37.set(this38.array);
						this38.array = newArray37;
					}
					this38.array[this38.pos++] = g4;
					var this39 = _this10.tmp;
					if(this39.pos == this39.array.length) {
						var newSize38 = this39.array.length << 1;
						if(newSize38 < 128) {
							newSize38 = 128;
						}
						var newArray38 = new Float32Array(newSize38);
						newArray38.set(this39.array);
						this39.array = newArray38;
					}
					this39.array[this39.pos++] = b4;
					var this40 = _this10.tmp;
					if(this40.pos == this40.array.length) {
						var newSize39 = this40.array.length << 1;
						if(newSize39 < 128) {
							newSize39 = 128;
						}
						var newArray39 = new Float32Array(newSize39);
						newArray39.set(this40.array);
						this40.array = newArray39;
					}
					this40.array[this40.pos++] = a4;
					_this10.bufferDirty = true;
					var _this11 = this.content;
					_this11.index.push(this.pindex);
					_this11.indexDirty = true;
					var _this12 = this.content;
					_this12.index.push(pnext1);
					_this12.indexDirty = true;
					var _this13 = this.content;
					_this13.index.push(this.pindex + 2);
					_this13.indexDirty = true;
					var _this14 = this.content;
					_this14.index.push(this.pindex + 2);
					_this14.indexDirty = true;
					var _this15 = this.content;
					_this15.index.push(pnext1);
					_this15.indexDirty = true;
					var _this16 = this.content;
					_this16.index.push(pnext1 + 1);
					_this16.indexDirty = true;
				} else {
					var _this17 = this.content;
					var x5 = p.x + nnx;
					var y5 = p.y + nny;
					var r5 = p.r;
					var g5 = p.g;
					var b5 = p.b;
					var a5 = p.a;
					var this41 = _this17.tmp;
					if(this41.pos == this41.array.length) {
						var newSize40 = this41.array.length << 1;
						if(newSize40 < 128) {
							newSize40 = 128;
						}
						var newArray40 = new Float32Array(newSize40);
						newArray40.set(this41.array);
						this41.array = newArray40;
					}
					this41.array[this41.pos++] = x5;
					var this42 = _this17.tmp;
					if(this42.pos == this42.array.length) {
						var newSize41 = this42.array.length << 1;
						if(newSize41 < 128) {
							newSize41 = 128;
						}
						var newArray41 = new Float32Array(newSize41);
						newArray41.set(this42.array);
						this42.array = newArray41;
					}
					this42.array[this42.pos++] = y5;
					var this43 = _this17.tmp;
					if(this43.pos == this43.array.length) {
						var newSize42 = this43.array.length << 1;
						if(newSize42 < 128) {
							newSize42 = 128;
						}
						var newArray42 = new Float32Array(newSize42);
						newArray42.set(this43.array);
						this43.array = newArray42;
					}
					this43.array[this43.pos++] = 0;
					var this44 = _this17.tmp;
					if(this44.pos == this44.array.length) {
						var newSize43 = this44.array.length << 1;
						if(newSize43 < 128) {
							newSize43 = 128;
						}
						var newArray43 = new Float32Array(newSize43);
						newArray43.set(this44.array);
						this44.array = newArray43;
					}
					this44.array[this44.pos++] = 0;
					var this45 = _this17.tmp;
					if(this45.pos == this45.array.length) {
						var newSize44 = this45.array.length << 1;
						if(newSize44 < 128) {
							newSize44 = 128;
						}
						var newArray44 = new Float32Array(newSize44);
						newArray44.set(this45.array);
						this45.array = newArray44;
					}
					this45.array[this45.pos++] = r5;
					var this46 = _this17.tmp;
					if(this46.pos == this46.array.length) {
						var newSize45 = this46.array.length << 1;
						if(newSize45 < 128) {
							newSize45 = 128;
						}
						var newArray45 = new Float32Array(newSize45);
						newArray45.set(this46.array);
						this46.array = newArray45;
					}
					this46.array[this46.pos++] = g5;
					var this47 = _this17.tmp;
					if(this47.pos == this47.array.length) {
						var newSize46 = this47.array.length << 1;
						if(newSize46 < 128) {
							newSize46 = 128;
						}
						var newArray46 = new Float32Array(newSize46);
						newArray46.set(this47.array);
						this47.array = newArray46;
					}
					this47.array[this47.pos++] = b5;
					var this48 = _this17.tmp;
					if(this48.pos == this48.array.length) {
						var newSize47 = this48.array.length << 1;
						if(newSize47 < 128) {
							newSize47 = 128;
						}
						var newArray47 = new Float32Array(newSize47);
						newArray47.set(this48.array);
						this48.array = newArray47;
					}
					this48.array[this48.pos++] = a5;
					_this17.bufferDirty = true;
					var _this18 = this.content;
					var x6 = p.x - nx;
					var y6 = p.y - ny;
					var r6 = p.r;
					var g6 = p.g;
					var b6 = p.b;
					var a6 = p.a;
					var this49 = _this18.tmp;
					if(this49.pos == this49.array.length) {
						var newSize48 = this49.array.length << 1;
						if(newSize48 < 128) {
							newSize48 = 128;
						}
						var newArray48 = new Float32Array(newSize48);
						newArray48.set(this49.array);
						this49.array = newArray48;
					}
					this49.array[this49.pos++] = x6;
					var this50 = _this18.tmp;
					if(this50.pos == this50.array.length) {
						var newSize49 = this50.array.length << 1;
						if(newSize49 < 128) {
							newSize49 = 128;
						}
						var newArray49 = new Float32Array(newSize49);
						newArray49.set(this50.array);
						this50.array = newArray49;
					}
					this50.array[this50.pos++] = y6;
					var this51 = _this18.tmp;
					if(this51.pos == this51.array.length) {
						var newSize50 = this51.array.length << 1;
						if(newSize50 < 128) {
							newSize50 = 128;
						}
						var newArray50 = new Float32Array(newSize50);
						newArray50.set(this51.array);
						this51.array = newArray50;
					}
					this51.array[this51.pos++] = 0;
					var this52 = _this18.tmp;
					if(this52.pos == this52.array.length) {
						var newSize51 = this52.array.length << 1;
						if(newSize51 < 128) {
							newSize51 = 128;
						}
						var newArray51 = new Float32Array(newSize51);
						newArray51.set(this52.array);
						this52.array = newArray51;
					}
					this52.array[this52.pos++] = 0;
					var this53 = _this18.tmp;
					if(this53.pos == this53.array.length) {
						var newSize52 = this53.array.length << 1;
						if(newSize52 < 128) {
							newSize52 = 128;
						}
						var newArray52 = new Float32Array(newSize52);
						newArray52.set(this53.array);
						this53.array = newArray52;
					}
					this53.array[this53.pos++] = r6;
					var this54 = _this18.tmp;
					if(this54.pos == this54.array.length) {
						var newSize53 = this54.array.length << 1;
						if(newSize53 < 128) {
							newSize53 = 128;
						}
						var newArray53 = new Float32Array(newSize53);
						newArray53.set(this54.array);
						this54.array = newArray53;
					}
					this54.array[this54.pos++] = g6;
					var this55 = _this18.tmp;
					if(this55.pos == this55.array.length) {
						var newSize54 = this55.array.length << 1;
						if(newSize54 < 128) {
							newSize54 = 128;
						}
						var newArray54 = new Float32Array(newSize54);
						newArray54.set(this55.array);
						this55.array = newArray54;
					}
					this55.array[this55.pos++] = b6;
					var this56 = _this18.tmp;
					if(this56.pos == this56.array.length) {
						var newSize55 = this56.array.length << 1;
						if(newSize55 < 128) {
							newSize55 = 128;
						}
						var newArray55 = new Float32Array(newSize55);
						newArray55.set(this56.array);
						this56.array = newArray55;
					}
					this56.array[this56.pos++] = a6;
					_this18.bufferDirty = true;
					var _this19 = this.content;
					var x7 = p.x - nnx;
					var y7 = p.y - nny;
					var r7 = p.r;
					var g7 = p.g;
					var b7 = p.b;
					var a7 = p.a;
					var this57 = _this19.tmp;
					if(this57.pos == this57.array.length) {
						var newSize56 = this57.array.length << 1;
						if(newSize56 < 128) {
							newSize56 = 128;
						}
						var newArray56 = new Float32Array(newSize56);
						newArray56.set(this57.array);
						this57.array = newArray56;
					}
					this57.array[this57.pos++] = x7;
					var this58 = _this19.tmp;
					if(this58.pos == this58.array.length) {
						var newSize57 = this58.array.length << 1;
						if(newSize57 < 128) {
							newSize57 = 128;
						}
						var newArray57 = new Float32Array(newSize57);
						newArray57.set(this58.array);
						this58.array = newArray57;
					}
					this58.array[this58.pos++] = y7;
					var this59 = _this19.tmp;
					if(this59.pos == this59.array.length) {
						var newSize58 = this59.array.length << 1;
						if(newSize58 < 128) {
							newSize58 = 128;
						}
						var newArray58 = new Float32Array(newSize58);
						newArray58.set(this59.array);
						this59.array = newArray58;
					}
					this59.array[this59.pos++] = 0;
					var this60 = _this19.tmp;
					if(this60.pos == this60.array.length) {
						var newSize59 = this60.array.length << 1;
						if(newSize59 < 128) {
							newSize59 = 128;
						}
						var newArray59 = new Float32Array(newSize59);
						newArray59.set(this60.array);
						this60.array = newArray59;
					}
					this60.array[this60.pos++] = 0;
					var this61 = _this19.tmp;
					if(this61.pos == this61.array.length) {
						var newSize60 = this61.array.length << 1;
						if(newSize60 < 128) {
							newSize60 = 128;
						}
						var newArray60 = new Float32Array(newSize60);
						newArray60.set(this61.array);
						this61.array = newArray60;
					}
					this61.array[this61.pos++] = r7;
					var this62 = _this19.tmp;
					if(this62.pos == this62.array.length) {
						var newSize61 = this62.array.length << 1;
						if(newSize61 < 128) {
							newSize61 = 128;
						}
						var newArray61 = new Float32Array(newSize61);
						newArray61.set(this62.array);
						this62.array = newArray61;
					}
					this62.array[this62.pos++] = g7;
					var this63 = _this19.tmp;
					if(this63.pos == this63.array.length) {
						var newSize62 = this63.array.length << 1;
						if(newSize62 < 128) {
							newSize62 = 128;
						}
						var newArray62 = new Float32Array(newSize62);
						newArray62.set(this63.array);
						this63.array = newArray62;
					}
					this63.array[this63.pos++] = b7;
					var this64 = _this19.tmp;
					if(this64.pos == this64.array.length) {
						var newSize63 = this64.array.length << 1;
						if(newSize63 < 128) {
							newSize63 = 128;
						}
						var newArray63 = new Float32Array(newSize63);
						newArray63.set(this64.array);
						this64.array = newArray63;
					}
					this64.array[this64.pos++] = a7;
					_this19.bufferDirty = true;
					var _this20 = this.content;
					_this20.index.push(this.pindex + 1);
					_this20.indexDirty = true;
					var _this21 = this.content;
					_this21.index.push(pnext1);
					_this21.indexDirty = true;
					var _this22 = this.content;
					_this22.index.push(this.pindex + 2);
					_this22.indexDirty = true;
					var _this23 = this.content;
					_this23.index.push(this.pindex + 1);
					_this23.indexDirty = true;
					var _this24 = this.content;
					_this24.index.push(pnext1);
					_this24.indexDirty = true;
					var _this25 = this.content;
					_this25.index.push(pnext1 + 1);
					_this25.indexDirty = true;
				}
				var _this26 = this.content;
				_this26.index.push(this.pindex);
				_this26.indexDirty = true;
				var _this27 = this.content;
				_this27.index.push(this.pindex + 1);
				_this27.indexDirty = true;
				var _this28 = this.content;
				_this28.index.push(this.pindex + 2);
				_this28.indexDirty = true;
				this.pindex += 3;
			}
			prev = p;
			p = next;
		}
	}
	,flushFill: function(i0) {
		if(this.tmpPoints.length < 3) {
			return;
		}
		var pts = this.tmpPoints;
		var p0 = pts[0];
		var p1 = pts[pts.length - 1];
		var last = null;
		var tmp;
		var f = p0.x - p1.x;
		if((f < 0 ? -f : f) < 1e-9) {
			var f1 = p0.y - p1.y;
			tmp = (f1 < 0 ? -f1 : f1) < 1e-9;
		} else {
			tmp = false;
		}
		if(tmp) {
			last = pts.pop();
		}
		if(this.isConvex(pts)) {
			var _g = 1;
			var _g1 = pts.length - 1;
			while(_g < _g1) {
				var i = _g++;
				var _this = this.content;
				_this.index.push(i0);
				_this.indexDirty = true;
				var _this1 = this.content;
				_this1.index.push(i0 + i);
				_this1.indexDirty = true;
				var _this2 = this.content;
				_this2.index.push(i0 + i + 1);
				_this2.indexDirty = true;
			}
		} else {
			var ear = h2d_Graphics.EARCUT;
			if(ear == null) {
				ear = new hxd_earcut_Earcut();
				h2d_Graphics.EARCUT = ear;
			}
			var _g2 = 0;
			var _g11 = ear.triangulate_h2d_GPoint(pts);
			while(_g2 < _g11.length) {
				var i1 = _g11[_g2];
				++_g2;
				var _this3 = this.content;
				_this3.index.push(i1 + i0);
				_this3.indexDirty = true;
			}
		}
		if(last != null) {
			pts.push(last);
		}
	}
	,flush: function() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.doFill) {
			this.flushFill(this.pindex);
			this.pindex += this.tmpPoints.length;
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		if(this.lineSize > 0) {
			this.flushLine(this.pindex);
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		this.tmpPoints = [];
	}
	,draw: function(ctx) {
		if(!ctx.beginDrawObject(this,this.tile.innerTex)) {
			return;
		}
		this.content.render(ctx.engine);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		this.flush();
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.isDisposed()) {
			_this.alloc(h3d_Engine.CURRENT);
		} else {
			if(_this.bufferDirty) {
				_this.buffer.dispose();
				_this.buffer = h3d_Buffer.ofFloats(_this.tmp,8,[h3d_BufferFlag.RawFormat]);
				_this.bufferDirty = false;
			}
			if(_this.indexDirty) {
				_this.indexes.dispose();
				_this.indexes = h3d_Indexes.alloc(_this.index);
				_this.indexDirty = false;
			}
		}
	}
	,__class__: h2d_Graphics
});
var hxd_Interactive = function() { };
$hxClasses["hxd.Interactive"] = hxd_Interactive;
hxd_Interactive.__name__ = "hxd.Interactive";
hxd_Interactive.__isInterface__ = true;
hxd_Interactive.prototype = {
	__class__: hxd_Interactive
};
var h2d_Interactive = function(width,height,parent,shape) {
	this.shapeY = 0;
	this.shapeX = 0;
	this.mouseDownButton = -1;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h2d_Drawable.call(this,parent);
	this.width = width;
	this.height = height;
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h2d.Interactive"] = h2d_Interactive;
h2d_Interactive.__name__ = "h2d.Interactive";
h2d_Interactive.__interfaces__ = [hxd_Interactive];
h2d_Interactive.__super__ = h2d_Drawable;
h2d_Interactive.prototype = $extend(h2d_Drawable.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		this.updateMask();
		h2d_Drawable.prototype.onAdd.call(this);
	}
	,draw: function(ctx) {
		if(this.backgroundColor != null) {
			this.emitTile(ctx,h2d_Tile.fromColor(this.backgroundColor,this.width | 0,this.height | 0,(this.backgroundColor >>> 24) / 255));
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.backgroundColor != null || forSize) {
			this.addBounds(relativeTo,out,0,0,this.width | 0,this.height | 0);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		h2d_Drawable.prototype.onHierarchyMoved.call(this,parentChanged);
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = this.getScene();
			if(this.scene != null) {
				this.scene.addEventTarget(this);
			}
		}
		if(parentChanged) {
			this.updateMask();
		}
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = ((p) instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this,true);
			this.scene = null;
		}
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,checkBounds: function(e) {
		switch(e.kind._hx_index) {
		case 4:case 6:case 7:case 10:
			return false;
		default:
			return true;
		}
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.parentMask != null && this.checkBounds(e)) {
			var p = this.parentMask;
			var pt = new h2d_col_Point(e.relX,e.relY);
			this.localToGlobal(pt);
			var saveX = pt.x;
			var saveY = pt.y;
			while(p != null) {
				pt.x = saveX;
				pt.y = saveY;
				var pt1 = p.globalToLocal(pt);
				if(pt1.x < 0 || pt1.y < 0 || pt1.x > p.width || pt1.y > p.height) {
					e.cancel = true;
					return;
				}
				p = p.parentMask;
			}
		}
		if(this.shape == null && this.isEllipse && this.checkBounds(e)) {
			var cx = this.width * 0.5;
			var cy = this.height * 0.5;
			var dx = (e.relX - cx) / cx;
			var dy = (e.relY - cy) / cy;
			if(dx * dx + dy * dy > 1) {
				e.cancel = true;
				return;
			}
		}
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,calcAbsPos: function() {
		h2d_Drawable.prototype.calcAbsPos.call(this);
		this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h2d_Interactive
});
var h2d_Layers = function(parent) {
	h2d_Object.call(this,parent);
	this.layersIndexes = [];
	this.layerCount = 0;
};
$hxClasses["h2d.Layers"] = h2d_Layers;
h2d_Layers.__name__ = "h2d.Layers";
h2d_Layers.__super__ = h2d_Object;
h2d_Layers.prototype = $extend(h2d_Object.prototype,{
	addChild: function(s) {
		this.addChildAt(s,0);
	}
	,addChildAt: function(s,layer) {
		if(s.parent == this) {
			var old = s.allocated;
			s.allocated = false;
			this.removeChild(s);
			s.allocated = old;
		}
		while(layer >= this.layerCount) this.layersIndexes[this.layerCount++] = this.children.length;
		h2d_Object.prototype.addChildAt.call(this,s,this.layersIndexes[layer]);
		var _g = layer;
		var _g1 = this.layerCount;
		while(_g < _g1) {
			var i = _g++;
			this.layersIndexes[i]++;
		}
	}
	,removeChild: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				this.children.splice(i,1);
				if(s.allocated) {
					s.onRemove();
				}
				s.parent = null;
				s.posChanged = true;
				if(s.parentContainer != null) {
					s.setParentContainer(null);
				}
				var k = this.layerCount - 1;
				while(k >= 0 && this.layersIndexes[k] > i) {
					this.layersIndexes[k]--;
					--k;
				}
				if(this.parentContainer != null) {
					this.parentContainer.contentChanged(this);
				}
				break;
			}
		}
	}
	,__class__: h2d_Layers
});
var h2d_Mask = function(width,height,parent) {
	this.scrollY = 0;
	this.scrollX = 0;
	h2d_Object.call(this,parent);
	this.width = width;
	this.height = height;
};
$hxClasses["h2d.Mask"] = h2d_Mask;
h2d_Mask.__name__ = "h2d.Mask";
h2d_Mask.__super__ = h2d_Object;
h2d_Mask.prototype = $extend(h2d_Object.prototype,{
	onHierarchyMoved: function(parentChanged) {
		h2d_Object.prototype.onHierarchyMoved.call(this,parentChanged);
		if(parentChanged) {
			this.updateMask();
		}
	}
	,onAdd: function() {
		h2d_Object.prototype.onAdd.call(this);
		this.updateMask();
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = ((p) instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,calcAbsPos: function() {
		h2d_Object.prototype.calcAbsPos.call(this);
		this.absX -= this.scrollX;
		this.absY -= this.scrollY;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		var xMin = out.xMin;
		var yMin = out.yMin;
		var xMax = out.xMax;
		var yMax = out.yMax;
		out.xMin = 1e20;
		out.yMin = 1e20;
		out.xMax = -1e20;
		out.yMax = -1e20;
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		this.addBounds(relativeTo,out,0,0,this.width,this.height);
		var bxMin = out.xMin;
		var byMin = out.yMin;
		var bxMax = out.xMax;
		var byMax = out.yMax;
		out.xMin = xMin;
		out.xMax = xMax;
		out.yMin = yMin;
		out.yMax = yMax;
		h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(out.xMin < bxMin) {
			out.xMin = xMin > bxMin ? bxMin : xMin;
		}
		if(out.yMin < byMin) {
			out.yMin = yMin > byMin ? byMin : yMin;
		}
		if(out.xMax > bxMax) {
			out.xMax = xMax < bxMax ? bxMax : xMax;
		}
		if(out.yMax > byMax) {
			out.yMax = yMax < byMax ? byMax : yMax;
		}
	}
	,drawRec: function(ctx) {
		var x1 = this.absX + this.scrollX;
		var y1 = this.absY + this.scrollY;
		var x2 = this.width * this.matA + this.height * this.matC + x1;
		var y2 = this.width * this.matB + this.height * this.matD + y1;
		var tmp;
		if(x1 > x2) {
			tmp = x1;
			x1 = x2;
			x2 = tmp;
		}
		if(y1 > y2) {
			tmp = y1;
			y1 = y2;
			y2 = tmp;
		}
		if(ctx.hasRenderZone) {
			var oldX = ctx.renderX;
			var oldY = ctx.renderY;
			var oldW = ctx.renderW;
			var oldH = ctx.renderH;
			ctx.setRenderZone(x1,y1,x2 - x1,y2 - y1);
			h2d_Object.prototype.drawRec.call(this,ctx);
			ctx.setRenderZone(oldX,oldY,oldW,oldH);
		} else {
			ctx.setRenderZone(x1,y1,x2 - x1,y2 - y1);
			h2d_Object.prototype.drawRec.call(this,ctx);
			ctx.hasRenderZone = false;
			ctx.engine.setRenderZone();
		}
	}
	,__class__: h2d_Mask
});
var h3d_impl_RenderContext = function() {
	this.engine = h3d_Engine.CURRENT;
	this.frame = 0;
	this.time = 0.;
	this.elapsedTime = 1. / hxd_System.getDefaultFrameRate();
	this.textures = new h3d_impl_TextureCache(this);
};
$hxClasses["h3d.impl.RenderContext"] = h3d_impl_RenderContext;
h3d_impl_RenderContext.__name__ = "h3d.impl.RenderContext";
h3d_impl_RenderContext.prototype = {
	__class__: h3d_impl_RenderContext
};
var h2d_RenderContext = function(scene) {
	this.tmpBounds = new h2d_col_Bounds();
	this.defaultSmooth = false;
	this.globalAlpha = 1.;
	h3d_impl_RenderContext.call(this);
	this.scene = scene;
	this.bufPos = 0;
	this.manager = new h3d_pass_ShaderManager();
	this.pass = new h3d_mat_Pass("",null);
	this.pass.depth(true,h3d_mat_Compare.Always);
	this.pass.set_culling(h3d_mat_Face.None);
	this.baseShader = new h3d_shader_Base2d();
	this.baseShader.setPriority(100);
	this.baseShader.zValue__ = 0.;
	this.baseShaderList = new hxsl_ShaderList(this.baseShader);
	this.targetsStack = [];
	this.targetsStackIndex = 0;
	this.filterStack = [];
};
$hxClasses["h2d.RenderContext"] = h2d_RenderContext;
h2d_RenderContext.__name__ = "h2d.RenderContext";
h2d_RenderContext.__super__ = h3d_impl_RenderContext;
h2d_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	begin: function() {
		this.texture = null;
		this.currentObj = null;
		this.bufPos = 0;
		this.stride = 0;
		this.curX = 0;
		this.curY = 0;
		this.targetFlipY = this.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) ? -1 : 1;
		this.baseFlipY = this.engine.getCurrentTarget() != null ? this.targetFlipY : 1;
		this.inFilter = null;
		this.curWidth = this.scene.width;
		this.curHeight = this.scene.height;
		this.manager.globals.set("time",this.time);
		var _this = this.baseShader;
		_this.constModified = true;
		_this.pixelAlign__ = false;
		var _this1 = this.baseShader.halfPixelInverse__;
		var x = 0.5 / this.engine.width;
		var y = 0.5 / this.engine.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this1.x = x;
		_this1.y = y;
		_this1.z = 0.;
		_this1.w = 1.;
		var _this2 = this.baseShader.viewport__;
		var x1 = -this.scene.width * 0.5 - this.scene.offsetX;
		var y1 = -this.scene.height * 0.5 - this.scene.offsetY;
		var z = 2 / this.scene.width * this.scene.ratioX;
		var w = -2 * this.baseFlipY / this.scene.height * this.scene.ratioY;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this2.x = x1;
		_this2.y = y1;
		_this2.z = z;
		_this2.w = w;
		var _this3 = this.baseShader.filterMatrixA__;
		var x2 = 1;
		var y2 = 0;
		var z1 = 0;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this3.x = x2;
		_this3.y = y2;
		_this3.z = z1;
		_this3.w = 1.;
		var _this4 = this.baseShader.filterMatrixB__;
		var x3 = 0;
		var y3 = 1;
		var z2 = 0;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		_this4.x = x3;
		_this4.y = y3;
		_this4.z = z2;
		_this4.w = 1.;
		this.baseShaderList.next = null;
		this.initShaders(this.baseShaderList);
		this.engine.selectMaterial(this.pass);
		this.textures.begin();
	}
	,initShaders: function(shaders) {
		this.currentShaders = shaders;
		this.compiledShader = this.manager.compileShaders(shaders);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(this.compiledShader);
		} else {
			var _this = this.buffers;
			var s = this.compiledShader;
			_this.vertex.grow(s.vertex);
			_this.fragment.grow(s.fragment);
		}
		this.manager.fillGlobals(this.buffers,this.compiledShader);
		this.engine.selectShader(this.compiledShader);
		this.engine.uploadShaderBuffers(this.buffers,0);
	}
	,end: function() {
		this.texture = null;
		this.currentObj = null;
		this.baseShaderList.next = null;
		if(this.targetsStackIndex != 0) {
			throw new js__$Boot_HaxeError("Missing popTarget()");
		}
	}
	,pushFilter: function(spr) {
		if(this.filterStack.length == 0 && this.onEnterFilter != null) {
			if(!this.onEnterFilter(spr)) {
				return false;
			}
		}
		this.filterStack.push(spr);
		this.inFilter = spr;
		return true;
	}
	,popFilter: function() {
		var spr = this.filterStack.pop();
		if(this.filterStack.length > 0) {
			this.inFilter = this.filterStack[this.filterStack.length - 1];
		} else {
			this.inFilter = null;
			if(this.onLeaveFilter != null) {
				this.onLeaveFilter(spr);
			}
		}
	}
	,pushTarget: function(t,startX,startY,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		this.engine.pushTarget(t);
		this.initShaders(this.baseShaderList);
		if(width < 0) {
			width = t == null ? this.scene.width : t.width;
		}
		if(height < 0) {
			height = t == null ? this.scene.height : t.height;
		}
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / (t == null ? this.engine.width : t.width);
		var y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var _this1 = this.baseShader.viewport__;
		var x1 = -width * 0.5 - startX;
		var y1 = -height * 0.5 - startY;
		var z = 2 / width;
		var w = -2 * this.targetFlipY / height;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z;
		_this1.w = w;
		this.targetsStackIndex++;
		if(this.targetsStackIndex > this.targetsStack.length) {
			this.targetsStack.push({ t : t, x : startX, y : startY, w : width, h : height, hasRZ : this.hasRenderZone, rzX : this.renderX, rzY : this.renderY, rzW : this.renderW, rzH : this.renderH});
		} else {
			var o = this.targetsStack[this.targetsStackIndex - 1];
			o.t = t;
			o.x = startX;
			o.y = startY;
			o.w = width;
			o.h = height;
			o.hasRZ = this.hasRenderZone;
			o.rzX = this.renderX;
			o.rzY = this.renderY;
			o.rzW = this.renderW;
			o.rzH = this.renderH;
		}
		this.curX = startX;
		this.curY = startY;
		this.curWidth = width;
		this.curHeight = height;
		this.currentBlend = null;
		if(this.hasRenderZone) {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,popTarget: function(restore) {
		if(restore == null) {
			restore = true;
		}
		if(this.targetsStackIndex <= 0) {
			throw new js__$Boot_HaxeError("Too many popTarget()");
		}
		var pinf = this.targetsStack[--this.targetsStackIndex];
		this.engine.popTarget();
		if(restore) {
			var tinf = this.targetsStack[this.targetsStackIndex - 1];
			var t;
			var startX;
			var startY;
			var width;
			var height;
			var ratioX;
			var ratioY;
			var offsetX;
			var offsetY;
			if(tinf == null) {
				t = null;
				startX = 0;
				startY = 0;
				width = this.scene.width;
				height = this.scene.height;
				ratioX = this.scene.ratioX;
				ratioY = this.scene.ratioY;
				offsetX = this.scene.offsetX;
				offsetY = this.scene.offsetY;
			} else {
				t = tinf.t;
				startX = tinf.x;
				startY = tinf.y;
				width = tinf.w;
				height = tinf.h;
				ratioX = 1;
				ratioY = 1;
				offsetX = 0;
				offsetY = 0;
			}
			this.initShaders(this.baseShaderList);
			var _this = this.baseShader.halfPixelInverse__;
			var x = 0.5 / (t == null ? this.engine.width : t.width);
			var y = 0.5 / (t == null ? this.engine.height : t.height);
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = 0.;
			_this.w = 1.;
			var _this1 = this.baseShader.viewport__;
			var x1 = -width * 0.5 - startX - offsetX;
			var y1 = -height * 0.5 - startY - offsetY;
			var z = 2 / width * ratioX;
			var w = -2 * (t == null ? this.baseFlipY : this.targetFlipY) / height * ratioY;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z;
			_this1.w = w;
			this.curX = startX;
			this.curY = startY;
			this.curWidth = width;
			this.curHeight = height;
		}
		if(pinf.hasRZ) {
			this.setRenderZone(pinf.rzX,pinf.rzY,pinf.rzW,pinf.rzH);
		}
	}
	,setRenderZone: function(x,y,w,h) {
		this.hasRenderZone = true;
		this.renderX = x;
		this.renderY = y;
		this.renderW = w;
		this.renderH = h;
		var scaleX = this.engine.width * this.scene.ratioX / this.scene.width;
		var scaleY = this.engine.height * this.scene.ratioY / this.scene.height;
		if(this.inFilter != null) {
			var fa = this.baseShader.filterMatrixA__;
			var fb = this.baseShader.filterMatrixB__;
			var x2 = x + w;
			var y2 = y + h;
			var rx1 = x * fa.x + y * fa.y + fa.z;
			var ry1 = x * fb.x + y * fb.y + fb.z;
			var rx2 = x2 * fa.x + y2 * fa.y + fa.z;
			var ry2 = x2 * fb.x + y2 * fb.y + fb.z;
			x = rx1;
			y = ry1;
			w = rx2 - rx1;
			h = ry2 - ry1;
		}
		this.engine.setRenderZone((x - this.curX + this.scene.viewportX) * scaleX + 1e-10 | 0,(y - this.curY + this.scene.viewportY) * scaleY + 1e-10 | 0,w * scaleX + 1e-10 | 0,h * scaleY + 1e-10 | 0);
	}
	,drawScene: function() {
		this.scene.drawRec(this);
	}
	,beforeDraw: function() {
		if(this.texture == null) {
			this.texture = h3d_mat_Texture.fromColor(16711935);
		}
		this.baseShader.texture__ = this.texture;
		this.texture.set_filter((this.currentObj.smooth == null ? this.defaultSmooth : this.currentObj.smooth) ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		this.texture.set_wrap(this.currentObj.tileWrap && (this.currentObj.filter == null || this.inFilter != null) ? h3d_mat_Wrap.Repeat : h3d_mat_Wrap.Clamp);
		var blend = this.currentObj.blendMode;
		if(this.inFilter == this.currentObj && blend == h2d_BlendMode.Erase) {
			blend = h2d_BlendMode.Add;
		}
		if(this.inFilterBlend != null) {
			blend = this.inFilterBlend;
		}
		if(blend != this.currentBlend) {
			this.currentBlend = blend;
			this.pass.setBlendMode(blend);
			if(blend == h2d_BlendMode.Alpha || blend == h2d_BlendMode.Add) {
				this.pass.set_blendAlphaSrc(h3d_mat_Blend.One);
				if(this.inFilterBlend != null) {
					this.pass.set_blendSrc(h3d_mat_Blend.One);
				}
			}
		}
		this.manager.fillParams(this.buffers,this.compiledShader,this.currentShaders);
		this.engine.selectMaterial(this.pass);
		this.engine.uploadShaderBuffers(this.buffers,1);
		this.engine.uploadShaderBuffers(this.buffers,2);
		this.engine.uploadShaderBuffers(this.buffers,3);
	}
	,beginDrawObject: function(obj,texture) {
		if(!this.beginDraw(obj,texture,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this1 = this.baseShader.color__;
			var x1 = this.globalAlpha;
			var y1 = this.globalAlpha;
			var z1 = this.globalAlpha;
			var w1 = this.globalAlpha;
			if(w1 == null) {
				w1 = 1.;
			}
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z1;
			_this1.w = w1;
		} else {
			var _this2 = this.baseShader.color__;
			var x2 = obj.color.x;
			var y2 = obj.color.y;
			var z2 = obj.color.z;
			var w2 = obj.color.w * this.globalAlpha;
			if(w2 == null) {
				w2 = 1.;
			}
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			_this2.x = x2;
			_this2.y = y2;
			_this2.z = z2;
			_this2.w = w2;
		}
		var _this3 = this.baseShader.absoluteMatrixA__;
		var x3 = obj.matA;
		var y3 = obj.matC;
		var z3 = obj.absX;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		_this3.x = x3;
		_this3.y = y3;
		_this3.z = z3;
		_this3.w = 1.;
		var _this4 = this.baseShader.absoluteMatrixB__;
		var x4 = obj.matB;
		var y4 = obj.matD;
		var z4 = obj.absY;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		_this4.x = x4;
		_this4.y = y4;
		_this4.z = z4;
		_this4.w = 1.;
		this.beforeDraw();
		return true;
	}
	,drawTile: function(obj,tile) {
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(this.inFilter != null) {
			var f1 = this.baseShader.filterMatrixA__;
			var f2 = this.baseShader.filterMatrixB__;
			matA = obj.matA * f1.x + obj.matB * f1.y;
			matB = obj.matA * f2.x + obj.matB * f2.y;
			matC = obj.matC * f1.x + obj.matD * f1.y;
			matD = obj.matC * f2.x + obj.matD * f2.y;
			absX = obj.absX * f1.x + obj.absY * f1.y + f1.z;
			absY = obj.absX * f2.x + obj.absY * f2.y + f2.z;
		} else {
			matA = obj.matA;
			matB = obj.matB;
			matC = obj.matC;
			matD = obj.matD;
			absX = obj.absX;
			absY = obj.absY;
		}
		if(matB == 0 && matC == 0) {
			var tx = tile.dx + tile.width * 0.5;
			var ty = tile.dy + tile.height * 0.5;
			var f = obj.matA;
			var a = f < 0 ? -f : f;
			var f3 = obj.matD;
			var b = f3 < 0 ? -f3 : f3;
			var tr = (tile.width > tile.height ? tile.width : tile.height) * 1.5 * (a < b ? b : a);
			var cx = absX + tx * matA - this.curX;
			var cy = absY + ty * matD - this.curY;
			if(cx < -tr || cy < -tr || cx - tr > this.curWidth || cy - tr > this.curHeight) {
				return false;
			}
		} else {
			var xMin = 1e20;
			var yMin = 1e20;
			var xMax = -1e20;
			var yMax = -1e20;
			var hw = tile.width * 0.5;
			var hh = tile.height * 0.5;
			var px = tile.dx * matA + tile.dy * matC;
			var py = tile.dx * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var px1 = (x + tile.dx) * matA + tile.dy * matC;
			var py1 = (x + tile.dx) * matB + tile.dy * matD;
			if(px1 < xMin) {
				xMin = px1;
			}
			if(px1 > xMax) {
				xMax = px1;
			}
			if(py1 < yMin) {
				yMin = py1;
			}
			if(py1 > yMax) {
				yMax = py1;
			}
			var y = tile.height;
			var px2 = tile.dx * matA + (y + tile.dy) * matC;
			var py2 = tile.dx * matB + (y + tile.dy) * matD;
			if(px2 < xMin) {
				xMin = px2;
			}
			if(px2 > xMax) {
				xMax = px2;
			}
			if(py2 < yMin) {
				yMin = py2;
			}
			if(py2 > yMax) {
				yMax = py2;
			}
			var x1 = tile.width;
			var y1 = tile.height;
			var px3 = (x1 + tile.dx) * matA + (y1 + tile.dy) * matC;
			var py3 = (x1 + tile.dx) * matB + (y1 + tile.dy) * matD;
			if(px3 < xMin) {
				xMin = px3;
			}
			if(px3 > xMax) {
				xMax = px3;
			}
			if(py3 < yMin) {
				yMin = py3;
			}
			if(py3 > yMax) {
				yMax = py3;
			}
			var cx1 = absX - this.curX;
			var cy1 = absY - this.curY;
			if(cx1 + xMax < 0 || cy1 + yMax < 0 || cx1 + xMin > this.curWidth || cy1 + yMin > this.curHeight) {
				return false;
			}
		}
		if(!this.beginDraw(obj,tile.innerTex,true,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			var x2 = obj.color.x;
			var y2 = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			_this.x = x2;
			_this.y = y2;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this1 = this.baseShader.color__;
			var x3 = this.globalAlpha;
			var y3 = this.globalAlpha;
			var z1 = this.globalAlpha;
			var w1 = this.globalAlpha;
			if(w1 == null) {
				w1 = 1.;
			}
			if(z1 == null) {
				z1 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			_this1.x = x3;
			_this1.y = y3;
			_this1.z = z1;
			_this1.w = w1;
		} else {
			var _this2 = this.baseShader.color__;
			var x4 = obj.color.x;
			var y4 = obj.color.y;
			var z2 = obj.color.z;
			var w2 = obj.color.w * this.globalAlpha;
			if(w2 == null) {
				w2 = 1.;
			}
			if(z2 == null) {
				z2 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			_this2.x = x4;
			_this2.y = y4;
			_this2.z = z2;
			_this2.w = w2;
		}
		var _this3 = this.baseShader.absoluteMatrixA__;
		var x5 = tile.width * obj.matA;
		var y5 = tile.height * obj.matC;
		var z3 = obj.absX + tile.dx * obj.matA + tile.dy * obj.matC;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		_this3.x = x5;
		_this3.y = y5;
		_this3.z = z3;
		_this3.w = 1.;
		var _this4 = this.baseShader.absoluteMatrixB__;
		var x6 = tile.width * obj.matB;
		var y6 = tile.height * obj.matD;
		var z4 = obj.absY + tile.dx * obj.matB + tile.dy * obj.matD;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y6 == null) {
			y6 = 0.;
		}
		if(x6 == null) {
			x6 = 0.;
		}
		_this4.x = x6;
		_this4.y = y6;
		_this4.z = z4;
		_this4.w = 1.;
		var _this5 = this.baseShader.uvPos__;
		var x7 = tile.u;
		var y7 = tile.v;
		var z5 = tile.u2 - tile.u;
		var w3 = tile.v2 - tile.v;
		if(w3 == null) {
			w3 = 1.;
		}
		if(z5 == null) {
			z5 = 0.;
		}
		if(y7 == null) {
			y7 = 0.;
		}
		if(x7 == null) {
			x7 = 0.;
		}
		_this5.x = x7;
		_this5.y = y7;
		_this5.z = z5;
		_this5.w = w3;
		this.beforeDraw();
		if(this.fixedBuffer == null || this.fixedBuffer.isDisposed()) {
			this.fixedBuffer = new h3d_Buffer(4,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
			var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
			var k = this1;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v1 = 0;
			if(k.pos == k.array.length) {
				var newSize1 = k.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(k.array);
				k.array = newArray1;
			}
			k.array[k.pos++] = v1;
			var v2 = 0;
			if(k.pos == k.array.length) {
				var newSize2 = k.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(k.array);
				k.array = newArray2;
			}
			k.array[k.pos++] = v2;
			var v3 = 0;
			if(k.pos == k.array.length) {
				var newSize3 = k.array.length << 1;
				if(newSize3 < 128) {
					newSize3 = 128;
				}
				var newArray3 = new Float32Array(newSize3);
				newArray3.set(k.array);
				k.array = newArray3;
			}
			k.array[k.pos++] = v3;
			var v4 = 1;
			if(k.pos == k.array.length) {
				var newSize4 = k.array.length << 1;
				if(newSize4 < 128) {
					newSize4 = 128;
				}
				var newArray4 = new Float32Array(newSize4);
				newArray4.set(k.array);
				k.array = newArray4;
			}
			k.array[k.pos++] = v4;
			var v5 = 1;
			if(k.pos == k.array.length) {
				var newSize5 = k.array.length << 1;
				if(newSize5 < 128) {
					newSize5 = 128;
				}
				var newArray5 = new Float32Array(newSize5);
				newArray5.set(k.array);
				k.array = newArray5;
			}
			k.array[k.pos++] = v5;
			var v6 = 1;
			if(k.pos == k.array.length) {
				var newSize6 = k.array.length << 1;
				if(newSize6 < 128) {
					newSize6 = 128;
				}
				var newArray6 = new Float32Array(newSize6);
				newArray6.set(k.array);
				k.array = newArray6;
			}
			k.array[k.pos++] = v6;
			var v7 = 1;
			if(k.pos == k.array.length) {
				var newSize7 = k.array.length << 1;
				if(newSize7 < 128) {
					newSize7 = 128;
				}
				var newArray7 = new Float32Array(newSize7);
				newArray7.set(k.array);
				k.array = newArray7;
			}
			k.array[k.pos++] = v7;
			var v8 = 0;
			if(k.pos == k.array.length) {
				var newSize8 = k.array.length << 1;
				if(newSize8 < 128) {
					newSize8 = 128;
				}
				var newArray8 = new Float32Array(newSize8);
				newArray8.set(k.array);
				k.array = newArray8;
			}
			k.array[k.pos++] = v8;
			var v9 = 1;
			if(k.pos == k.array.length) {
				var newSize9 = k.array.length << 1;
				if(newSize9 < 128) {
					newSize9 = 128;
				}
				var newArray9 = new Float32Array(newSize9);
				newArray9.set(k.array);
				k.array = newArray9;
			}
			k.array[k.pos++] = v9;
			var v10 = 0;
			if(k.pos == k.array.length) {
				var newSize10 = k.array.length << 1;
				if(newSize10 < 128) {
					newSize10 = 128;
				}
				var newArray10 = new Float32Array(newSize10);
				newArray10.set(k.array);
				k.array = newArray10;
			}
			k.array[k.pos++] = v10;
			var v11 = 1;
			if(k.pos == k.array.length) {
				var newSize11 = k.array.length << 1;
				if(newSize11 < 128) {
					newSize11 = 128;
				}
				var newArray11 = new Float32Array(newSize11);
				newArray11.set(k.array);
				k.array = newArray11;
			}
			k.array[k.pos++] = v11;
			var v12 = 1;
			if(k.pos == k.array.length) {
				var newSize12 = k.array.length << 1;
				if(newSize12 < 128) {
					newSize12 = 128;
				}
				var newArray12 = new Float32Array(newSize12);
				newArray12.set(k.array);
				k.array = newArray12;
			}
			k.array[k.pos++] = v12;
			var v13 = 1;
			if(k.pos == k.array.length) {
				var newSize13 = k.array.length << 1;
				if(newSize13 < 128) {
					newSize13 = 128;
				}
				var newArray13 = new Float32Array(newSize13);
				newArray13.set(k.array);
				k.array = newArray13;
			}
			k.array[k.pos++] = v13;
			var v14 = 1;
			if(k.pos == k.array.length) {
				var newSize14 = k.array.length << 1;
				if(newSize14 < 128) {
					newSize14 = 128;
				}
				var newArray14 = new Float32Array(newSize14);
				newArray14.set(k.array);
				k.array = newArray14;
			}
			k.array[k.pos++] = v14;
			var v15 = 1;
			if(k.pos == k.array.length) {
				var newSize15 = k.array.length << 1;
				if(newSize15 < 128) {
					newSize15 = 128;
				}
				var newArray15 = new Float32Array(newSize15);
				newArray15.set(k.array);
				k.array = newArray15;
			}
			k.array[k.pos++] = v15;
			var v16 = 1;
			if(k.pos == k.array.length) {
				var newSize16 = k.array.length << 1;
				if(newSize16 < 128) {
					newSize16 = 128;
				}
				var newArray16 = new Float32Array(newSize16);
				newArray16.set(k.array);
				k.array = newArray16;
			}
			k.array[k.pos++] = v16;
			var v17 = 0;
			if(k.pos == k.array.length) {
				var newSize17 = k.array.length << 1;
				if(newSize17 < 128) {
					newSize17 = 128;
				}
				var newArray17 = new Float32Array(newSize17);
				newArray17.set(k.array);
				k.array = newArray17;
			}
			k.array[k.pos++] = v17;
			var v18 = 1;
			if(k.pos == k.array.length) {
				var newSize18 = k.array.length << 1;
				if(newSize18 < 128) {
					newSize18 = 128;
				}
				var newArray18 = new Float32Array(newSize18);
				newArray18.set(k.array);
				k.array = newArray18;
			}
			k.array[k.pos++] = v18;
			var v19 = 0;
			if(k.pos == k.array.length) {
				var newSize19 = k.array.length << 1;
				if(newSize19 < 128) {
					newSize19 = 128;
				}
				var newArray19 = new Float32Array(newSize19);
				newArray19.set(k.array);
				k.array = newArray19;
			}
			k.array[k.pos++] = v19;
			var v20 = 1;
			if(k.pos == k.array.length) {
				var newSize20 = k.array.length << 1;
				if(newSize20 < 128) {
					newSize20 = 128;
				}
				var newArray20 = new Float32Array(newSize20);
				newArray20.set(k.array);
				k.array = newArray20;
			}
			k.array[k.pos++] = v20;
			var v21 = 1;
			if(k.pos == k.array.length) {
				var newSize21 = k.array.length << 1;
				if(newSize21 < 128) {
					newSize21 = 128;
				}
				var newArray21 = new Float32Array(newSize21);
				newArray21.set(k.array);
				k.array = newArray21;
			}
			k.array[k.pos++] = v21;
			var v22 = 1;
			if(k.pos == k.array.length) {
				var newSize22 = k.array.length << 1;
				if(newSize22 < 128) {
					newSize22 = 128;
				}
				var newArray22 = new Float32Array(newSize22);
				newArray22.set(k.array);
				k.array = newArray22;
			}
			k.array[k.pos++] = v22;
			var v23 = 1;
			if(k.pos == k.array.length) {
				var newSize23 = k.array.length << 1;
				if(newSize23 < 128) {
					newSize23 = 128;
				}
				var newArray23 = new Float32Array(newSize23);
				newArray23.set(k.array);
				k.array = newArray23;
			}
			k.array[k.pos++] = v23;
			var v24 = 1;
			if(k.pos == k.array.length) {
				var newSize24 = k.array.length << 1;
				if(newSize24 < 128) {
					newSize24 = 128;
				}
				var newArray24 = new Float32Array(newSize24);
				newArray24.set(k.array);
				k.array = newArray24;
			}
			k.array[k.pos++] = v24;
			var v25 = 1;
			if(k.pos == k.array.length) {
				var newSize25 = k.array.length << 1;
				if(newSize25 < 128) {
					newSize25 = 128;
				}
				var newArray25 = new Float32Array(newSize25);
				newArray25.set(k.array);
				k.array = newArray25;
			}
			k.array[k.pos++] = v25;
			var v26 = 1;
			if(k.pos == k.array.length) {
				var newSize26 = k.array.length << 1;
				if(newSize26 < 128) {
					newSize26 = 128;
				}
				var newArray26 = new Float32Array(newSize26);
				newArray26.set(k.array);
				k.array = newArray26;
			}
			k.array[k.pos++] = v26;
			var v27 = 1;
			if(k.pos == k.array.length) {
				var newSize27 = k.array.length << 1;
				if(newSize27 < 128) {
					newSize27 = 128;
				}
				var newArray27 = new Float32Array(newSize27);
				newArray27.set(k.array);
				k.array = newArray27;
			}
			k.array[k.pos++] = v27;
			var v28 = 1;
			if(k.pos == k.array.length) {
				var newSize28 = k.array.length << 1;
				if(newSize28 < 128) {
					newSize28 = 128;
				}
				var newArray28 = new Float32Array(newSize28);
				newArray28.set(k.array);
				k.array = newArray28;
			}
			k.array[k.pos++] = v28;
			var v29 = 1;
			if(k.pos == k.array.length) {
				var newSize29 = k.array.length << 1;
				if(newSize29 < 128) {
					newSize29 = 128;
				}
				var newArray29 = new Float32Array(newSize29);
				newArray29.set(k.array);
				k.array = newArray29;
			}
			k.array[k.pos++] = v29;
			var v30 = 1;
			if(k.pos == k.array.length) {
				var newSize30 = k.array.length << 1;
				if(newSize30 < 128) {
					newSize30 = 128;
				}
				var newArray30 = new Float32Array(newSize30);
				newArray30.set(k.array);
				k.array = newArray30;
			}
			k.array[k.pos++] = v30;
			var v31 = 1;
			if(k.pos == k.array.length) {
				var newSize31 = k.array.length << 1;
				if(newSize31 < 128) {
					newSize31 = 128;
				}
				var newArray31 = new Float32Array(newSize31);
				newArray31.set(k.array);
				k.array = newArray31;
			}
			k.array[k.pos++] = v31;
			this.fixedBuffer.uploadVector(k,0,4);
		}
		var _this6 = this.engine;
		_this6.renderBuffer(this.fixedBuffer,_this6.mem.quadIndexes,2,0,-1);
		return true;
	}
	,beginDraw: function(obj,texture,isRelative,hasUVPos) {
		if(hasUVPos == null) {
			hasUVPos = false;
		}
		if(this.onBeginDraw != null && !this.onBeginDraw(obj)) {
			return false;
		}
		var stride = 8;
		var shaderChanged = false;
		var paramsChanged = false;
		var objShaders = obj.shaders;
		var curShaders = this.currentShaders.next;
		while(objShaders != null && curShaders != null) {
			var s = objShaders.s;
			var t = curShaders.s;
			objShaders = objShaders.next;
			curShaders = curShaders.next;
			var prevInst = t.instance;
			if(s != t) {
				paramsChanged = true;
			}
			s.updateConstants(this.manager.globals);
			if(s.instance != prevInst) {
				shaderChanged = true;
			}
		}
		if(objShaders != null || curShaders != null || this.baseShader.isRelative__ != isRelative || this.baseShader.hasUVPos__ != hasUVPos || this.baseShader.killAlpha__ != this.killAlpha) {
			shaderChanged = true;
		}
		if(shaderChanged) {
			var _this = this.baseShader;
			_this.constModified = true;
			_this.hasUVPos__ = hasUVPos;
			var _this1 = this.baseShader;
			_this1.constModified = true;
			_this1.isRelative__ = isRelative;
			var _this2 = this.baseShader;
			_this2.constModified = true;
			_this2.killAlpha__ = this.killAlpha;
			this.baseShader.updateConstants(this.manager.globals);
			this.baseShaderList.next = obj.shaders;
			this.initShaders(this.baseShaderList);
		} else if(paramsChanged) {
			if(this.currentShaders != this.baseShaderList) {
				throw new js__$Boot_HaxeError("!");
			}
			this.currentShaders.next = obj.shaders;
		}
		this.texture = texture;
		this.stride = stride;
		this.currentObj = obj;
		return true;
	}
	,__class__: h2d_RenderContext
});
var h2d_ScaleModeAlign = $hxEnums["h2d.ScaleModeAlign"] = { __ename__ : true, __constructs__ : ["Left","Right","Center","Top","Bottom"]
	,Left: {_hx_index:0,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Right: {_hx_index:1,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Center: {_hx_index:2,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Top: {_hx_index:3,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Bottom: {_hx_index:4,__enum__:"h2d.ScaleModeAlign",toString:$estr}
};
h2d_ScaleModeAlign.__empty_constructs__ = [h2d_ScaleModeAlign.Left,h2d_ScaleModeAlign.Right,h2d_ScaleModeAlign.Center,h2d_ScaleModeAlign.Top,h2d_ScaleModeAlign.Bottom];
var h2d_ScaleMode = $hxEnums["h2d.ScaleMode"] = { __ename__ : true, __constructs__ : ["Resize","Stretch","LetterBox","Fixed","Zoom","AutoZoom"]
	,Resize: {_hx_index:0,__enum__:"h2d.ScaleMode",toString:$estr}
	,Stretch: ($_=function(width,height) { return {_hx_index:1,width:width,height:height,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height"],$_)
	,LetterBox: ($_=function(width,height,integerScale,horizontalAlign,verticalAlign) { return {_hx_index:2,width:width,height:height,integerScale:integerScale,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height","integerScale","horizontalAlign","verticalAlign"],$_)
	,Fixed: ($_=function(width,height,zoom,horizontalAlign,verticalAlign) { return {_hx_index:3,width:width,height:height,zoom:zoom,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height","zoom","horizontalAlign","verticalAlign"],$_)
	,Zoom: ($_=function(level) { return {_hx_index:4,level:level,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["level"],$_)
	,AutoZoom: ($_=function(minWidth,minHeight,integerScaling) { return {_hx_index:5,minWidth:minWidth,minHeight:minHeight,integerScaling:integerScaling,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["minWidth","minHeight","integerScaling"],$_)
};
h2d_ScaleMode.__empty_constructs__ = [h2d_ScaleMode.Resize];
var hxd_InteractiveScene = function() { };
$hxClasses["hxd.InteractiveScene"] = hxd_InteractiveScene;
hxd_InteractiveScene.__name__ = "hxd.InteractiveScene";
hxd_InteractiveScene.__isInterface__ = true;
hxd_InteractiveScene.prototype = {
	__class__: hxd_InteractiveScene
};
var h3d_IDrawable = function() { };
$hxClasses["h3d.IDrawable"] = h3d_IDrawable;
h3d_IDrawable.__name__ = "h3d.IDrawable";
h3d_IDrawable.__isInterface__ = true;
var h2d_Scene = function() {
	this.scaleMode = h2d_ScaleMode.Resize;
	h2d_Layers.call(this,null);
	var e = h3d_Engine.CURRENT;
	this.ctx = new h2d_RenderContext(this);
	this.width = e.width;
	this.height = e.height;
	this.offsetX = 0;
	this.offsetY = 0;
	this.ratioX = 1;
	this.ratioY = 1;
	this.viewportX = 0;
	this.viewportY = 0;
	this.interactive = [];
	this.eventListeners = [];
	this.shapePoint = new h2d_col_Point();
	this.window = hxd_Window.getInstance();
	this.posChanged = true;
};
$hxClasses["h2d.Scene"] = h2d_Scene;
h2d_Scene.__name__ = "h2d.Scene";
h2d_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h2d_Scene.__super__ = h2d_Layers;
h2d_Scene.prototype = $extend(h2d_Layers.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,set_scaleMode: function(v) {
		this.scaleMode = v;
		this.checkResize();
		return v;
	}
	,checkResize: function() {
		var _gthis = this;
		var engine = h3d_Engine.CURRENT;
		var _g = this.scaleMode;
		switch(_g._hx_index) {
		case 0:
			var w = engine.width;
			var h = engine.height;
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			this.ratioX = 1;
			this.ratioY = 1;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		case 1:
			var _height = _g.height;
			var _width = _g.width;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			this.ratioX = 1;
			this.ratioY = 1;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		case 2:
			var verticalAlign = _g.verticalAlign;
			var horizontalAlign = _g.horizontalAlign;
			var integerScale = _g.integerScale;
			var _height1 = _g.height;
			var _width1 = _g.width;
			if(_width1 != _gthis.width || _height1 != _gthis.height) {
				_gthis.width = _width1;
				_gthis.height = _height1;
				_gthis.posChanged = true;
			}
			var a = engine.width / _width1;
			var b = engine.height / _height1;
			var zoom = a > b ? b : a;
			if(integerScale) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			_gthis.ratioX = _gthis.width * zoom / engine.width;
			_gthis.ratioY = _gthis.height * zoom / engine.height;
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.offsetX = (engine.width - _gthis.width * zoom) / (2 * zoom);
				_gthis.viewportX = 0;
				break;
			case 1:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom) / (2 * zoom));
				_gthis.viewportX = (engine.width - _gthis.width * zoom) / zoom;
				break;
			default:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom) / 2 % 1.) * .5;
				_gthis.viewportX = (engine.width - _gthis.width * zoom) / (2 * zoom);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.offsetY = (engine.height - _gthis.height * zoom) / (2 * zoom);
				_gthis.viewportY = 0;
				break;
			case 4:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom) / (2 * zoom));
				_gthis.viewportY = (engine.height - _gthis.height * zoom) / zoom;
				break;
			default:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom) / 2 % 1.) * .5;
				_gthis.viewportY = (engine.height - _gthis.height * zoom) / (2 * zoom);
			}
			break;
		case 3:
			var verticalAlign1 = _g.verticalAlign;
			var horizontalAlign1 = _g.horizontalAlign;
			var zoom1 = _g.zoom;
			var _height2 = _g.height;
			var _width2 = _g.width;
			if(_width2 != _gthis.width || _height2 != _gthis.height) {
				_gthis.width = _width2;
				_gthis.height = _height2;
				_gthis.posChanged = true;
			}
			_gthis.ratioX = _gthis.width * zoom1 / engine.width;
			_gthis.ratioY = _gthis.height * zoom1 / engine.height;
			var horizontal1 = horizontalAlign1;
			var vertical1 = verticalAlign1;
			if(horizontal1 == null) {
				horizontal1 = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal1._hx_index) {
			case 0:
				_gthis.offsetX = (engine.width - _gthis.width * zoom1) / (2 * zoom1);
				_gthis.viewportX = 0;
				break;
			case 1:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom1) / (2 * zoom1));
				_gthis.viewportX = (engine.width - _gthis.width * zoom1) / zoom1;
				break;
			default:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom1) / 2 % 1.) * .5;
				_gthis.viewportX = (engine.width - _gthis.width * zoom1) / (2 * zoom1);
			}
			if(vertical1 == null) {
				vertical1 = h2d_ScaleModeAlign.Center;
			}
			switch(vertical1._hx_index) {
			case 3:
				_gthis.offsetY = (engine.height - _gthis.height * zoom1) / (2 * zoom1);
				_gthis.viewportY = 0;
				break;
			case 4:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom1) / (2 * zoom1));
				_gthis.viewportY = (engine.height - _gthis.height * zoom1) / zoom1;
				break;
			default:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom1) / 2 % 1.) * .5;
				_gthis.viewportY = (engine.height - _gthis.height * zoom1) / (2 * zoom1);
			}
			break;
		case 4:
			var level = _g.level;
			var w1 = Math.ceil(engine.width / level);
			var h1 = Math.ceil(engine.height / level);
			if(w1 != _gthis.width || h1 != _gthis.height) {
				_gthis.width = w1;
				_gthis.height = h1;
				_gthis.posChanged = true;
			}
			_gthis.ratioX = _gthis.width * level / engine.width;
			_gthis.ratioY = _gthis.height * level / engine.height;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		case 5:
			var integerScaling = _g.integerScaling;
			var minHeight = _g.minHeight;
			var minWidth = _g.minWidth;
			var a1 = engine.width / minWidth;
			var b1 = engine.height / minHeight;
			var zoom2 = a1 > b1 ? b1 : a1;
			if(integerScaling) {
				zoom2 = zoom2 | 0;
				if(zoom2 == 0) {
					zoom2 = 1;
				}
			}
			var w2 = Math.ceil(engine.width / zoom2);
			var h2 = Math.ceil(engine.height / zoom2);
			if(w2 != _gthis.width || h2 != _gthis.height) {
				_gthis.width = w2;
				_gthis.height = h2;
				_gthis.posChanged = true;
			}
			_gthis.ratioX = _gthis.width * zoom2 / engine.width;
			_gthis.ratioY = _gthis.height * zoom2 / engine.height;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		}
	}
	,dispatchListeners: function(event) {
		this.screenToViewport(event);
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,isInteractiveVisible: function(i) {
		var s = i;
		while(s != this) {
			if(s == null || !s.visible) {
				return false;
			}
			s = s.parent;
		}
		return true;
	}
	,screenToViewport: function(e) {
		e.relX = e.relX * this.width / (this.window.get_width() * this.ratioX) - this.viewportX;
		e.relY = e.relY * this.height / (this.window.get_height() * this.ratioY) - this.viewportY;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		this.screenToViewport(event);
		var dx = event.relX - i.absX;
		var dy = event.relY - i.absY;
		var rx = (dx * i.matD - dy * i.matC) * i.invDet;
		var ry = (dy * i.matA - dx * i.matB) * i.invDet;
		event.relX = rx;
		event.relY = ry;
		i.handleEvent(event);
	}
	,handleEvent: function(event,last) {
		this.screenToViewport(event);
		var ex = event.relX;
		var ey = event.relY;
		var index = last == null ? 0 : this.interactive.indexOf(last) + 1;
		var pt = this.shapePoint;
		var _g = index;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var idx = _g++;
			var i = this.interactive[idx];
			if(i == null) {
				break;
			}
			if(i.invDet == 0) {
				continue;
			}
			var dx = ex - i.absX;
			var dy = ey - i.absY;
			var rx = (dx * i.matD - dy * i.matC) * i.invDet;
			var ry = (dy * i.matA - dx * i.matB) * i.invDet;
			if(i.shape != null) {
				pt.x = rx + i.shapeX;
				pt.y = ry + i.shapeY;
				if(!i.shape.contains(pt)) {
					continue;
				}
			} else if(ry < 0 || rx < 0 || rx >= i.width || ry >= i.height) {
				continue;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			event.relX = rx;
			event.relY = ry;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			return i;
		}
		return null;
	}
	,addEventTarget: function(i) {
		var i1 = i;
		var lv = 0;
		while(i1 != null) {
			i1 = i1.parent;
			++lv;
		}
		var level = lv;
		var _g = 0;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var index = _g++;
			var i11 = i;
			var i2 = this.interactive[index];
			var lv1 = level;
			var i3 = i2;
			var lv2 = 0;
			while(i3 != null) {
				i3 = i3.parent;
				++lv2;
			}
			var lv21 = lv2;
			var p1 = i11;
			var p2 = i2;
			while(lv1 > lv21) {
				i11 = p1;
				p1 = p1.parent;
				--lv1;
			}
			while(lv21 > lv1) {
				i2 = p2;
				p2 = p2.parent;
				--lv21;
			}
			while(p1 != p2) {
				i11 = p1;
				p1 = p1.parent;
				i2 = p2;
				p2 = p2.parent;
			}
			var id = -1;
			var _g2 = 0;
			var _g11 = p1.children.length;
			while(_g2 < _g11) {
				var k = _g2++;
				if(p1.children[k] == i11) {
					id = k;
					break;
				}
			}
			var tmp = id;
			var id1 = -1;
			var _g3 = 0;
			var _g12 = p2.children.length;
			while(_g3 < _g12) {
				var k1 = _g3++;
				if(p2.children[k1] == i2) {
					id1 = k1;
					break;
				}
			}
			if(tmp > id1) {
				this.interactive.splice(index,0,i);
				return;
			}
		}
		this.interactive.push(i);
	}
	,removeEventTarget: function(i,notify) {
		if(notify == null) {
			notify = false;
		}
		HxOverrides.remove(this.interactive,i);
		if(notify && this.events != null) {
			this.events.onRemove(i);
		}
	}
	,setElapsedTime: function(v) {
		this.ctx.elapsedTime = v;
	}
	,render: function(engine) {
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
		if(this.children.length == 0) {
			return;
		}
		this.ctx.begin();
		this.ctx.drawScene();
		this.ctx.end();
	}
	,sync: function(ctx) {
		if(!this.allocated) {
			this.onAdd();
		}
		h2d_Layers.prototype.sync.call(this,ctx);
	}
	,onAdd: function() {
		this.checkResize();
		h2d_Layers.prototype.onAdd.call(this);
		this.window.addResizeEvent($bind(this,this.checkResize));
	}
	,onRemove: function() {
		h2d_Layers.prototype.onRemove.call(this);
		this.window.removeResizeEvent($bind(this,this.checkResize));
	}
	,__class__: h2d_Scene
});
var h2d_Align = $hxEnums["h2d.Align"] = { __ename__ : true, __constructs__ : ["Left","Right","Center","MultilineRight","MultilineCenter"]
	,Left: {_hx_index:0,__enum__:"h2d.Align",toString:$estr}
	,Right: {_hx_index:1,__enum__:"h2d.Align",toString:$estr}
	,Center: {_hx_index:2,__enum__:"h2d.Align",toString:$estr}
	,MultilineRight: {_hx_index:3,__enum__:"h2d.Align",toString:$estr}
	,MultilineCenter: {_hx_index:4,__enum__:"h2d.Align",toString:$estr}
};
h2d_Align.__empty_constructs__ = [h2d_Align.Left,h2d_Align.Right,h2d_Align.Center,h2d_Align.MultilineRight,h2d_Align.MultilineCenter];
var h2d_Text = function(font,parent) {
	this.realMaxWidth = -1;
	h2d_Drawable.call(this,parent);
	this.set_font(font);
	this.set_textAlign(h2d_Align.Left);
	this.set_letterSpacing(1);
	this.set_lineSpacing(0);
	this.set_text("");
	this.currentText = "";
	this.set_textColor(16777215);
};
$hxClasses["h2d.Text"] = h2d_Text;
h2d_Text.__name__ = "h2d.Text";
h2d_Text.__super__ = h2d_Drawable;
h2d_Text.prototype = $extend(h2d_Drawable.prototype,{
	set_font: function(font) {
		if(this.font == font) {
			return font;
		}
		this.font = font;
		if(font != null) {
			var _g = font.type;
			switch(_g._hx_index) {
			case 0:
				if(this.sdfShader != null) {
					this.removeShader(this.sdfShader);
					this.sdfShader = null;
				}
				break;
			case 1:
				var smoothing = _g.smoothing;
				var alphaCutoff = _g.alphaCutoff;
				var channel = _g.channel;
				if(this.sdfShader == null) {
					this.sdfShader = new h3d_shader_SignedDistanceField();
					this.addShader(this.sdfShader);
				}
				this.sdfShader.alphaCutoff__ = alphaCutoff;
				this.sdfShader.smoothing__ = smoothing;
				var _this = this.sdfShader;
				_this.constModified = true;
				_this.channel__ = channel;
				break;
			}
		}
		if(this.glyphs != null) {
			var _this1 = this.glyphs;
			if(_this1 != null && _this1.parent != null) {
				_this1.parent.removeChild(_this1);
			}
		}
		this.glyphs = new h2d_TileGroup(font == null ? null : font.tile,this);
		this.glyphs.set_visible(false);
		this.rebuild();
		return font;
	}
	,set_textAlign: function(a) {
		if(this.textAlign == a) {
			return a;
		}
		this.textAlign = a;
		this.rebuild();
		return a;
	}
	,set_letterSpacing: function(s) {
		if(this.letterSpacing == s) {
			return s;
		}
		this.letterSpacing = s;
		this.rebuild();
		return s;
	}
	,set_lineSpacing: function(s) {
		if(this.lineSpacing == s) {
			return s;
		}
		this.lineSpacing = s;
		this.rebuild();
		return s;
	}
	,onAdd: function() {
		h2d_Drawable.prototype.onAdd.call(this);
		this.rebuild();
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
	}
	,draw: function(ctx) {
		if(this.glyphs == null) {
			this.emitTile(ctx,h2d_Tile.fromColor(16711935,16,16));
			return;
		}
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			var oldR = this.color.x;
			var oldG = this.color.y;
			var oldB = this.color.z;
			var oldA = this.color.w;
			var _this = this.color;
			var c = this.dropShadow.color;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
			this.color.w = this.dropShadow.alpha * oldA;
			this.glyphs.drawWith(ctx,this);
			this.absX = oldX;
			this.absY = oldY;
			var _this1 = this.color;
			var x = oldR;
			var y = oldG;
			var z = oldB;
			var w = oldA;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this1.x = x;
			_this1.y = y;
			_this1.z = z;
			_this1.w = w;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,set_text: function(t) {
		var t1 = t == null ? "null" : t;
		if(t1 == this.text) {
			return t1;
		}
		this.text = t1;
		this.textChanged = true;
		this.validateText();
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t1;
	}
	,validateText: function() {
	}
	,rebuild: function() {
		this.calcDone = false;
		this.needsRebuild = true;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,splitRawText: function(text,leftMargin,afterData,font,sizes,prevChar) {
		if(prevChar == null) {
			prevChar = -1;
		}
		if(afterData == null) {
			afterData = 0.;
		}
		if(leftMargin == null) {
			leftMargin = 0.;
		}
		var maxWidth = this.realMaxWidth;
		if(maxWidth < 0) {
			if(sizes == null) {
				return text;
			} else {
				maxWidth = Infinity;
			}
		}
		if(font == null) {
			font = this.font;
		}
		var lines = [];
		var restPos = 0;
		var x = leftMargin;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var cc = HxOverrides.cca(text,i);
			var c = font.glyphs.h[cc];
			if(c == null) {
				c = font.charset.resolveChar(cc,font.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
				}
			}
			var e = c;
			var newline = cc == 10;
			var esize = e.width + e.getKerningOffset(prevChar);
			if(font.charset.isBreakChar(cc)) {
				if(lines.length == 0 && leftMargin > 0 && x > maxWidth) {
					lines.push("");
					if(sizes != null) {
						sizes.push(leftMargin);
					}
					x -= leftMargin;
				}
				var size = x + esize + this.letterSpacing;
				var k = i + 1;
				var max = text.length;
				var prevChar1 = prevChar;
				var breakFound = false;
				while(size <= maxWidth && k < max) {
					var cc1 = HxOverrides.cca(text,k++);
					if(font.charset.isSpace(cc1) || cc1 == 10) {
						breakFound = true;
						break;
					}
					var c1 = font.glyphs.h[cc1];
					if(c1 == null) {
						c1 = font.charset.resolveChar(cc1,font.glyphs);
						if(c1 == null) {
							c1 = cc1 == 13 || cc1 == 10 ? font.nullChar : font.defaultChar;
						}
					}
					var e1 = c1;
					size += e1.width + this.letterSpacing + e1.getKerningOffset(prevChar1);
					prevChar1 = cc1;
					if(font.charset.isBreakChar(cc1)) {
						break;
					}
				}
				if(size > maxWidth || !breakFound && size + afterData > maxWidth) {
					newline = true;
					if(font.charset.isSpace(cc)) {
						lines.push(HxOverrides.substr(text,restPos,i - restPos));
						e = null;
					} else {
						lines.push(HxOverrides.substr(text,restPos,i + 1 - restPos));
					}
					restPos = i + 1;
				}
			}
			if(e != null && cc != 10) {
				x += esize + this.letterSpacing;
			}
			if(newline) {
				if(sizes != null) {
					sizes.push(x);
				}
				x = 0;
				prevChar = -1;
			} else {
				prevChar = cc;
			}
		}
		if(restPos < text.length) {
			if(lines.length == 0 && leftMargin > 0 && x + afterData - this.letterSpacing > maxWidth) {
				lines.push("");
				if(sizes != null) {
					sizes.push(leftMargin);
				}
				x -= leftMargin;
			}
			lines.push(HxOverrides.substr(text,restPos,text.length - restPos));
			if(sizes != null) {
				sizes.push(x);
			}
		}
		return lines.join("\n");
	}
	,initGlyphs: function(text,rebuild) {
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
		}
		var x = 0.;
		var y = 0.;
		var xMax = 0.;
		var xMin = 0.;
		var yMin = 0.;
		var prevChar = -1;
		var linei = 0;
		var align = this.textAlign;
		var lines = [];
		var dl = this.font.lineHeight + this.lineSpacing;
		var t = this.splitRawText(text,0,0,null,lines);
		var _g = 0;
		while(_g < lines.length) {
			var lw = lines[_g];
			++_g;
			if(lw > x) {
				x = lw;
			}
		}
		this.calcWidth = x;
		switch(align._hx_index) {
		case 0:
			x = 0;
			break;
		case 1:case 2:case 3:case 4:
			var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.realMaxWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
			var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
			var _g1 = 0;
			var _g2 = lines.length;
			while(_g1 < _g2) {
				var i = _g1++;
				lines[i] = Math.floor((max - lines[i]) * k);
			}
			x = lines[0];
			xMin = x;
			break;
		}
		var _g11 = 0;
		var _g21 = t.length;
		while(_g11 < _g21) {
			var i1 = _g11++;
			var cc = HxOverrides.cca(t,i1);
			var _this = this.font;
			var c = _this.glyphs.h[cc];
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? _this.nullChar : _this.defaultChar;
				}
			}
			var e = c;
			var offs = e.getKerningOffset(prevChar);
			var esize = e.width + offs;
			if(cc == 10) {
				if(x > xMax) {
					xMax = x;
				}
				switch(align._hx_index) {
				case 0:
					x = 0;
					break;
				case 1:case 2:case 3:case 4:
					x = lines[++linei];
					if(x < xMin) {
						xMin = x;
					}
					break;
				}
				y += dl;
				prevChar = -1;
			} else {
				if(e != null) {
					if(rebuild) {
						var _this1 = this.glyphs;
						_this1.content.add(x + offs,y,_this1.curColor.x,_this1.curColor.y,_this1.curColor.z,_this1.curColor.w,e.t);
					}
					if(y == 0 && e.t.dy < yMin) {
						yMin = e.t.dy;
					}
					x += esize + this.letterSpacing;
				}
				prevChar = cc;
			}
		}
		if(x > xMax) {
			xMax = x;
		}
		this.calcXMin = xMin;
		this.calcYMin = yMin;
		this.calcWidth = xMax - xMin;
		this.calcHeight = y + this.font.lineHeight;
		this.calcSizeHeight = y + (this.font.baseLine > 0 ? this.font.baseLine : this.font.lineHeight);
		this.calcDone = true;
		if(rebuild) {
			this.needsRebuild = false;
		}
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		var a = this.color.w;
		var _this = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.color.w = a;
		return c;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		var x;
		var y;
		var w;
		var h;
		if(forSize) {
			x = this.calcXMin;
			y = 0.;
			w = this.calcWidth;
			h = this.calcSizeHeight;
		} else {
			x = this.calcXMin;
			y = this.calcYMin;
			w = this.calcWidth;
			h = this.calcHeight - this.calcYMin;
		}
		this.addBounds(relativeTo,out,x,y,w,h);
	}
	,__class__: h2d_Text
});
var h2d_Tile = function(tex,x,y,w,h,dx,dy) {
	if(dy == null) {
		dy = 0;
	}
	if(dx == null) {
		dx = 0;
	}
	this.innerTex = tex;
	this.x = x;
	this.y = y;
	this.width = w;
	this.height = h;
	this.dx = dx;
	this.dy = dy;
	if(tex != null) {
		this.setTexture(tex);
	}
};
$hxClasses["h2d.Tile"] = h2d_Tile;
h2d_Tile.__name__ = "h2d.Tile";
h2d_Tile.fromColor = function(color,width,height,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	var t = new h2d_Tile(h3d_mat_Texture.fromColor(color,alpha),0,0,1,1);
	t.width = width;
	t.height = height;
	return t;
};
h2d_Tile.fromTexture = function(t) {
	return new h2d_Tile(t,0,0,t.width,t.height);
};
h2d_Tile.prototype = {
	setTexture: function(tex) {
		this.innerTex = tex;
		if(tex != null) {
			this.u = this.x / tex.width;
			this.v = this.y / tex.height;
			this.u2 = (this.x + this.width) / tex.width;
			this.v2 = (this.y + this.height) / tex.height;
		}
	}
	,sub: function(x,y,w,h,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		return new h2d_Tile(this.innerTex,this.x + x,this.y + y,w,h,dx,dy);
	}
	,gridFlatten: function(size,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.height / size | 0;
		while(_g1 < _g2) {
			var y = _g1++;
			var _g11 = 0;
			var _g21 = this.width / size | 0;
			while(_g11 < _g21) {
				var x = _g11++;
				_g.push(this.sub(x * size,y * size,size,size,dx,dy));
			}
		}
		return _g;
	}
	,__class__: h2d_Tile
};
var h2d_TileLayerContent = function() {
	h3d_prim_Primitive.call(this);
	this.clear();
};
$hxClasses["h2d.TileLayerContent"] = h2d_TileLayerContent;
h2d_TileLayerContent.__name__ = "h2d.TileLayerContent";
h2d_TileLayerContent.__super__ = h3d_prim_Primitive;
h2d_TileLayerContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	clear: function() {
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		if(this.buffer != null) {
			this.buffer.dispose();
		}
		this.buffer = null;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.xMax = -Infinity;
		this.yMax = -Infinity;
	}
	,triCount: function() {
		if(this.buffer == null) {
			return this.tmp.pos >> 4;
		} else {
			return this.buffer.totalVertices() >> 1;
		}
	}
	,add: function(x,y,r,g,b,a,t) {
		var sx = x + t.dx;
		var sy = y + t.dy;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = sy;
		var this3 = this.tmp;
		var v = t.u;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = v;
		var this4 = this.tmp;
		var v1 = t.v;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = v1;
		var this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = r;
		var this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = g;
		var this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = b;
		var this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = a;
		var this9 = this.tmp;
		var v2 = sx + t.width;
		if(this9.pos == this9.array.length) {
			var newSize8 = this9.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(this9.array);
			this9.array = newArray8;
		}
		this9.array[this9.pos++] = v2;
		var this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			var newSize9 = this10.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(this10.array);
			this10.array = newArray9;
		}
		this10.array[this10.pos++] = sy;
		var this11 = this.tmp;
		var v3 = t.u2;
		if(this11.pos == this11.array.length) {
			var newSize10 = this11.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(this11.array);
			this11.array = newArray10;
		}
		this11.array[this11.pos++] = v3;
		var this12 = this.tmp;
		var v4 = t.v;
		if(this12.pos == this12.array.length) {
			var newSize11 = this12.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(this12.array);
			this12.array = newArray11;
		}
		this12.array[this12.pos++] = v4;
		var this13 = this.tmp;
		if(this13.pos == this13.array.length) {
			var newSize12 = this13.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(this13.array);
			this13.array = newArray12;
		}
		this13.array[this13.pos++] = r;
		var this14 = this.tmp;
		if(this14.pos == this14.array.length) {
			var newSize13 = this14.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(this14.array);
			this14.array = newArray13;
		}
		this14.array[this14.pos++] = g;
		var this15 = this.tmp;
		if(this15.pos == this15.array.length) {
			var newSize14 = this15.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(this15.array);
			this15.array = newArray14;
		}
		this15.array[this15.pos++] = b;
		var this16 = this.tmp;
		if(this16.pos == this16.array.length) {
			var newSize15 = this16.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(this16.array);
			this16.array = newArray15;
		}
		this16.array[this16.pos++] = a;
		var this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			var newSize16 = this17.array.length << 1;
			if(newSize16 < 128) {
				newSize16 = 128;
			}
			var newArray16 = new Float32Array(newSize16);
			newArray16.set(this17.array);
			this17.array = newArray16;
		}
		this17.array[this17.pos++] = sx;
		var this18 = this.tmp;
		var v5 = sy + t.height;
		if(this18.pos == this18.array.length) {
			var newSize17 = this18.array.length << 1;
			if(newSize17 < 128) {
				newSize17 = 128;
			}
			var newArray17 = new Float32Array(newSize17);
			newArray17.set(this18.array);
			this18.array = newArray17;
		}
		this18.array[this18.pos++] = v5;
		var this19 = this.tmp;
		var v6 = t.u;
		if(this19.pos == this19.array.length) {
			var newSize18 = this19.array.length << 1;
			if(newSize18 < 128) {
				newSize18 = 128;
			}
			var newArray18 = new Float32Array(newSize18);
			newArray18.set(this19.array);
			this19.array = newArray18;
		}
		this19.array[this19.pos++] = v6;
		var this20 = this.tmp;
		var v7 = t.v2;
		if(this20.pos == this20.array.length) {
			var newSize19 = this20.array.length << 1;
			if(newSize19 < 128) {
				newSize19 = 128;
			}
			var newArray19 = new Float32Array(newSize19);
			newArray19.set(this20.array);
			this20.array = newArray19;
		}
		this20.array[this20.pos++] = v7;
		var this21 = this.tmp;
		if(this21.pos == this21.array.length) {
			var newSize20 = this21.array.length << 1;
			if(newSize20 < 128) {
				newSize20 = 128;
			}
			var newArray20 = new Float32Array(newSize20);
			newArray20.set(this21.array);
			this21.array = newArray20;
		}
		this21.array[this21.pos++] = r;
		var this22 = this.tmp;
		if(this22.pos == this22.array.length) {
			var newSize21 = this22.array.length << 1;
			if(newSize21 < 128) {
				newSize21 = 128;
			}
			var newArray21 = new Float32Array(newSize21);
			newArray21.set(this22.array);
			this22.array = newArray21;
		}
		this22.array[this22.pos++] = g;
		var this23 = this.tmp;
		if(this23.pos == this23.array.length) {
			var newSize22 = this23.array.length << 1;
			if(newSize22 < 128) {
				newSize22 = 128;
			}
			var newArray22 = new Float32Array(newSize22);
			newArray22.set(this23.array);
			this23.array = newArray22;
		}
		this23.array[this23.pos++] = b;
		var this24 = this.tmp;
		if(this24.pos == this24.array.length) {
			var newSize23 = this24.array.length << 1;
			if(newSize23 < 128) {
				newSize23 = 128;
			}
			var newArray23 = new Float32Array(newSize23);
			newArray23.set(this24.array);
			this24.array = newArray23;
		}
		this24.array[this24.pos++] = a;
		var this25 = this.tmp;
		var v8 = sx + t.width;
		if(this25.pos == this25.array.length) {
			var newSize24 = this25.array.length << 1;
			if(newSize24 < 128) {
				newSize24 = 128;
			}
			var newArray24 = new Float32Array(newSize24);
			newArray24.set(this25.array);
			this25.array = newArray24;
		}
		this25.array[this25.pos++] = v8;
		var this26 = this.tmp;
		var v9 = sy + t.height;
		if(this26.pos == this26.array.length) {
			var newSize25 = this26.array.length << 1;
			if(newSize25 < 128) {
				newSize25 = 128;
			}
			var newArray25 = new Float32Array(newSize25);
			newArray25.set(this26.array);
			this26.array = newArray25;
		}
		this26.array[this26.pos++] = v9;
		var this27 = this.tmp;
		var v10 = t.u2;
		if(this27.pos == this27.array.length) {
			var newSize26 = this27.array.length << 1;
			if(newSize26 < 128) {
				newSize26 = 128;
			}
			var newArray26 = new Float32Array(newSize26);
			newArray26.set(this27.array);
			this27.array = newArray26;
		}
		this27.array[this27.pos++] = v10;
		var this28 = this.tmp;
		var v11 = t.v2;
		if(this28.pos == this28.array.length) {
			var newSize27 = this28.array.length << 1;
			if(newSize27 < 128) {
				newSize27 = 128;
			}
			var newArray27 = new Float32Array(newSize27);
			newArray27.set(this28.array);
			this28.array = newArray27;
		}
		this28.array[this28.pos++] = v11;
		var this29 = this.tmp;
		if(this29.pos == this29.array.length) {
			var newSize28 = this29.array.length << 1;
			if(newSize28 < 128) {
				newSize28 = 128;
			}
			var newArray28 = new Float32Array(newSize28);
			newArray28.set(this29.array);
			this29.array = newArray28;
		}
		this29.array[this29.pos++] = r;
		var this30 = this.tmp;
		if(this30.pos == this30.array.length) {
			var newSize29 = this30.array.length << 1;
			if(newSize29 < 128) {
				newSize29 = 128;
			}
			var newArray29 = new Float32Array(newSize29);
			newArray29.set(this30.array);
			this30.array = newArray29;
		}
		this30.array[this30.pos++] = g;
		var this31 = this.tmp;
		if(this31.pos == this31.array.length) {
			var newSize30 = this31.array.length << 1;
			if(newSize30 < 128) {
				newSize30 = 128;
			}
			var newArray30 = new Float32Array(newSize30);
			newArray30.set(this31.array);
			this31.array = newArray30;
		}
		this31.array[this31.pos++] = b;
		var this32 = this.tmp;
		if(this32.pos == this32.array.length) {
			var newSize31 = this32.array.length << 1;
			if(newSize31 < 128) {
				newSize31 = 128;
			}
			var newArray31 = new Float32Array(newSize31);
			newArray31.set(this32.array);
			this32.array = newArray31;
		}
		this32.array[this32.pos++] = a;
		var x1 = x + t.dx;
		var y1 = y + t.dy;
		if(x1 < this.xMin) {
			this.xMin = x1;
		}
		if(y1 < this.yMin) {
			this.yMin = y1;
		}
		x1 += t.width;
		y1 += t.height;
		if(x1 > this.xMax) {
			this.xMax = x1;
		}
		if(y1 > this.yMax) {
			this.yMax = y1;
		}
	}
	,alloc: function(engine) {
		if(this.tmp == null) {
			this.clear();
		}
		if(this.tmp.pos > 0) {
			this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
		}
	}
	,doRender: function(engine,min,len) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		}
		if(this.buffer != null) {
			var start = min;
			var max = len;
			if(max == null) {
				max = -1;
			}
			if(start == null) {
				start = 0;
			}
			engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,start,max);
		}
	}
	,__class__: h2d_TileLayerContent
});
var h2d_TileGroup = function(t,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = t;
	this.rangeMin = this.rangeMax = -1;
	this.curColor = new h3d_Vector(1,1,1,1);
	this.content = new h2d_TileLayerContent();
};
$hxClasses["h2d.TileGroup"] = h2d_TileGroup;
h2d_TileGroup.__name__ = "h2d.TileGroup";
h2d_TileGroup.__super__ = h2d_Drawable;
h2d_TileGroup.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		this.addBounds(relativeTo,out,this.content.xMin,this.content.yMin,this.content.xMax - this.content.xMin,this.content.yMax - this.content.yMin);
	}
	,clear: function() {
		this.content.clear();
	}
	,onRemove: function() {
		this.content.dispose();
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.isDisposed()) {
			_this.alloc(h3d_Engine.CURRENT);
		}
	}
	,drawWith: function(ctx,obj) {
		var max = this.content.triCount();
		if(max == 0) {
			return;
		}
		if(!ctx.beginDrawObject(obj,this.tile.innerTex)) {
			return;
		}
		var min = this.rangeMin < 0 ? 0 : this.rangeMin * 2;
		if(this.rangeMax > 0 && this.rangeMax < max * 2) {
			max = this.rangeMax * 2;
		}
		this.content.doRender(ctx.engine,min,max - min);
	}
	,__class__: h2d_TileGroup
});
var h2d_col_Bounds = function() {
	this.xMin = 1e20;
	this.yMin = 1e20;
	this.xMax = -1e20;
	this.yMax = -1e20;
};
$hxClasses["h2d.col.Bounds"] = h2d_col_Bounds;
h2d_col_Bounds.__name__ = "h2d.col.Bounds";
h2d_col_Bounds.prototype = {
	__class__: h2d_col_Bounds
};
var h2d_col_Collider = function() { };
$hxClasses["h2d.col.Collider"] = h2d_col_Collider;
h2d_col_Collider.__name__ = "h2d.col.Collider";
h2d_col_Collider.__isInterface__ = true;
h2d_col_Collider.prototype = {
	__class__: h2d_col_Collider
};
var h2d_col_Point = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["h2d.col.Point"] = h2d_col_Point;
h2d_col_Point.__name__ = "h2d.col.Point";
h2d_col_Point.prototype = {
	__class__: h2d_col_Point
};
var h2d_filter_Filter = function() {
	this.enable = true;
	this.boundsExtend = 0.;
	this.autoBounds = true;
};
$hxClasses["h2d.filter.Filter"] = h2d_filter_Filter;
h2d_filter_Filter.__name__ = "h2d.filter.Filter";
h2d_filter_Filter.prototype = {
	get_enable: function() {
		return this.enable;
	}
	,sync: function(ctx,s) {
	}
	,bind: function(s) {
	}
	,unbind: function(s) {
	}
	,getBounds: function(s,bounds) {
		s.getBounds(s,bounds);
		bounds.xMin -= this.boundsExtend;
		bounds.yMin -= this.boundsExtend;
		bounds.xMax += this.boundsExtend;
		bounds.yMax += this.boundsExtend;
	}
	,draw: function(ctx,input) {
		return input;
	}
	,__class__: h2d_filter_Filter
};
var h3d_BufferFlag = $hxEnums["h3d.BufferFlag"] = { __ename__ : true, __constructs__ : ["Dynamic","Triangles","Quads","Managed","RawFormat","NoAlloc","UniformBuffer"]
	,Dynamic: {_hx_index:0,__enum__:"h3d.BufferFlag",toString:$estr}
	,Triangles: {_hx_index:1,__enum__:"h3d.BufferFlag",toString:$estr}
	,Quads: {_hx_index:2,__enum__:"h3d.BufferFlag",toString:$estr}
	,Managed: {_hx_index:3,__enum__:"h3d.BufferFlag",toString:$estr}
	,RawFormat: {_hx_index:4,__enum__:"h3d.BufferFlag",toString:$estr}
	,NoAlloc: {_hx_index:5,__enum__:"h3d.BufferFlag",toString:$estr}
	,UniformBuffer: {_hx_index:6,__enum__:"h3d.BufferFlag",toString:$estr}
};
h3d_BufferFlag.__empty_constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.Triangles,h3d_BufferFlag.Quads,h3d_BufferFlag.Managed,h3d_BufferFlag.RawFormat,h3d_BufferFlag.NoAlloc,h3d_BufferFlag.UniformBuffer];
var h3d_Buffer = function(vertices,stride,flags) {
	this.id = h3d_Buffer.GUID++;
	this.vertices = vertices;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	if((this.flags & 1 << h3d_BufferFlag.NoAlloc._hx_index) == 0) {
		h3d_Engine.CURRENT.mem.allocBuffer(this,stride);
	}
};
$hxClasses["h3d.Buffer"] = h3d_Buffer;
h3d_Buffer.__name__ = "h3d.Buffer";
h3d_Buffer.ofFloats = function(v,stride,flags) {
	var nvert = v.pos / stride | 0;
	var b = new h3d_Buffer(nvert,stride,flags);
	b.uploadVector(v,0,nvert);
	return b;
};
h3d_Buffer.prototype = {
	isDisposed: function() {
		if(this.buffer != null) {
			return this.buffer.vbuf == null;
		} else {
			return true;
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.freeBuffer(this);
			this.buffer = null;
			if(this.next != null) {
				this.next.dispose();
			}
		}
	}
	,totalVertices: function() {
		var count = 0;
		var b = this;
		while(b != null) {
			count += b.vertices;
			b = b.next;
		}
		return count;
	}
	,uploadVector: function(buf,bufPos,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		var cur = this;
		while(cur != null && startVertice >= cur.vertices) {
			startVertice -= cur.vertices;
			cur = cur.next;
		}
		while(vertices > 0) {
			if(cur == null) {
				throw new js__$Boot_HaxeError("Too many vertices");
			}
			var count = vertices + startVertice > cur.vertices ? cur.vertices - startVertice : vertices;
			cur.buffer.uploadVertexBuffer(cur.position + startVertice,count,buf,bufPos);
			startVertice = 0;
			bufPos += count * this.buffer.stride;
			vertices -= count;
			cur = cur.next;
		}
	}
	,__class__: h3d_Buffer
};
var h3d_Camera = function(fovY,zoom,screenRatio,zNear,zFar,rightHanded) {
	if(rightHanded == null) {
		rightHanded = false;
	}
	if(zFar == null) {
		zFar = 4000.;
	}
	if(zNear == null) {
		zNear = 0.02;
	}
	if(screenRatio == null) {
		screenRatio = 1.333333;
	}
	if(zoom == null) {
		zoom = 1.;
	}
	if(fovY == null) {
		fovY = 25.;
	}
	this.viewY = 0.;
	this.viewX = 0.;
	this.fovY = fovY;
	this.zoom = zoom;
	this.screenRatio = screenRatio;
	this.zNear = zNear;
	this.zFar = zFar;
	this.rightHanded = rightHanded;
	this.pos = new h3d_Vector(2,3,4);
	this.up = new h3d_Vector(0,0,1);
	this.target = new h3d_Vector(0,0,0);
	this.m = new h3d_Matrix();
	this.mcam = new h3d_Matrix();
	this.mproj = new h3d_Matrix();
	this.frustum = new h3d_col_Frustum();
	this.update();
};
$hxClasses["h3d.Camera"] = h3d_Camera;
h3d_Camera.__name__ = "h3d.Camera";
h3d_Camera.prototype = {
	getInverseViewProj: function() {
		if(this.minv == null) {
			this.minv = new h3d_Matrix();
		}
		if(this.needInv) {
			this.minv.initInverse(this.m);
			this.needInv = false;
		}
		return this.minv;
	}
	,unproject: function(screenX,screenY,camZ) {
		var p = new h3d_Vector(screenX,screenY,camZ);
		var m = this.getInverseViewProj();
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + p.w * m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + p.w * m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + p.w * m._43;
		var iw = 1 / (p.x * m._14 + p.y * m._24 + p.z * m._34 + p.w * m._44);
		p.x = px * iw;
		p.y = py * iw;
		p.z = pz * iw;
		p.w = 1;
		return p;
	}
	,update: function() {
		if(this.follow != null) {
			var _this = this.pos;
			var x = 0;
			var y = 0;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			var _this1 = this.target;
			var x1 = 0;
			var y1 = 0;
			var z1 = 0;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z1;
			_this1.w = 1.;
			this.follow.pos.localToGlobal(this.pos);
			this.follow.target.localToGlobal(this.target);
			if(this.follow.pos.name != null) {
				var p = this.follow.pos;
				while(p != null) {
					if(p.currentAnimation != null) {
						var v = p.currentAnimation.getPropValue(this.follow.pos.name,"FOVY");
						if(v != null) {
							this.fovY = v;
							break;
						}
					}
					p = p.parent;
				}
			}
		}
		this.makeCameraMatrix(this.mcam);
		this.makeFrustumMatrix(this.mproj);
		this.m.multiply(this.mcam,this.mproj);
		this.needInv = true;
		if(this.mcamInv != null) {
			this.mcamInv._44 = 0;
		}
		if(this.mprojInv != null) {
			this.mprojInv._44 = 0;
		}
		this.frustum.loadMatrix(this.m);
	}
	,getFrustumCorners: function(zMax) {
		if(zMax == null) {
			zMax = 1.;
		}
		return [this.unproject(-1,1,0),this.unproject(1,1,0),this.unproject(1,-1,0),this.unproject(-1,-1,0),this.unproject(-1,1,zMax),this.unproject(1,1,zMax),this.unproject(1,-1,zMax),this.unproject(-1,-1,zMax)];
	}
	,makeCameraMatrix: function(m) {
		var _this = this.target;
		var v = this.pos;
		var x = _this.x - v.x;
		var y = _this.y - v.y;
		var z = _this.z - v.z;
		var w = _this.w - v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var az_x = x;
		var az_y = y;
		var az_z = z;
		var az_w = w;
		if(this.rightHanded) {
			az_x *= -1;
			az_y *= -1;
			az_z *= -1;
		}
		var k = 1. / Math.sqrt(az_x * az_x + az_y * az_y + az_z * az_z);
		az_x *= k;
		az_y *= k;
		az_z *= k;
		var _this1 = this.up;
		var x1 = _this1.y * az_z - _this1.z * az_y;
		var y1 = _this1.z * az_x - _this1.x * az_z;
		var z1 = _this1.x * az_y - _this1.y * az_x;
		var w1 = 1;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var ax_x = x1;
		var ax_y = y1;
		var ax_z = z1;
		var ax_w = w1;
		var k1 = 1. / Math.sqrt(ax_x * ax_x + ax_y * ax_y + ax_z * ax_z);
		ax_x *= k1;
		ax_y *= k1;
		ax_z *= k1;
		if(Math.sqrt(ax_x * ax_x + ax_y * ax_y + ax_z * ax_z) == 0) {
			ax_x = az_y;
			ax_y = az_z;
			ax_z = az_x;
		}
		var x2 = az_y * ax_z - az_z * ax_y;
		var y2 = az_z * ax_x - az_x * ax_z;
		var z2 = az_x * ax_y - az_y * ax_x;
		var w2 = 1;
		if(w2 == null) {
			w2 = 1.;
		}
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		var ay_x = x2;
		var ay_y = y2;
		var ay_z = z2;
		var ay_w = w2;
		m._11 = ax_x;
		m._12 = ay_x;
		m._13 = az_x;
		m._14 = 0;
		m._21 = ax_y;
		m._22 = ay_y;
		m._23 = az_y;
		m._24 = 0;
		m._31 = ax_z;
		m._32 = ay_z;
		m._33 = az_z;
		m._34 = 0;
		var v1 = this.pos;
		m._41 = -(ax_x * v1.x + ax_y * v1.y + ax_z * v1.z);
		var v2 = this.pos;
		m._42 = -(ay_x * v2.x + ay_y * v2.y + ay_z * v2.z);
		var v3 = this.pos;
		m._43 = -(az_x * v3.x + az_y * v3.y + az_z * v3.z);
		m._44 = 1;
	}
	,makeFrustumMatrix: function(m) {
		m.zero();
		var bounds = this.orthoBounds;
		if(bounds != null) {
			var w = 1 / (bounds.xMax - bounds.xMin);
			var h = 1 / (bounds.yMax - bounds.yMin);
			var d = 1 / (bounds.zMax - bounds.zMin);
			m._11 = 2 * w;
			m._22 = 2 * h;
			m._33 = d;
			m._41 = -(bounds.xMin + bounds.xMax) * w;
			m._42 = -(bounds.yMin + bounds.yMax) * h;
			m._43 = -bounds.zMin * d;
			m._44 = 1;
		} else {
			var degToRad = Math.PI / 180;
			var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
			var scale = this.zoom / Math.tan(halfFovX);
			m._11 = scale;
			m._22 = scale * this.screenRatio;
			m._33 = this.zFar / (this.zFar - this.zNear);
			m._34 = 1;
			m._43 = -(this.zNear * this.zFar) / (this.zFar - this.zNear);
		}
		m._11 += this.viewX * m._14;
		m._21 += this.viewX * m._24;
		m._31 += this.viewX * m._34;
		m._41 += this.viewX * m._44;
		m._12 += this.viewY * m._14;
		m._22 += this.viewY * m._24;
		m._32 += this.viewY * m._34;
		m._42 += this.viewY * m._44;
		if(this.rightHanded) {
			m._33 *= -1;
			m._34 *= -1;
		}
	}
	,__class__: h3d_Camera
};
var h3d__$Engine_TargetTmp = function(t,n,l,m) {
	this.t = t;
	this.next = n;
	this.layer = l;
	this.mipLevel = m;
};
$hxClasses["h3d._Engine.TargetTmp"] = h3d__$Engine_TargetTmp;
h3d__$Engine_TargetTmp.__name__ = "h3d._Engine.TargetTmp";
h3d__$Engine_TargetTmp.prototype = {
	__class__: h3d__$Engine_TargetTmp
};
var h3d_Engine = function() {
	this.resCache = new haxe_ds_ObjectMap();
	this.ready = false;
	this.textureColorCache = new haxe_ds_IntMap();
	this.tmpVector = new h3d_Vector();
	this.backgroundColor = -16777216;
	this.hardware = !h3d_Engine.SOFTWARE_DRIVER;
	this.antiAlias = h3d_Engine.ANTIALIASING;
	this.autoResize = true;
	this.set_fullScreen(!hxd_System.getValue(hxd_SystemValue.IsWindowed));
	this.window = hxd_Window.getInstance();
	this.realFps = hxd_System.getDefaultFrameRate();
	this.lastTime = Date.now() / 1000;
	this.window.addResizeEvent($bind(this,this.onWindowResize));
	this.driver = new h3d_impl_GlDriver(this.antiAlias);
	h3d_Engine.CURRENT = this;
};
$hxClasses["h3d.Engine"] = h3d_Engine;
h3d_Engine.__name__ = "h3d.Engine";
h3d_Engine.prototype = {
	init: function() {
		this.driver.init($bind(this,this.onCreate),!this.hardware);
	}
	,selectShader: function(shader) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		if(this.driver.selectShader(shader)) {
			this.shaderSwitches++;
		}
	}
	,selectMaterial: function(pass) {
		this.driver.selectMaterial(pass);
	}
	,uploadShaderBuffers: function(buffers,which) {
		this.driver.uploadShaderBuffers(buffers,which);
	}
	,selectBuffer: function(buf) {
		if(buf.isDisposed()) {
			return false;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectBuffer(buf);
		return true;
	}
	,renderBuffer: function(b,indexes,vertPerTri,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.isDisposed()) {
			return;
		}
		while(true) {
			var ntri = b.vertices / vertPerTri | 0;
			var pos = b.position / vertPerTri | 0;
			if(startTri > 0) {
				if(startTri >= ntri) {
					startTri -= ntri;
					b = b.next;
					if(!(b != null)) {
						break;
					} else {
						continue;
					}
				}
				pos += startTri;
				ntri -= startTri;
				startTri = 0;
			}
			if(drawTri >= 0) {
				if(drawTri == 0) {
					return;
				}
				drawTri -= ntri;
				if(drawTri < 0) {
					ntri += drawTri;
					drawTri = 0;
				}
			}
			if(ntri > 0 && this.selectBuffer(b)) {
				this.driver.draw(indexes.ibuf,pos * 3,ntri);
				this.drawTriangles += ntri;
				this.drawCalls++;
			}
			b = b.next;
			if(!(b != null)) {
				break;
			}
		}
	}
	,renderIndexed: function(b,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(b.next != null) {
			throw new js__$Boot_HaxeError("Buffer is split");
		}
		if(indexes.isDisposed()) {
			return;
		}
		var maxTri = indexes.count / 3 | 0;
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes.ibuf,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,set_debug: function(d) {
		this.debug = d;
		this.driver.setDebug(this.debug);
		return d;
	}
	,onCreate: function(disposed) {
		h3d_Engine.CURRENT = this;
		if(this.autoResize) {
			this.width = this.window.get_width();
			this.height = this.window.get_height();
		}
		if(disposed) {
			hxd_impl_Allocator.get().onContextLost();
			this.mem.onContextLost();
		} else {
			this.mem = new h3d_impl_MemoryManager(this.driver);
			this.mem.init();
			this.nullTexture = new h3d_mat_Texture(0,0,[h3d_mat_TextureFlags.NoAlloc]);
		}
		this.hardware = this.driver.hasFeature(h3d_impl_Feature.HardwareAccelerated);
		this.set_debug(this.debug);
		this.set_fullScreen(this.fullScreen);
		this.resize(this.width,this.height);
		if(disposed) {
			this.onContextLost();
		} else {
			this.onReady();
		}
		this.ready = true;
	}
	,onContextLost: function() {
	}
	,onReady: function() {
	}
	,onWindowResize: function() {
		if(this.autoResize && !this.driver.isDisposed()) {
			var w = this.window.get_width();
			var h = this.window.get_height();
			if(w != this.width || h != this.height) {
				this.resize(w,h);
			}
			this.onResized();
		}
	}
	,set_fullScreen: function(v) {
		this.fullScreen = v;
		if(this.mem != null && hxd_System.getValue(hxd_SystemValue.IsWindowed)) {
			this.window.set_displayMode(v ? hxd_DisplayMode.Borderless : hxd_DisplayMode.Windowed);
		}
		return v;
	}
	,onResized: function() {
	}
	,resize: function(width,height) {
		if(width < 32) {
			width = 32;
		}
		if(height < 32) {
			height = 32;
		}
		this.width = width;
		this.height = height;
		if(!this.driver.isDisposed()) {
			this.driver.resize(width,height);
		}
	}
	,begin: function() {
		if(this.driver.isDisposed()) {
			return false;
		}
		this.drawTriangles = 0;
		this.shaderSwitches = 0;
		this.drawCalls = 0;
		this.targetStack = null;
		this.needFlushTarget = this.currentTargetTex != null;
		this.driver.begin(hxd_Timer.frameCount);
		if(this.backgroundColor != null) {
			this.clear(this.backgroundColor,1,0);
		}
		return true;
	}
	,end: function() {
		this.driver.end();
	}
	,getCurrentTarget: function() {
		if(this.targetStack == null) {
			return null;
		} else {
			return this.targetStack.t;
		}
	}
	,pushTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		var c = this.targetTmp;
		if(c == null) {
			c = new h3d__$Engine_TargetTmp(tex,this.targetStack,layer,mipLevel);
		} else {
			this.targetTmp = c.next;
			c.t = tex;
			c.next = this.targetStack;
			c.mipLevel = mipLevel;
			c.layer = layer;
		}
		this.targetStack = c;
		this.updateNeedFlush();
	}
	,updateNeedFlush: function() {
		var t = this.targetStack;
		if(t == null) {
			this.needFlushTarget = this.currentTargetTex != null;
		} else {
			this.needFlushTarget = this.currentTargetTex != t.t || this.currentTargetLayer != t.layer || this.currentTargetMip != t.mipLevel || t.textures != null;
		}
	}
	,popTarget: function() {
		var c = this.targetStack;
		if(c == null) {
			throw new js__$Boot_HaxeError("popTarget() with no matching pushTarget()");
		}
		this.targetStack = c.next;
		this.updateNeedFlush();
		c.t = null;
		c.textures = null;
		c.next = this.targetTmp;
		this.targetTmp = c;
	}
	,doFlushTarget: function() {
		var t = this.targetStack;
		if(t == null) {
			this.driver.setRenderTarget(null);
			this.currentTargetTex = null;
		} else {
			if(t.textures != null) {
				this.driver.setRenderTargets(t.textures);
			} else {
				this.driver.setRenderTarget(t.t,t.layer,t.mipLevel);
			}
			this.currentTargetTex = t.t;
			this.currentTargetLayer = t.layer;
			this.currentTargetMip = t.mipLevel;
		}
		this.needFlushTarget = false;
	}
	,clear: function(color,depth,stencil) {
		if(color != null) {
			var _this = this.tmpVector;
			_this.x = (color >> 16 & 255) / 255;
			_this.y = (color >> 8 & 255) / 255;
			_this.z = (color & 255) / 255;
			_this.w = (color >>> 24) / 255;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color == null ? null : this.tmpVector,depth,stencil);
	}
	,setRenderZone: function(x,y,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.setRenderZone(x,y,width,height);
	}
	,render: function(obj) {
		if(!this.begin()) {
			return false;
		}
		obj.render(this);
		this.end();
		var delta = Date.now() / 1000 - this.lastTime;
		this.lastTime += delta;
		if(delta > 0) {
			var curFps = 1. / delta;
			if(curFps > this.realFps * 2) {
				curFps = this.realFps * 2;
			} else if(curFps < this.realFps * 0.5) {
				curFps = this.realFps * 0.5;
			}
			var f = delta / .5;
			if(f > 0.3) {
				f = 0.3;
			}
			this.realFps = this.realFps * (1 - f) + curFps * f;
		}
		return true;
	}
	,__class__: h3d_Engine
};
var h3d_Indexes = function(count,is32) {
	if(is32 == null) {
		is32 = false;
	}
	this.mem = h3d_Engine.CURRENT.mem;
	this.count = count;
	this.is32 = is32;
	this.mem.allocIndexes(this);
};
$hxClasses["h3d.Indexes"] = h3d_Indexes;
h3d_Indexes.__name__ = "h3d.Indexes";
h3d_Indexes.alloc = function(i,startPos,length) {
	if(length == null) {
		length = -1;
	}
	if(startPos == null) {
		startPos = 0;
	}
	if(length < 0) {
		length = i.length;
	}
	var idx = new h3d_Indexes(length);
	idx.upload(i,0,length);
	return idx;
};
h3d_Indexes.prototype = {
	isDisposed: function() {
		return this.ibuf == null;
	}
	,upload: function(indexes,pos,count,bufferPos) {
		if(bufferPos == null) {
			bufferPos = 0;
		}
		this.mem.driver.uploadIndexBuffer(this.ibuf,pos,count,indexes,bufferPos);
	}
	,dispose: function() {
		if(this.ibuf != null) {
			this.mem.deleteIndexes(this);
		}
	}
	,__class__: h3d_Indexes
};
var h3d_Matrix = function() {
};
$hxClasses["h3d.Matrix"] = h3d_Matrix;
h3d_Matrix.__name__ = "h3d.Matrix";
h3d_Matrix.L = function(a) {
	var m = new h3d_Matrix();
	m.loadValues(a);
	return m;
};
h3d_Matrix.prototype = {
	zero: function() {
		this._11 = 0.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 0.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 0.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 0.0;
	}
	,identity: function() {
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,multiply3x4: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply: function(a,b) {
		var a11 = a._11;
		var a12 = a._12;
		var a13 = a._13;
		var a14 = a._14;
		var a21 = a._21;
		var a22 = a._22;
		var a23 = a._23;
		var a24 = a._24;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a34 = a._34;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var a44 = a._44;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b14 = b._14;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b24 = b._24;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b34 = b._34;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		var b44 = b._44;
		this._11 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this._12 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this._13 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this._14 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this._21 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this._22 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this._23 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this._24 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this._34 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this._44 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	}
	,inverse3x4: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		this._11 = m22 * m33 - m23 * m32;
		this._12 = m13 * m32 - m12 * m33;
		this._13 = m12 * m23 - m13 * m22;
		this._14 = 0;
		this._21 = m23 * m31 - m21 * m33;
		this._22 = m11 * m33 - m13 * m31;
		this._23 = m13 * m21 - m11 * m23;
		this._24 = 0;
		this._31 = m21 * m32 - m22 * m31;
		this._32 = m12 * m31 - m11 * m32;
		this._33 = m11 * m22 - m12 * m21;
		this._34 = 0;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		this._44 = 1;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		var invDet = 1.0 / det;
		this._11 *= invDet;
		this._12 *= invDet;
		this._13 *= invDet;
		this._21 *= invDet;
		this._22 *= invDet;
		this._23 *= invDet;
		this._31 *= invDet;
		this._32 *= invDet;
		this._33 *= invDet;
		this._41 *= invDet;
		this._42 *= invDet;
		this._43 *= invDet;
	}
	,initInverse: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m14 = m._14;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m24 = m._24;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m34 = m._34;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		var m44 = m._44;
		this._11 = m22 * m33 * m44 - m22 * m34 * m43 - m32 * m23 * m44 + m32 * m24 * m43 + m42 * m23 * m34 - m42 * m24 * m33;
		this._12 = -m12 * m33 * m44 + m12 * m34 * m43 + m32 * m13 * m44 - m32 * m14 * m43 - m42 * m13 * m34 + m42 * m14 * m33;
		this._13 = m12 * m23 * m44 - m12 * m24 * m43 - m22 * m13 * m44 + m22 * m14 * m43 + m42 * m13 * m24 - m42 * m14 * m23;
		this._14 = -m12 * m23 * m34 + m12 * m24 * m33 + m22 * m13 * m34 - m22 * m14 * m33 - m32 * m13 * m24 + m32 * m14 * m23;
		this._21 = -m21 * m33 * m44 + m21 * m34 * m43 + m31 * m23 * m44 - m31 * m24 * m43 - m41 * m23 * m34 + m41 * m24 * m33;
		this._22 = m11 * m33 * m44 - m11 * m34 * m43 - m31 * m13 * m44 + m31 * m14 * m43 + m41 * m13 * m34 - m41 * m14 * m33;
		this._23 = -m11 * m23 * m44 + m11 * m24 * m43 + m21 * m13 * m44 - m21 * m14 * m43 - m41 * m13 * m24 + m41 * m14 * m23;
		this._24 = m11 * m23 * m34 - m11 * m24 * m33 - m21 * m13 * m34 + m21 * m14 * m33 + m31 * m13 * m24 - m31 * m14 * m23;
		this._31 = m21 * m32 * m44 - m21 * m34 * m42 - m31 * m22 * m44 + m31 * m24 * m42 + m41 * m22 * m34 - m41 * m24 * m32;
		this._32 = -m11 * m32 * m44 + m11 * m34 * m42 + m31 * m12 * m44 - m31 * m14 * m42 - m41 * m12 * m34 + m41 * m14 * m32;
		this._33 = m11 * m22 * m44 - m11 * m24 * m42 - m21 * m12 * m44 + m21 * m14 * m42 + m41 * m12 * m24 - m41 * m14 * m22;
		this._34 = -m11 * m22 * m34 + m11 * m24 * m32 + m21 * m12 * m34 - m21 * m14 * m32 - m31 * m12 * m24 + m31 * m14 * m22;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31 + m14 * this._41;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 *= det;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 *= det;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 *= det;
		this._41 *= det;
		this._42 *= det;
		this._43 *= det;
		this._44 *= det;
	}
	,loadValues: function(a) {
		this._11 = a[0];
		this._12 = a[1];
		this._13 = a[2];
		this._14 = a[3];
		this._21 = a[4];
		this._22 = a[5];
		this._23 = a[6];
		this._24 = a[7];
		this._31 = a[8];
		this._32 = a[9];
		this._33 = a[10];
		this._34 = a[11];
		this._41 = a[12];
		this._42 = a[13];
		this._43 = a[14];
		this._44 = a[15];
	}
	,__class__: h3d_Matrix
};
var h3d_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Quat"] = h3d_Quat;
h3d_Quat.__name__ = "h3d.Quat";
h3d_Quat.prototype = {
	toMatrix: function(m) {
		if(m == null) {
			m = new h3d_Matrix();
		}
		var xx = this.x * this.x;
		var xy = this.x * this.y;
		var xz = this.x * this.z;
		var xw = this.x * this.w;
		var yy = this.y * this.y;
		var yz = this.y * this.z;
		var yw = this.y * this.w;
		var zz = this.z * this.z;
		var zw = this.z * this.w;
		m._11 = 1 - 2 * (yy + zz);
		m._12 = 2 * (xy + zw);
		m._13 = 2 * (xz - yw);
		m._14 = 0;
		m._21 = 2 * (xy - zw);
		m._22 = 1 - 2 * (xx + zz);
		m._23 = 2 * (yz + xw);
		m._24 = 0;
		m._31 = 2 * (xz + yw);
		m._32 = 2 * (yz - xw);
		m._33 = 1 - 2 * (xx + yy);
		m._34 = 0;
		m._41 = 0;
		m._42 = 0;
		m._43 = 0;
		m._44 = 1;
		return m;
	}
	,__class__: h3d_Quat
};
var h3d_Vector = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Vector"] = h3d_Vector;
h3d_Vector.__name__ = "h3d.Vector";
h3d_Vector.prototype = {
	normalize: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
	,__class__: h3d_Vector
};
var h3d_anim_AnimatedObject = function() { };
$hxClasses["h3d.anim.AnimatedObject"] = h3d_anim_AnimatedObject;
h3d_anim_AnimatedObject.__name__ = "h3d.anim.AnimatedObject";
var h3d_anim_Animation = function(name,frameCount,sampling) {
	this.name = name;
	this.frameCount = frameCount;
	this.sampling = sampling;
	this.objects = [];
	this.lastEvent = -1;
	this.frame = 0.;
	this.speed = 1.;
	this.loop = true;
	this.pause = false;
};
$hxClasses["h3d.anim.Animation"] = h3d_anim_Animation;
h3d_anim_Animation.__name__ = "h3d.anim.Animation";
h3d_anim_Animation.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_anim_Animation.prototype = {
	getPropValue: function(objectName,propName) {
		return null;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		throw new js__$Boot_HaxeError("assert");
	}
	,isPlaying: function() {
		if(!this.pause) {
			return (this.speed < 0 ? -this.speed : this.speed) > 0.000001;
		} else {
			return false;
		}
	}
	,endFrame: function() {
		return this.frameCount;
	}
	,update: function(dt) {
		if(!this.isInstance) {
			throw new js__$Boot_HaxeError("You must instanciate this animation first");
		}
		if(!this.isPlaying()) {
			return 0;
		}
		if(this.events != null && this.onEvent != null) {
			var f0 = this.frame | 0;
			var f1 = this.frame + dt * this.speed * this.sampling | 0;
			if(f1 >= this.frameCount) {
				f1 = this.frameCount - 1;
			}
			var _g = f0;
			var _g1 = f1 + 1;
			while(_g < _g1) {
				var f = _g++;
				if(f == this.lastEvent) {
					continue;
				}
				this.lastEvent = f;
				if(this.events[f] != null) {
					var oldF = this.frame;
					var oldDT = dt;
					dt -= (f - this.frame) / (this.speed * this.sampling);
					this.frame = f;
					var _g2 = 0;
					var _g11 = this.events[f];
					while(_g2 < _g11.length) {
						var e = _g11[_g2];
						++_g2;
						this.onEvent(e);
					}
					if(this.frame == f && f == this.frameCount - 1) {
						this.frame = oldF;
						dt = oldDT;
						break;
					} else {
						return dt;
					}
				}
			}
		}
		if(this.onAnimEnd != null) {
			var end = this.endFrame();
			var et = this.speed == 0 ? 0 : (end - this.frame) / (this.speed * this.sampling);
			if(et <= dt && et > 0) {
				this.frame = end;
				dt -= et;
				this.onAnimEnd();
				if(this.frame == end && this.isPlaying()) {
					if(this.loop) {
						this.frame = 0;
					} else {
						dt = 0;
					}
				}
				return dt;
			}
		}
		this.frame += dt * this.speed * this.sampling;
		if(this.frame >= this.frameCount) {
			if(this.loop) {
				this.frame %= this.frameCount;
			} else {
				this.frame = this.frameCount;
			}
		}
		return 0;
	}
	,__class__: h3d_anim_Animation
};
var h3d_col_Collider = function() { };
$hxClasses["h3d.col.Collider"] = h3d_col_Collider;
h3d_col_Collider.__name__ = "h3d.col.Collider";
h3d_col_Collider.__isInterface__ = true;
h3d_col_Collider.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_col_Collider.prototype = {
	__class__: h3d_col_Collider
};
var h3d_col_Bounds = function() {
	this.xMin = 1e20;
	this.xMax = -1e20;
	this.yMin = 1e20;
	this.yMax = -1e20;
	this.zMin = 1e20;
	this.zMax = -1e20;
};
$hxClasses["h3d.col.Bounds"] = h3d_col_Bounds;
h3d_col_Bounds.__name__ = "h3d.col.Bounds";
h3d_col_Bounds.__interfaces__ = [h3d_col_Collider];
h3d_col_Bounds.prototype = {
	inFrustum: function(f,m) {
		if(m != null) {
			throw new js__$Boot_HaxeError("Not implemented");
		}
		return f.hasBounds(this);
	}
	,rayIntersection: function(r,bestMatch) {
		var minTx = (this.xMin - r.px) / r.lx;
		var minTy = (this.yMin - r.py) / r.ly;
		var minTz = (this.zMin - r.pz) / r.lz;
		var maxTx = (this.xMax - r.px) / r.lx;
		var maxTy = (this.yMax - r.py) / r.ly;
		var maxTz = (this.zMax - r.pz) / r.lz;
		var realMinTx = minTx > maxTx ? maxTx : minTx;
		var realMinTy = minTy > maxTy ? maxTy : minTy;
		var realMinTz = minTz > maxTz ? maxTz : minTz;
		var realMaxTx = minTx < maxTx ? maxTx : minTx;
		var realMaxTy = minTy < maxTy ? maxTy : minTy;
		var realMaxTz = minTz < maxTz ? maxTz : minTz;
		var a = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		var minmax = a > realMaxTz ? realMaxTz : a;
		var a1 = realMinTx < realMinTy ? realMinTy : realMinTx;
		var maxmin = a1 < realMinTz ? realMinTz : a1;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	,intersection: function(a,b) {
		var a1 = a.xMin;
		var b1 = b.xMin;
		var xMin = a1 < b1 ? b1 : a1;
		var a2 = a.yMin;
		var b2 = b.yMin;
		var yMin = a2 < b2 ? b2 : a2;
		var a3 = a.zMin;
		var b3 = b.zMin;
		var zMin = a3 < b3 ? b3 : a3;
		var a4 = a.xMax;
		var b4 = b.xMax;
		var xMax = a4 > b4 ? b4 : a4;
		var a5 = a.yMax;
		var b5 = b.yMax;
		var yMax = a5 > b5 ? b5 : a5;
		var a6 = a.zMax;
		var b6 = b.zMax;
		var zMax = a6 > b6 ? b6 : a6;
		this.xMin = xMin;
		this.xMax = xMax;
		this.yMin = yMin;
		this.yMax = yMax;
		this.zMin = zMin;
		this.zMax = zMax;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var dz = (this.zMax - this.zMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		var mz = (this.zMax + this.zMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.zMin = mz - dz;
		this.xMax = mx + dx;
		this.yMax = my + dy;
		this.zMax = mz + dz;
	}
	,__class__: h3d_col_Bounds
};
var h3d_col_Frustum = function(mvp) {
	this.checkNearFar = true;
	this.pleft = new h3d_col_Plane(1,0,0,0.0);
	this.pright = new h3d_col_Plane(1,0,0,0.0);
	this.ptop = new h3d_col_Plane(1,0,0,0.0);
	this.pbottom = new h3d_col_Plane(1,0,0,0.0);
	this.pnear = new h3d_col_Plane(1,0,0,0.0);
	this.pfar = new h3d_col_Plane(1,0,0,0.0);
	if(mvp != null) {
		this.loadMatrix(mvp);
	}
};
$hxClasses["h3d.col.Frustum"] = h3d_col_Frustum;
h3d_col_Frustum.__name__ = "h3d.col.Frustum";
h3d_col_Frustum.prototype = {
	loadMatrix: function(mvp) {
		var _this = this.pleft;
		var p_nx = mvp._14 + mvp._11;
		var p_ny = mvp._24 + mvp._21;
		var p_nz = mvp._34 + mvp._31;
		var p_d = -(mvp._44 + mvp._41);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this1 = this.pright;
		var p_nx1 = mvp._14 - mvp._11;
		var p_ny1 = mvp._24 - mvp._21;
		var p_nz1 = mvp._34 - mvp._31;
		var p_d1 = mvp._41 - mvp._44;
		_this1.nx = p_nx1;
		_this1.ny = p_ny1;
		_this1.nz = p_nz1;
		_this1.d = p_d1;
		var _this2 = this.ptop;
		var p_nx2 = mvp._14 - mvp._12;
		var p_ny2 = mvp._24 - mvp._22;
		var p_nz2 = mvp._34 - mvp._32;
		var p_d2 = mvp._42 - mvp._44;
		_this2.nx = p_nx2;
		_this2.ny = p_ny2;
		_this2.nz = p_nz2;
		_this2.d = p_d2;
		var _this3 = this.pbottom;
		var p_nx3 = mvp._14 + mvp._12;
		var p_ny3 = mvp._24 + mvp._22;
		var p_nz3 = mvp._34 + mvp._32;
		var p_d3 = -(mvp._44 + mvp._42);
		_this3.nx = p_nx3;
		_this3.ny = p_ny3;
		_this3.nz = p_nz3;
		_this3.d = p_d3;
		var _this4 = this.pnear;
		var p_nx4 = mvp._13;
		var p_ny4 = mvp._23;
		var p_nz4 = mvp._33;
		var p_d4 = -mvp._43;
		_this4.nx = p_nx4;
		_this4.ny = p_ny4;
		_this4.nz = p_nz4;
		_this4.d = p_d4;
		var _this5 = this.pfar;
		var p_nx5 = mvp._14 - mvp._13;
		var p_ny5 = mvp._24 - mvp._23;
		var p_nz5 = mvp._34 - mvp._33;
		var p_d5 = mvp._43 - mvp._44;
		_this5.nx = p_nx5;
		_this5.ny = p_ny5;
		_this5.nz = p_nz5;
		_this5.d = p_d5;
		var _this6 = this.pleft;
		var len = 1. / Math.sqrt(_this6.nx * _this6.nx + _this6.ny * _this6.ny + _this6.nz * _this6.nz);
		_this6.nx *= len;
		_this6.ny *= len;
		_this6.nz *= len;
		_this6.d *= len;
		var _this7 = this.pright;
		var len1 = 1. / Math.sqrt(_this7.nx * _this7.nx + _this7.ny * _this7.ny + _this7.nz * _this7.nz);
		_this7.nx *= len1;
		_this7.ny *= len1;
		_this7.nz *= len1;
		_this7.d *= len1;
		var _this8 = this.ptop;
		var len2 = 1. / Math.sqrt(_this8.nx * _this8.nx + _this8.ny * _this8.ny + _this8.nz * _this8.nz);
		_this8.nx *= len2;
		_this8.ny *= len2;
		_this8.nz *= len2;
		_this8.d *= len2;
		var _this9 = this.pbottom;
		var len3 = 1. / Math.sqrt(_this9.nx * _this9.nx + _this9.ny * _this9.ny + _this9.nz * _this9.nz);
		_this9.nx *= len3;
		_this9.ny *= len3;
		_this9.nz *= len3;
		_this9.d *= len3;
		var _this10 = this.pnear;
		var len4 = 1. / Math.sqrt(_this10.nx * _this10.nx + _this10.ny * _this10.ny + _this10.nz * _this10.nz);
		_this10.nx *= len4;
		_this10.ny *= len4;
		_this10.nz *= len4;
		_this10.d *= len4;
		var _this11 = this.pfar;
		var len5 = 1. / Math.sqrt(_this11.nx * _this11.nx + _this11.ny * _this11.ny + _this11.nz * _this11.nz);
		_this11.nx *= len5;
		_this11.ny *= len5;
		_this11.nz *= len5;
		_this11.d *= len5;
	}
	,hasSphere: function(s) {
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var _this = this.pleft;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this1 = this.pright;
		if(_this1.nx * p_x + _this1.ny * p_y + _this1.nz * p_z - _this1.d < -s.r) {
			return false;
		}
		var _this2 = this.ptop;
		if(_this2.nx * p_x + _this2.ny * p_y + _this2.nz * p_z - _this2.d < -s.r) {
			return false;
		}
		var _this3 = this.pbottom;
		if(_this3.nx * p_x + _this3.ny * p_y + _this3.nz * p_z - _this3.d < -s.r) {
			return false;
		}
		if(this.checkNearFar) {
			var _this4 = this.pnear;
			if(_this4.nx * p_x + _this4.ny * p_y + _this4.nz * p_z - _this4.d < -s.r) {
				return false;
			}
			var _this5 = this.pfar;
			if(_this5.nx * p_x + _this5.ny * p_y + _this5.nz * p_z - _this5.d < -s.r) {
				return false;
			}
		}
		return true;
	}
	,hasBounds: function(b) {
		var p = this.pleft;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p1 = this.pright;
		var a1 = p1.nx;
		var b2 = p1.ny;
		var c1 = p1.nz;
		var dd1 = a1 * (b.xMax + b.xMin) + b2 * (b.yMax + b.yMin) + c1 * (b.zMax + b.zMin);
		if(a1 < 0) {
			a1 = -a1;
		}
		if(b2 < 0) {
			b2 = -b2;
		}
		if(c1 < 0) {
			c1 = -c1;
		}
		var rr1 = a1 * (b.xMax - b.xMin) + b2 * (b.yMax - b.yMin) + c1 * (b.zMax - b.zMin);
		if(dd1 + rr1 - p1.d * 2 < 0) {
			return false;
		}
		var p2 = this.ptop;
		var a2 = p2.nx;
		var b3 = p2.ny;
		var c2 = p2.nz;
		var dd2 = a2 * (b.xMax + b.xMin) + b3 * (b.yMax + b.yMin) + c2 * (b.zMax + b.zMin);
		if(a2 < 0) {
			a2 = -a2;
		}
		if(b3 < 0) {
			b3 = -b3;
		}
		if(c2 < 0) {
			c2 = -c2;
		}
		var rr2 = a2 * (b.xMax - b.xMin) + b3 * (b.yMax - b.yMin) + c2 * (b.zMax - b.zMin);
		if(dd2 + rr2 - p2.d * 2 < 0) {
			return false;
		}
		var p3 = this.ptop;
		var a3 = p3.nx;
		var b4 = p3.ny;
		var c3 = p3.nz;
		var dd3 = a3 * (b.xMax + b.xMin) + b4 * (b.yMax + b.yMin) + c3 * (b.zMax + b.zMin);
		if(a3 < 0) {
			a3 = -a3;
		}
		if(b4 < 0) {
			b4 = -b4;
		}
		if(c3 < 0) {
			c3 = -c3;
		}
		var rr3 = a3 * (b.xMax - b.xMin) + b4 * (b.yMax - b.yMin) + c3 * (b.zMax - b.zMin);
		if(dd3 + rr3 - p3.d * 2 < 0) {
			return false;
		}
		var p4 = this.pnear;
		var a4 = p4.nx;
		var b5 = p4.ny;
		var c4 = p4.nz;
		var dd4 = a4 * (b.xMax + b.xMin) + b5 * (b.yMax + b.yMin) + c4 * (b.zMax + b.zMin);
		if(a4 < 0) {
			a4 = -a4;
		}
		if(b5 < 0) {
			b5 = -b5;
		}
		if(c4 < 0) {
			c4 = -c4;
		}
		var rr4 = a4 * (b.xMax - b.xMin) + b5 * (b.yMax - b.yMin) + c4 * (b.zMax - b.zMin);
		if(dd4 + rr4 - p4.d * 2 < 0) {
			return false;
		}
		var p5 = this.pfar;
		var a5 = p5.nx;
		var b6 = p5.ny;
		var c5 = p5.nz;
		var dd5 = a5 * (b.xMax + b.xMin) + b6 * (b.yMax + b.yMin) + c5 * (b.zMax + b.zMin);
		if(a5 < 0) {
			a5 = -a5;
		}
		if(b6 < 0) {
			b6 = -b6;
		}
		if(c5 < 0) {
			c5 = -c5;
		}
		var rr5 = a5 * (b.xMax - b.xMin) + b6 * (b.yMax - b.yMin) + c5 * (b.zMax - b.zMin);
		if(dd5 + rr5 - p5.d * 2 < 0) {
			return false;
		}
		return true;
	}
	,__class__: h3d_col_Frustum
};
var h3d_col_Ray = function() {
};
$hxClasses["h3d.col.Ray"] = h3d_col_Ray;
h3d_col_Ray.__name__ = "h3d.col.Ray";
h3d_col_Ray.prototype = {
	normalize: function() {
		var l = this.lx * this.lx + this.ly * this.ly + this.lz * this.lz;
		if(l == 1.) {
			return;
		}
		if(l < 1e-10) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
		this.lz *= l;
	}
	,__class__: h3d_col_Ray
};
var h3d_col_Plane = function(nx,ny,nz,d) {
	this.nx = nx;
	this.ny = ny;
	this.nz = nz;
	this.d = d;
};
$hxClasses["h3d.col.Plane"] = h3d_col_Plane;
h3d_col_Plane.__name__ = "h3d.col.Plane";
h3d_col_Plane.prototype = {
	__class__: h3d_col_Plane
};
var h3d_col_Sphere = function(x,y,z,r) {
	if(r == null) {
		r = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var sx = x;
	var sy = y;
	var sz = z;
	var sr = r;
	if(sr == null) {
		sr = 0.;
	}
	if(sz == null) {
		sz = 0.;
	}
	if(sy == null) {
		sy = 0.;
	}
	if(sx == null) {
		sx = 0.;
	}
	this.x = sx;
	this.y = sy;
	this.z = sz;
	this.r = sr;
};
$hxClasses["h3d.col.Sphere"] = h3d_col_Sphere;
h3d_col_Sphere.__name__ = "h3d.col.Sphere";
h3d_col_Sphere.__interfaces__ = [h3d_col_Collider];
h3d_col_Sphere.prototype = {
	rayIntersection: function(r,bestMatch) {
		var r2 = this.r * this.r;
		var px = r.px + r.lx;
		var py = r.py + r.ly;
		var pz = r.pz + r.lz;
		var a = r.lx * r.lx + r.ly * r.ly + r.lz * r.lz;
		var b = 2 * r.lx * (this.x - px) + 2 * r.ly * (this.y - py) + 2 * r.lz * (this.z - pz);
		var c = this.x * this.x + this.y * this.y + this.z * this.z + (px * px + py * py + pz * pz) - 2 * (this.x * px + this.y * py + this.z * pz) - r2;
		var d = b * b - 4 * a * c;
		if(d < 0) {
			return -1;
		}
		d = Math.sqrt(d);
		var t = (-b + d) / (2 * a);
		return 1 - t;
	}
	,inFrustum: function(f,m) {
		if(m != null) {
			return this.inFrustumMatrix(f,m);
		}
		return f.hasSphere(this);
	}
	,inFrustumMatrix: function(f,m) {
		var oldX = this.x;
		var oldY = this.y;
		var oldZ = this.z;
		var oldR = this.r;
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		this.x = v_x;
		this.y = v_y;
		this.z = v_z;
		var v = null;
		if(v == null) {
			v = new h3d_Vector();
		}
		v.x = Math.sqrt(m._11 * m._11 + m._12 * m._12 + m._13 * m._13);
		v.y = Math.sqrt(m._21 * m._21 + m._22 * m._22 + m._23 * m._23);
		v.z = Math.sqrt(m._31 * m._31 + m._32 * m._32 + m._33 * m._33);
		if(m._11 * (m._22 * m._33 - m._23 * m._32) + m._12 * (m._23 * m._31 - m._21 * m._33) + m._13 * (m._21 * m._32 - m._22 * m._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		var scale = v;
		this.r *= Math.max(Math.max(scale.x,scale.y),scale.z);
		var res = f.hasSphere(this);
		this.x = oldX;
		this.y = oldY;
		this.z = oldZ;
		this.r = oldR;
		return res;
	}
	,__class__: h3d_col_Sphere
};
var h3d_impl_Feature = $hxEnums["h3d.impl.Feature"] = { __ename__ : true, __constructs__ : ["StandardDerivatives","FloatTextures","AllocDepthBuffer","HardwareAccelerated","MultipleRenderTargets","Queries","SRGBTextures","ShaderModel3","BottomLeftCoords","Wireframe","InstancedRendering"]
	,StandardDerivatives: {_hx_index:0,__enum__:"h3d.impl.Feature",toString:$estr}
	,FloatTextures: {_hx_index:1,__enum__:"h3d.impl.Feature",toString:$estr}
	,AllocDepthBuffer: {_hx_index:2,__enum__:"h3d.impl.Feature",toString:$estr}
	,HardwareAccelerated: {_hx_index:3,__enum__:"h3d.impl.Feature",toString:$estr}
	,MultipleRenderTargets: {_hx_index:4,__enum__:"h3d.impl.Feature",toString:$estr}
	,Queries: {_hx_index:5,__enum__:"h3d.impl.Feature",toString:$estr}
	,SRGBTextures: {_hx_index:6,__enum__:"h3d.impl.Feature",toString:$estr}
	,ShaderModel3: {_hx_index:7,__enum__:"h3d.impl.Feature",toString:$estr}
	,BottomLeftCoords: {_hx_index:8,__enum__:"h3d.impl.Feature",toString:$estr}
	,Wireframe: {_hx_index:9,__enum__:"h3d.impl.Feature",toString:$estr}
	,InstancedRendering: {_hx_index:10,__enum__:"h3d.impl.Feature",toString:$estr}
};
h3d_impl_Feature.__empty_constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries,h3d_impl_Feature.SRGBTextures,h3d_impl_Feature.ShaderModel3,h3d_impl_Feature.BottomLeftCoords,h3d_impl_Feature.Wireframe,h3d_impl_Feature.InstancedRendering];
var h3d_impl_RenderFlag = $hxEnums["h3d.impl.RenderFlag"] = { __ename__ : true, __constructs__ : ["CameraHandness"]
	,CameraHandness: {_hx_index:0,__enum__:"h3d.impl.RenderFlag",toString:$estr}
};
h3d_impl_RenderFlag.__empty_constructs__ = [h3d_impl_RenderFlag.CameraHandness];
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var h3d_impl_InputNames = function(names) {
	this.id = h3d_impl_InputNames.UID++;
	this.names = names;
};
$hxClasses["h3d.impl.InputNames"] = h3d_impl_InputNames;
h3d_impl_InputNames.__name__ = "h3d.impl.InputNames";
h3d_impl_InputNames.get = function(names) {
	var key = names.join("|");
	var _this = h3d_impl_InputNames.CACHE;
	var i = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(i == null) {
		i = new h3d_impl_InputNames(names.slice());
		var _this1 = h3d_impl_InputNames.CACHE;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,i);
		} else {
			_this1.h[key] = i;
		}
	}
	return i;
};
h3d_impl_InputNames.prototype = {
	__class__: h3d_impl_InputNames
};
var h3d_impl_Driver = function() { };
$hxClasses["h3d.impl.Driver"] = h3d_impl_Driver;
h3d_impl_Driver.__name__ = "h3d.impl.Driver";
h3d_impl_Driver.prototype = {
	hasFeature: function(f) {
		return false;
	}
	,setRenderFlag: function(r,value) {
	}
	,isSupportedFormat: function(fmt) {
		return false;
	}
	,isDisposed: function() {
		return true;
	}
	,begin: function(frame) {
	}
	,generateMipMaps: function(texture) {
		throw new js__$Boot_HaxeError("Mipmaps auto generation is not supported on this platform");
	}
	,clear: function(color,depth,stencil) {
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
	}
	,resize: function(width,height) {
	}
	,selectShader: function(shader) {
		return false;
	}
	,selectMaterial: function(pass) {
	}
	,uploadShaderBuffers: function(buffers,which) {
	}
	,selectBuffer: function(buffer) {
	}
	,draw: function(ibuf,startIndex,ntriangles) {
	}
	,setRenderZone: function(x,y,width,height) {
	}
	,setRenderTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
	}
	,setRenderTargets: function(textures) {
	}
	,allocDepthBuffer: function(b) {
		return null;
	}
	,disposeDepthBuffer: function(b) {
	}
	,getDefaultDepthBuffer: function() {
		return null;
	}
	,end: function() {
	}
	,setDebug: function(b) {
	}
	,allocTexture: function(t) {
		return null;
	}
	,allocIndexes: function(count,is32) {
		return null;
	}
	,allocVertexes: function(m) {
		return null;
	}
	,disposeTexture: function(t) {
	}
	,disposeIndexes: function(i) {
	}
	,disposeVertexes: function(v) {
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
	}
	,copyTexture: function(from,to) {
		return false;
	}
	,__class__: h3d_impl_Driver
};
var h3d_impl__$GlDriver_CompiledShader = function(s,vertex,shader) {
	this.s = s;
	this.vertex = vertex;
	this.shader = shader;
};
$hxClasses["h3d.impl._GlDriver.CompiledShader"] = h3d_impl__$GlDriver_CompiledShader;
h3d_impl__$GlDriver_CompiledShader.__name__ = "h3d.impl._GlDriver.CompiledShader";
h3d_impl__$GlDriver_CompiledShader.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledShader
};
var h3d_impl__$GlDriver_CompiledAttribute = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledAttribute"] = h3d_impl__$GlDriver_CompiledAttribute;
h3d_impl__$GlDriver_CompiledAttribute.__name__ = "h3d.impl._GlDriver.CompiledAttribute";
h3d_impl__$GlDriver_CompiledAttribute.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledAttribute
};
var h3d_impl__$GlDriver_CompiledProgram = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledProgram"] = h3d_impl__$GlDriver_CompiledProgram;
h3d_impl__$GlDriver_CompiledProgram.__name__ = "h3d.impl._GlDriver.CompiledProgram";
h3d_impl__$GlDriver_CompiledProgram.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledProgram
};
var h3d_impl_GlDriver = function(antiAlias) {
	if(antiAlias == null) {
		antiAlias = 0;
	}
	this.features = new haxe_ds_EnumValueMap();
	this.maxCompressedTexturesSupport = 0;
	this.rightHanded = false;
	this.firstShader = true;
	this.boundTextures = [];
	this.curTargets = [];
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	this.currentDivisor = _g;
	this.curColorMask = -1;
	this.lastActiveIndex = 0;
	this.curStEnabled = false;
	this.curStMaskBits = -1;
	this.curStOpBits = -1;
	this.curMatBits = -1;
	this.maxIdxCurAttribs = 0;
	this.curAttribs = [];
	this.canvas = hxd_Window.getInstance().canvas;
	var options = { alpha : false, stencil : true, antialias : antiAlias > 0};
	if(h3d_impl_GlDriver.ALLOW_WEBGL2) {
		this.gl = this.canvas.getContext("webgl2",options);
	}
	if(this.gl == null) {
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,options);
	}
	if(this.gl == null) {
		throw new js__$Boot_HaxeError("Could not acquire GL context");
	}
	if(typeof(WebGLDebugUtils) != "undefined") {
		this.gl = WebGLDebugUtils.makeDebugContext(this.gl);
		this.glDebug = true;
	}
	this.commonFB = this.gl.createFramebuffer();
	this.programs = new haxe_ds_IntMap();
	this.defStencil = new h3d_mat_Stencil();
	var v = this.gl.getParameter(7938);
	var reg = new EReg("ES ([0-9]+\\.[0-9]+)","");
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(1));
	}
	var reg1 = new EReg("[0-9]+\\.[0-9]+","");
	var v1 = this.gl.getParameter(35724);
	if(reg1.match(v1)) {
		this.glES = parseFloat(reg1.matched(0));
		this.shaderVersion = Math.round(parseFloat(reg1.matched(0)) * 100);
	}
	this.drawMode = 4;
	this.makeFeatures();
	if(this.hasFeature(h3d_impl_Feature.InstancedRendering) && this.glES < 3) {
		var extension = this.gl.getExtension("ANGLE_instanced_arrays");
		this.gl["vertexAttribDivisor"] = $bind(extension,extension.vertexAttribDivisorANGLE);
		this.gl["drawElementsInstanced"] = $bind(extension,extension.drawElementsInstancedANGLE);
	}
	hxsl_SharedShader.UNROLL_LOOPS = !this.hasFeature(h3d_impl_Feature.ShaderModel3);
};
$hxClasses["h3d.impl.GlDriver"] = h3d_impl_GlDriver;
h3d_impl_GlDriver.__name__ = "h3d.impl.GlDriver";
h3d_impl_GlDriver.__super__ = h3d_impl_Driver;
h3d_impl_GlDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	setRenderFlag: function(r,value) {
		this.rightHanded = value > 0;
	}
	,setDebug: function(d) {
		this.debug = d;
	}
	,begin: function(frame) {
		this.frame = frame;
		this.resetStream();
		this.gl.useProgram(null);
		this.curShader = null;
		this.curBuffer = null;
	}
	,getDriverName: function(details) {
		var render = this.gl.getParameter(7937);
		if(details) {
			render += " GLv" + Std.string(this.gl.getParameter(7938));
		} else {
			render = render.split("/").shift();
		}
		render = render.split("WebGL ").join("");
		return "OpenGL " + render;
	}
	,compileShader: function(glout,shader) {
		var type = shader.vertex ? 35633 : 35632;
		var s = this.gl.createShader(type);
		if(shader.code == null) {
			shader.code = glout.run(shader.data);
			shader.data.funs = null;
		}
		this.gl.shaderSource(s,shader.code);
		this.gl.compileShader(s);
		var log = this.gl.getShaderInfoLog(s);
		if(this.gl.getShaderParameter(s,35713) != 1) {
			var log1 = this.gl.getShaderInfoLog(s);
			var lid = Std.parseInt(HxOverrides.substr(log1,9,null));
			var line = lid == null ? null : shader.code.split("\n")[lid - 1];
			if(line == null) {
				line = "";
			} else {
				line = "(" + StringTools.trim(line) + ")";
			}
			var codeLines = shader.code.split("\n");
			var _g = 0;
			var _g1 = codeLines.length;
			while(_g < _g1) {
				var i = _g++;
				codeLines[i] = i + 1 + "\t" + codeLines[i];
			}
			throw new js__$Boot_HaxeError("An error occurred compiling the shaders: " + log1 + line + "\n\n" + codeLines.join("\n"));
		}
		return new h3d_impl__$GlDriver_CompiledShader(s,shader.vertex,shader);
	}
	,initShader: function(p,s,shader) {
		var prefix = s.vertex ? "vertex" : "fragment";
		s.globals = this.gl.getUniformLocation(p.p,prefix + "Globals");
		s.params = this.gl.getUniformLocation(p.p,prefix + "Params");
		s.textures = [];
		var index = 0;
		var curT = null;
		var mode = 0;
		var name = "";
		var t = shader.textures;
		while(t != null) {
			var tt = t.type;
			var tmp;
			if(tt._hx_index == 17) {
				var _g = tt.size;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				tt = hxsl_Type.TSampler2D;
			}
			if(tt != curT) {
				curT = tt;
				switch(tt._hx_index) {
				case 10:
					mode = 3553;
					name = "Textures";
					break;
				case 11:
					mode = 35866;
					name = "TexturesArray";
					break;
				case 12:
					mode = 34067;
					name = "TexturesCube";
					break;
				default:
					throw new js__$Boot_HaxeError("Unsupported texture type " + Std.string(tt));
				}
				index = 0;
			}
			s.textures.push({ u : this.gl.getUniformLocation(p.p,prefix + name + "[" + index + "]"), t : curT, mode : mode});
			++index;
			t = t.next;
		}
		if(shader.bufferCount > 0) {
			var _g1 = [];
			var _g11 = 0;
			var _g2 = shader.bufferCount;
			while(_g11 < _g2) {
				var i = _g11++;
				_g1.push(this.gl.getUniformBlockIndex(p.p,"uniform_buffer" + i));
			}
			s.buffers = _g1;
			var _g3 = 0;
			var _g4 = shader.bufferCount;
			while(_g3 < _g4) {
				var i1 = _g3++;
				this.gl.uniformBlockBinding(p.p,s.buffers[i1],i1);
			}
		}
	}
	,selectShader: function(shader) {
		var p = this.programs.h[shader.id];
		if(p == null) {
			p = new h3d_impl__$GlDriver_CompiledProgram();
			var glout = new hxsl_GlslOut();
			glout.glES = this.glES;
			glout.version = this.shaderVersion;
			p.vertex = this.compileShader(glout,shader.vertex);
			p.fragment = this.compileShader(glout,shader.fragment);
			p.p = this.gl.createProgram();
			this.gl.attachShader(p.p,p.vertex.s);
			this.gl.attachShader(p.p,p.fragment.s);
			var log = null;
			try {
				this.gl.linkProgram(p.p);
				if(this.gl.getProgramParameter(p.p,35714) != 1) {
					log = this.gl.getProgramInfoLog(p.p);
				}
			} catch( e ) {
				throw new js__$Boot_HaxeError("Shader linkage error: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e) + " (" + this.getDriverName(false) + ")");
			}
			this.gl.deleteShader(p.vertex.s);
			this.gl.deleteShader(p.fragment.s);
			if(log != null) {
				this.gl.deleteProgram(p.p);
				throw new js__$Boot_HaxeError("Program linkage failure: " + log + "\nVertex=\n" + shader.vertex.code + "\n\nFragment=\n" + shader.fragment.code);
			}
			this.firstShader = false;
			this.initShader(p,p.vertex,shader.vertex);
			this.initShader(p,p.fragment,shader.fragment);
			var attribNames = [];
			p.attribs = [];
			p.hasAttribIndex = [];
			p.stride = 0;
			var _g = 0;
			var _g1 = shader.vertex.data.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.kind._hx_index == 1) {
					var t = 5126;
					var size;
					var _g2 = v.type;
					switch(_g2._hx_index) {
					case 3:
						size = 1;
						break;
					case 5:
						var _g21 = _g2.t;
						var n = _g2.size;
						size = n;
						break;
					case 9:
						var n1 = _g2.size;
						t = 5120;
						size = n1;
						break;
					default:
						throw new js__$Boot_HaxeError("assert " + Std.string(v.type));
					}
					var index = this.gl.getAttribLocation(p.p,glout.varNames.h.hasOwnProperty(v.id) ? glout.varNames.h[v.id] : v.name);
					if(index < 0) {
						p.stride += size;
						continue;
					}
					var a = new h3d_impl__$GlDriver_CompiledAttribute();
					a.type = t;
					a.size = size;
					a.index = index;
					a.offset = p.stride;
					a.divisor = 0;
					if(v.qualifiers != null) {
						var _g4 = 0;
						var _g5 = v.qualifiers;
						while(_g4 < _g5.length) {
							var q = _g5[_g4];
							++_g4;
							if(q._hx_index == 9) {
								var n2 = q.v;
								a.divisor = n2;
							}
						}
					}
					p.attribs.push(a);
					p.hasAttribIndex[a.index] = true;
					attribNames.push(v.name);
					p.stride += size;
				}
			}
			p.inputs = h3d_impl_InputNames.get(attribNames);
			this.programs.h[shader.id] = p;
		}
		if(this.curShader == p) {
			return false;
		}
		this.gl.useProgram(p.p);
		var _g3 = 0;
		var _g11 = p.attribs;
		while(_g3 < _g11.length) {
			var a1 = _g11[_g3];
			++_g3;
			if(!this.curAttribs[a1.index]) {
				this.gl.enableVertexAttribArray(a1.index);
				this.curAttribs[a1.index] = true;
				if(this.maxIdxCurAttribs < a1.index) {
					this.maxIdxCurAttribs = a1.index;
				}
			}
		}
		var lastIdxCurAttribTrue = 0;
		var _g22 = 0;
		var _g31 = this.maxIdxCurAttribs + 1;
		while(_g22 < _g31) {
			var i = _g22++;
			if(this.curAttribs[i] && !p.hasAttribIndex[i]) {
				this.gl.disableVertexAttribArray(i);
				this.curAttribs[i] = false;
			} else if(this.curAttribs[i]) {
				lastIdxCurAttribTrue = i;
			}
		}
		this.maxIdxCurAttribs = lastIdxCurAttribTrue;
		this.curShader = p;
		this.curBuffer = null;
		var _g41 = 0;
		var _g51 = this.boundTextures.length;
		while(_g41 < _g51) {
			var i1 = _g41++;
			this.boundTextures[i1] = null;
		}
		return true;
	}
	,uploadShaderBuffers: function(buf,which) {
		this.uploadBuffer(this.curShader.vertex,buf.vertex,which);
		this.uploadBuffer(this.curShader.fragment,buf.fragment,which);
	}
	,uploadBuffer: function(s,buf,which) {
		switch(which) {
		case 0:
			if(s.globals != null) {
				var a = buf.globals.subarray(0,s.shader.globalsSize * 4);
				this.gl.uniform4fv(s.globals,a);
			}
			break;
		case 1:
			if(s.params != null) {
				var a1 = buf.params.subarray(0,s.shader.paramsSize * 4);
				this.gl.uniform4fv(s.params,a1);
			}
			break;
		case 2:
			var tcount = s.textures.length;
			var _g = 0;
			var _g1 = s.textures.length;
			while(_g < _g1) {
				var i = _g++;
				var t = buf.tex[i];
				var pt = s.textures[i];
				if(t == null || t.t == null && t.realloc == null) {
					switch(pt.t._hx_index) {
					case 10:
						var color = h3d_mat_Defaults.loadingTextureColor;
						t = h3d_mat_Texture.fromColor(color,(color >>> 24) / 255);
						break;
					case 12:
						t = h3d_mat_Texture.defaultCubeTexture();
						break;
					default:
						throw new js__$Boot_HaxeError("Missing texture");
					}
				}
				if(t != null && t.t == null && t.realloc != null) {
					t.alloc();
					t.realloc();
				}
				t.set_lastFrame(this.frame);
				if(pt.u == null) {
					continue;
				}
				var idx = s.vertex ? i : this.curShader.vertex.textures.length + i;
				if(this.boundTextures[idx] != t.t) {
					this.boundTextures[idx] = t.t;
					var mode = this.getBindType(t);
					if(mode != pt.mode) {
						throw new js__$Boot_HaxeError("Texture format mismatch: " + Std.string(t) + " should be " + Std.string(pt.t));
					}
					this.gl.activeTexture(33984 + idx);
					this.gl.uniform1i(pt.u,idx);
					this.gl.bindTexture(mode,t.t.t);
					this.lastActiveIndex = idx;
				}
				var mip = t.mipMap._hx_index;
				var filter = t.filter._hx_index;
				var wrap = t.wrap._hx_index;
				var bits = mip | filter << 3 | wrap << 6;
				if(bits != t.t.bits) {
					t.t.bits = bits;
					var flags = h3d_impl_GlDriver.TFILTERS[mip][filter];
					var mode1 = pt.mode;
					this.gl.texParameteri(mode1,10240,flags[0]);
					this.gl.texParameteri(mode1,10241,flags[1]);
					var w = h3d_impl_GlDriver.TWRAP[wrap];
					this.gl.texParameteri(mode1,10242,w);
					this.gl.texParameteri(mode1,10243,w);
				}
			}
			break;
		case 3:
			if(s.buffers != null) {
				var _g2 = 0;
				var _g11 = s.buffers.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					this.gl.bindBufferBase(35345,i1,buf.buffers[i1].buffer.vbuf.b);
				}
			}
			break;
		}
	}
	,selectMaterial: function(pass) {
		var bits = pass.bits;
		if(this.curTarget == null == this.rightHanded) {
			switch(pass.culling._hx_index) {
			case 1:
				bits = bits & -4 | 2;
				break;
			case 2:
				bits = bits & -4 | 1;
				break;
			default:
			}
		}
		this.selectMaterialBits(bits);
		if(this.curColorMask != pass.colorMask) {
			var m = pass.colorMask;
			this.gl.colorMask((m & 1) != 0,(m & 2) != 0,(m & 4) != 0,(m & 8) != 0);
			this.curColorMask = m;
		}
		var s = this.defStencil;
		if(pass.stencil == null) {
			if(this.curStEnabled) {
				this.gl.disable(2960);
				this.curStEnabled = false;
			}
		} else {
			s = pass.stencil;
			if(!this.curStEnabled) {
				this.gl.enable(2960);
				this.curStEnabled = true;
			}
		}
		this.selectStencilBits(s.opBits,s.maskBits);
	}
	,selectMaterialBits: function(bits) {
		var diff = bits ^ this.curMatBits;
		if(this.curMatBits < 0) {
			diff = -1;
		}
		if(diff == 0) {
			return;
		}
		var wireframe = (bits & 268435456) != 0;
		this.drawMode = wireframe ? 3 : 4;
		if((diff & 3) != 0) {
			var cull = bits & 3;
			if(cull == 0) {
				this.gl.disable(2884);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits & 3) == 0) {
					this.gl.enable(2884);
				}
				this.gl.cullFace(h3d_impl_GlDriver.FACES[cull]);
			}
		}
		if((diff & 4194240) != 0) {
			var csrc = bits >> 6 & 15;
			var cdst = bits >> 10 & 15;
			var asrc = bits >> 14 & 15;
			var adst = bits >> 18 & 15;
			if(csrc == asrc && cdst == adst) {
				if(csrc == 0 && cdst == 1) {
					this.gl.disable(3042);
				} else {
					if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
						this.gl.enable(3042);
					}
					this.gl.blendFunc(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst]);
				}
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
					this.gl.enable(3042);
				}
				this.gl.blendFuncSeparate(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst],h3d_impl_GlDriver.BLEND[asrc],h3d_impl_GlDriver.BLEND[adst]);
			}
		}
		if((diff & 264241152) != 0) {
			var cop = bits >> 22 & 7;
			var aop = bits >> 25 & 7;
			if(cop == aop) {
				this.gl.blendEquation(h3d_impl_GlDriver.OP[cop]);
			} else {
				this.gl.blendEquationSeparate(h3d_impl_GlDriver.OP[cop],h3d_impl_GlDriver.OP[aop]);
			}
		}
		if((diff & 4) != 0) {
			this.gl.depthMask((bits >> 2 & 1) != 0);
		}
		if((diff & 56) != 0) {
			var cmp = bits >> 3 & 7;
			if(cmp == 0) {
				this.gl.disable(2929);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 3 & 7) == 0) {
					this.gl.enable(2929);
				}
				this.gl.depthFunc(h3d_impl_GlDriver.COMPARE[cmp]);
			}
		}
		this.curMatBits = bits;
	}
	,selectStencilBits: function(opBits,maskBits) {
		var diffOp = opBits ^ this.curStOpBits;
		var diffMask = maskBits ^ this.curStMaskBits;
		if((diffOp | diffMask) == 0) {
			return;
		}
		if((diffOp & 4088) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.STENCIL_OP[opBits >> 6 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 9 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 3 & 7]);
		}
		if((diffOp & 16744448) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.STENCIL_OP[opBits >> 18 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 21 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 15 & 7]);
		}
		if((diffOp & 7 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.COMPARE[opBits & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffOp & 28672 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.COMPARE[opBits >> 12 & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffMask & 65280) != 0) {
			var w = maskBits >> 8 & 255;
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[2],w);
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[1],w);
		}
		this.curStOpBits = opBits;
		this.curStMaskBits = maskBits;
	}
	,clear: function(color,depth,stencil) {
		var bits = 0;
		if(color != null) {
			this.gl.colorMask(true,true,true,true);
			this.curColorMask = 15;
			this.gl.clearColor(color.x,color.y,color.z,color.w);
			bits |= 16384;
		}
		if(depth != null) {
			this.gl.depthMask(true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 4;
			}
			this.gl.clearDepth(depth);
			bits |= 256;
		}
		if(stencil != null) {
			this.selectStencilBits(this.defStencil.opBits,this.defStencil.maskBits);
			this.gl.clearStencil(stencil);
			bits |= 1024;
		}
		if(bits != 0) {
			this.gl.clear(bits);
		}
		if(this.curTarget != null) {
			this.curTarget.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		}
	}
	,resize: function(width,height) {
		if(this.canvas.style.width == "") {
			this.canvas.style.width = (width / window.devicePixelRatio | 0) + "px";
			this.canvas.style.height = (height / window.devicePixelRatio | 0) + "px";
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.bufferWidth = width;
		this.bufferHeight = height;
		this.gl.viewport(0,0,width,height);
		if(this.defaultDepth != null) {
			this.disposeDepthBuffer(this.defaultDepth);
			this.defaultDepth.width = this.bufferWidth;
			this.defaultDepth.height = this.bufferHeight;
			this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		}
	}
	,getChannels: function(t) {
		switch(t.internalFmt) {
		case 6407:
			return 6407;
		case 6408:
			return 6408;
		case 32856:
			return 32993;
		case 32857:
			return 6408;
		case 6403:case 33321:case 33325:case 33326:
			return 6403;
		case 33319:case 33323:case 33327:case 33328:
			return 33319;
		case 33777:case 33778:case 33779:
			return 6408;
		case 34837:case 34843:
			return 6407;
		case 35898:
			return 6407;
		case 35904:case 35905:
			return 6407;
		case 34836:case 34842:case 35906:case 35907:
			return 6408;
		default:
			throw new js__$Boot_HaxeError("Invalid format " + t.internalFmt);
		}
	}
	,isSupportedFormat: function(fmt) {
		switch(fmt._hx_index) {
		case 2:
			return true;
		case 3:case 4:
			return this.hasFeature(h3d_impl_Feature.FloatTextures);
		case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 16:case 17:
			return this.glES >= 3;
		case 14:case 15:
			return this.hasFeature(h3d_impl_Feature.SRGBTextures);
		case 18:
			var n = fmt.v;
			return n <= this.maxCompressedTexturesSupport;
		default:
			return false;
		}
	}
	,getBindType: function(t) {
		var isCube = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var isArray = (t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0;
		if(isCube) {
			return 34067;
		} else if(isArray) {
			return 35866;
		} else {
			return 3553;
		}
	}
	,allocTexture: function(t) {
		var _gthis = this;
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var tt = this.gl.createTexture();
		var bind = this.getBindType(t);
		var tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : bind};
		var _g = t.format;
		switch(_g._hx_index) {
		case 1:
			tt1.internalFmt = 32856;
			break;
		case 2:
			break;
		case 3:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.pixelFmt = 5131;
				tt1.internalFmt = 34842;
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 4:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.internalFmt = 34836;
				tt1.pixelFmt = 5126;
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 5:
			tt1.internalFmt = 33321;
			break;
		case 6:
			tt1.internalFmt = 33325;
			tt1.pixelFmt = 5131;
			break;
		case 7:
			tt1.internalFmt = 33326;
			tt1.pixelFmt = 5126;
			break;
		case 8:
			tt1.internalFmt = 33323;
			break;
		case 9:
			tt1.internalFmt = 33327;
			tt1.pixelFmt = 5131;
			break;
		case 10:
			tt1.internalFmt = 33328;
			tt1.pixelFmt = 5126;
			break;
		case 11:
			tt1.internalFmt = 6407;
			break;
		case 12:
			tt1.internalFmt = 34843;
			tt1.pixelFmt = 5131;
			break;
		case 13:
			tt1.internalFmt = 34837;
			tt1.pixelFmt = 5126;
			break;
		case 14:
			tt1.internalFmt = 35905;
			break;
		case 15:
			tt1.internalFmt = 35907;
			break;
		case 16:
			tt1.internalFmt = 32857;
			tt1.pixelFmt = 33640;
			break;
		case 17:
			tt1.internalFmt = 35898;
			tt1.pixelFmt = 35899;
			break;
		case 18:
			var n = _g.v;
			if(n <= this.maxCompressedTexturesSupport) {
				if((t.width & 3) != 0 || (t.height & 3) != 0) {
					throw new js__$Boot_HaxeError("Compressed texture " + Std.string(t) + " has size " + t.width + "x" + t.height + " - must be a multiple of 4");
				}
				switch(n) {
				case 1:
					tt1.internalFmt = 33777;
					break;
				case 2:
					tt1.internalFmt = 33778;
					break;
				case 3:
					tt1.internalFmt = 33779;
					break;
				default:
					throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
				}
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
		}
		t.set_lastFrame(this.frame);
		t.flags &= -1 - (1 << h3d_mat_TextureFlags.WasCleared._hx_index);
		this.gl.bindTexture(bind,tt1.t);
		var outOfMem = false;
		if((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			var _g2 = 0;
			while(_g2 < 6) {
				var i = _g2++;
				this.gl.texImage2D(h3d_impl_GlDriver.CUBE_FACES[i],0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
				var tmp;
				if(!h3d_impl_GlDriver.outOfMemoryCheck) {
					tmp = false;
				} else {
					var err = _gthis.gl.getError();
					if(err == 1285) {
						outOfMem = true;
						tmp = true;
					} else {
						if(err != 0) {
							throw new js__$Boot_HaxeError("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
						}
						tmp = false;
					}
				}
				if(tmp) {
					break;
				}
			}
		} else if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.texImage3D(35866,0,tt1.internalFmt,tt1.width,tt1.height,t.get_layerCount(),0,this.getChannels(tt1),tt1.pixelFmt,null);
			if(!(!h3d_impl_GlDriver.outOfMemoryCheck)) {
				var err1 = _gthis.gl.getError();
				if(err1 == 1285) {
					outOfMem = true;
				} else if(err1 != 0) {
					throw new js__$Boot_HaxeError("Failed to alloc texture " + Std.string(t.format) + "(error " + err1 + ")");
				}
			}
		} else {
			var _g21 = t.format;
			var tmp1;
			if(_g21._hx_index == 18) {
				var _g3 = _g21.v;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				this.gl.texImage2D(bind,0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
			}
			if(!(!h3d_impl_GlDriver.outOfMemoryCheck)) {
				var err2 = _gthis.gl.getError();
				if(err2 == 1285) {
					outOfMem = true;
				} else if(err2 != 0) {
					throw new js__$Boot_HaxeError("Failed to alloc texture " + Std.string(t.format) + "(error " + err2 + ")");
				}
			}
		}
		this.restoreBind();
		if(outOfMem) {
			this.gl.deleteTexture(tt1.t);
			return null;
		}
		return tt1;
	}
	,restoreBind: function() {
		var t = this.boundTextures[this.lastActiveIndex];
		if(t == null) {
			this.gl.bindTexture(3553,null);
		} else {
			this.gl.bindTexture(t.bind,t.t);
		}
	}
	,allocDepthBuffer: function(b) {
		var r = this.gl.createRenderbuffer();
		if(b.format == null) {
			b.format = this.glES >= 3 ? h3d_mat_DepthFormat.Depth24Stencil8 : h3d_mat_DepthFormat.Depth16;
		}
		var format;
		switch(b.format._hx_index) {
		case 0:
			format = 33189;
			break;
		case 1:
			if(this.glES >= 3) {
				format = 33190;
			} else {
				throw new js__$Boot_HaxeError("Unsupported depth format " + Std.string(b.format));
			}
			break;
		case 2:
			format = 34041;
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported depth format " + Std.string(b.format));
		}
		this.gl.bindRenderbuffer(36161,r);
		this.gl.renderbufferStorage(36161,format,b.width,b.height);
		this.gl.bindRenderbuffer(36161,null);
		return { r : r};
	}
	,disposeDepthBuffer: function(b) {
		if(b.b != null && b.b.r != null) {
			this.gl.deleteRenderbuffer(b.b.r);
			b.b = null;
		}
	}
	,getDefaultDepthBuffer: function() {
		if(this.defaultDepth != null) {
			return this.defaultDepth;
		}
		this.defaultDepth = new h3d_mat_DepthBuffer(0,0);
		this.defaultDepth.width = this.bufferWidth;
		this.defaultDepth.height = this.bufferHeight;
		this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		return this.defaultDepth;
	}
	,allocVertexes: function(m) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var b = this.gl.createBuffer();
		this.gl.bindBuffer(34962,b);
		if(m.size * m.stride == 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		this.gl.bufferData(34962,m.size * m.stride * 4,(m.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0 ? 35048 : 35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34962,null);
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, stride : m.stride};
	}
	,allocIndexes: function(count,is32) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var b = this.gl.createBuffer();
		var size = is32 ? 4 : 2;
		this.gl.bindBuffer(34963,b);
		this.gl.bufferData(34963,count * size,35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, is32 : is32};
	}
	,disposeTexture: function(t) {
		var tt = t.t;
		if(tt == null) {
			return;
		}
		t.t = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.boundTextures[i] == tt) {
				this.boundTextures[i] = null;
			}
		}
		this.gl.deleteTexture(tt.t);
	}
	,disposeIndexes: function(i) {
		this.gl.deleteBuffer(i.b);
	}
	,disposeVertexes: function(v) {
		this.gl.deleteBuffer(v.b);
	}
	,generateMipMaps: function(t) {
		var bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		this.gl.generateMipmap(bind);
		this.restoreBind();
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
		if(t.format != hxd_PixelFormat.RGBA || (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			var pixels = bmp.getPixels();
			this.uploadTexturePixels(t,pixels,mipLevel,side);
			pixels.dispose();
		} else {
			var img = bmp.ctx;
			this.gl.bindTexture(3553,t.t.t);
			this.gl.texImage2D(3553,mipLevel,t.t.internalFmt,this.getChannels(t.t),t.t.pixelFmt,img.getImageData(0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height));
			this.restoreBind();
		}
	}
	,resetStream: function() {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
		var cubic = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var bind = this.getBindType(t);
		if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			throw new js__$Boot_HaxeError("TODO:texImage3D");
		}
		var face = cubic ? h3d_impl_GlDriver.CUBE_FACES[side] : 3553;
		this.gl.bindTexture(bind,t.t.t);
		pixels.convert(t.format);
		pixels.setFlip(false);
		var bufLen = pixels.stride * pixels.height;
		var buffer;
		switch(t.format._hx_index) {
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 2);
			break;
		case 3:case 6:case 9:case 12:
			buffer = new Uint16Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 1);
			break;
		case 16:case 17:
			buffer = new Uint32Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 2);
			break;
		default:
			buffer = new Uint8Array(pixels.bytes.b.buffer,pixels.offset,bufLen);
		}
		var _g1 = t.format;
		var tmp;
		if(_g1._hx_index == 18) {
			var _g2 = _g1.v;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.gl.compressedTexImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,buffer);
		} else {
			this.gl.texImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,this.getChannels(t.t),t.t.pixelFmt,buffer);
		}
		t.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.restoreBind();
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
		var stride = v.stride;
		this.gl.bindBuffer(34962,v.b);
		var buf1 = buf.array;
		var sub = new Float32Array(buf1.buffer,bufPos * 4,vertexCount * stride);
		this.gl.bufferSubData(34962,startVertex * stride * 4,sub);
		this.gl.bindBuffer(34962,null);
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
		var bits = i.is32 ? 2 : 1;
		this.gl.bindBuffer(34963,i.b);
		var buf1 = new Uint16Array(buf);
		var sub = new Uint16Array(buf1.buffer,bufPos << bits,indiceCount);
		this.gl.bufferSubData(34963,startIndice << bits,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	,selectBuffer: function(v) {
		if(v == this.curBuffer) {
			return;
		}
		if(this.curBuffer != null && v.buffer == this.curBuffer.buffer && (v.buffer.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0 == ((this.curBuffer.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0)) {
			this.curBuffer = v;
			return;
		}
		if(this.curShader == null) {
			throw new js__$Boot_HaxeError("No shader selected");
		}
		this.curBuffer = v;
		var m = v.buffer.vbuf;
		if(m.stride < this.curShader.stride) {
			throw new js__$Boot_HaxeError("Buffer stride (" + m.stride + ") and shader stride (" + this.curShader.stride + ") mismatch");
		}
		this.gl.bindBuffer(34962,m.b);
		if((v.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0) {
			var _g = 0;
			var _g1 = this.curShader.attribs;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				var pos = a.offset;
				this.gl.vertexAttribPointer(a.index,a.size,a.type,false,m.stride * 4,pos * 4);
				if(this.currentDivisor[a.index] != a.divisor) {
					this.currentDivisor[a.index] = a.divisor;
					this.gl.vertexAttribDivisor(a.index,a.divisor);
				}
			}
		} else {
			var offset = 8;
			var _g2 = 0;
			var _g11 = this.curShader.attribs.length;
			while(_g2 < _g11) {
				var i = _g2++;
				var a1 = this.curShader.attribs[i];
				var pos1;
				var _g3 = this.curShader.inputs.names[i];
				switch(_g3) {
				case "normal":
					if(m.stride < 6) {
						throw new js__$Boot_HaxeError("Buffer is missing NORMAL data, set it to RAW format ?");
					}
					pos1 = 3;
					break;
				case "position":
					pos1 = 0;
					break;
				case "uv":
					if(m.stride < 8) {
						throw new js__$Boot_HaxeError("Buffer is missing UV data, set it to RAW format ?");
					}
					pos1 = 6;
					break;
				default:
					var s = _g3;
					pos1 = offset;
					offset += a1.size;
					if(offset > m.stride) {
						throw new js__$Boot_HaxeError("Buffer is missing '" + s + "' data, set it to RAW format ?");
					}
				}
				this.gl.vertexAttribPointer(a1.index,a1.size,a1.type,false,m.stride * 4,pos1 * 4);
				if(this.currentDivisor[a1.index] != a1.divisor) {
					this.currentDivisor[a1.index] = a1.divisor;
					this.gl.vertexAttribDivisor(a1.index,a1.divisor);
				}
			}
		}
	}
	,draw: function(ibuf,startIndex,ntriangles) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.b);
		}
		if(ibuf.is32) {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5125,startIndex * 4);
		} else {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5123,startIndex * 2);
		}
	}
	,end: function() {
	}
	,isDisposed: function() {
		return this.gl.isContextLost();
	}
	,setRenderZone: function(x,y,width,height) {
		if(x == 0 && y == 0 && width < 0 && height < 0) {
			this.gl.disable(3089);
		} else {
			this.gl.enable(3089);
			if(this.curTarget == null) {
				y = this.bufferHeight - (y + height);
			}
			this.gl.scissor(x,y,width,height);
		}
	}
	,setDrawBuffers: function(k) {
		if(this.glES >= 3) {
			this.gl.drawBuffers(h3d_impl_GlDriver.CBUFFERS[k]);
		} else if(this.mrtExt != null) {
			this.mrtExt.drawBuffersWEBGL(h3d_impl_GlDriver.CBUFFERS[k]);
		}
	}
	,unbindTargets: function() {
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) {
				this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
				this.curTargets[this.numTargets] = null;
			}
			this.setDrawBuffers(1);
		}
	}
	,setRenderTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		this.unbindTargets();
		this.curTarget = tex;
		if(tex == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.viewport(0,0,this.bufferWidth,this.bufferHeight);
			return;
		}
		if(tex.depthBuffer != null && (tex.depthBuffer.width != tex.width || tex.depthBuffer.height != tex.height)) {
			throw new js__$Boot_HaxeError("Invalid depth buffer size : does not match render target size");
		}
		if(mipLevel > 0 && this.glES == 1) {
			throw new js__$Boot_HaxeError("Cannot render to mipLevel in WebGL1, use upload() instead");
		}
		if(tex.t == null) {
			tex.alloc();
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			var bind = this.getBindType(tex);
			this.gl.bindTexture(bind,tex.t.t);
			this.gl.generateMipmap(bind);
			this.restoreBind();
		}
		tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		tex.set_lastFrame(this.frame);
		this.curTargetLayer = layer;
		this.curTargetMip = mipLevel;
		this.gl.bindFramebuffer(36160,this.commonFB);
		if((tex.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.framebufferTextureLayer(36160,36064,tex.t.t,mipLevel,layer);
		} else {
			this.gl.framebufferTexture2D(36160,36064,(tex.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0 ? h3d_impl_GlDriver.CUBE_FACES[layer] : 3553,tex.t.t,mipLevel);
		}
		if(tex.depthBuffer != null) {
			this.gl.framebufferRenderbuffer(36160,36096,36161,tex.depthBuffer.b.r);
			this.gl.framebufferRenderbuffer(36160,36128,36161,tex.depthBuffer.hasStencil() ? tex.depthBuffer.b.r : null);
		} else {
			this.gl.framebufferRenderbuffer(36160,36096,36161,null);
			this.gl.framebufferRenderbuffer(36160,36128,36161,null);
		}
		this.gl.viewport(0,0,tex.width >> mipLevel,tex.height >> mipLevel);
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
		if(this.glDebug) {
			var code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw new js__$Boot_HaxeError("Invalid frame buffer: " + code);
			}
		}
	}
	,setRenderTargets: function(textures) {
		this.unbindTargets();
		this.setRenderTarget(textures[0]);
		if(textures.length < 2) {
			return;
		}
		this.numTargets = textures.length;
		var _g = 1;
		var _g1 = textures.length;
		while(_g < _g1) {
			var i = _g++;
			var tex = textures[i];
			if(tex.t == null) {
				tex.alloc();
			}
			this.gl.framebufferTexture2D(36160,36064 + i,3553,tex.t.t,0);
			this.curTargets[i] = tex;
			tex.set_lastFrame(this.frame);
			tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		}
		this.setDrawBuffers(textures.length);
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		var ready = false;
		if(window.document.readyState == "complete") {
			var f = onCreate;
			haxe_Timer.delay(function() {
				f(false);
			},1);
		} else {
			window.addEventListener("load",function(_) {
				if(!ready) {
					ready = true;
					onCreate(false);
				}
			});
		}
	}
	,hasFeature: function(f) {
		return this.features.get(f);
	}
	,makeFeatures: function() {
		var _g = 0;
		var _g1 = h3d_impl_Feature.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.features.set(f,this.checkFeature(f));
		}
		if(this.gl.getExtension("WEBGL_compressed_texture_s3tc") != null) {
			this.maxCompressedTexturesSupport = 3;
		}
	}
	,checkFeature: function(f) {
		switch(f._hx_index) {
		case 0:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("OES_standard_derivatives") != null;
			}
			break;
		case 1:
			if(this.glES >= 3) {
				if(this.gl.getExtension("EXT_color_buffer_float") != null) {
					return this.gl.getExtension("OES_texture_float_linear") != null;
				} else {
					return false;
				}
			} else if(this.gl.getExtension("OES_texture_float") != null && this.gl.getExtension("OES_texture_float_linear") != null && this.gl.getExtension("OES_texture_half_float") != null) {
				return this.gl.getExtension("OES_texture_half_float_linear") != null;
			} else {
				return false;
			}
			break;
		case 4:
			if(this.glES >= 3) {
				return true;
			} else if(this.mrtExt == null) {
				return (this.mrtExt = this.gl.getExtension("WEBGL_draw_buffers")) != null;
			} else {
				return true;
			}
			break;
		case 6:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("EXT_sRGB") != null;
			}
			break;
		case 7:
			if(this.glES >= 3) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:case 3:case 8:case 9:
			return true;
		case 10:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("ANGLE_instanced_arrays") != null;
			}
			break;
		default:
			return false;
		}
	}
	,__class__: h3d_impl_GlDriver
});
var h3d_impl__$ManagedBuffer_FreeCell = function(pos,count,next) {
	this.pos = pos;
	this.count = count;
	this.next = next;
};
$hxClasses["h3d.impl._ManagedBuffer.FreeCell"] = h3d_impl__$ManagedBuffer_FreeCell;
h3d_impl__$ManagedBuffer_FreeCell.__name__ = "h3d.impl._ManagedBuffer.FreeCell";
h3d_impl__$ManagedBuffer_FreeCell.prototype = {
	__class__: h3d_impl__$ManagedBuffer_FreeCell
};
var h3d_impl_ManagedBuffer = function(stride,size,flags) {
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	this.size = size;
	this.stride = stride;
	this.freeList = new h3d_impl__$ManagedBuffer_FreeCell(0,size,null);
	this.mem = h3d_Engine.CURRENT.mem;
	this.mem.allocManaged(this);
};
$hxClasses["h3d.impl.ManagedBuffer"] = h3d_impl_ManagedBuffer;
h3d_impl_ManagedBuffer.__name__ = "h3d.impl.ManagedBuffer";
h3d_impl_ManagedBuffer.prototype = {
	uploadVertexBuffer: function(start,vertices,buf,bufPos) {
		if(bufPos == null) {
			bufPos = 0;
		}
		this.mem.driver.uploadVertexBuffer(this.vbuf,start,vertices,buf,bufPos);
	}
	,allocPosition: function(nvert,align) {
		var free = this.freeList;
		while(free != null) {
			if(free.count >= nvert) {
				var d = (align - free.pos % align) % align;
				if(d == 0) {
					break;
				}
				if(free.count >= nvert + d) {
					free.next = new h3d_impl__$ManagedBuffer_FreeCell(free.pos + d,free.count - d,free.next);
					free.count = d;
					free = free.next;
					break;
				}
			}
			free = free.next;
		}
		if(free == null) {
			return -1;
		}
		var pos = free.pos;
		free.pos += nvert;
		free.count -= nvert;
		return pos;
	}
	,allocBuffer: function(b) {
		var align = (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 4 : (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 3 : 1;
		var p = this.allocPosition(b.vertices,align);
		if(p < 0) {
			return false;
		}
		b.position = p;
		b.buffer = this;
		return true;
	}
	,freeBuffer: function(b) {
		var prev = null;
		var f = this.freeList;
		var nvert = b.vertices;
		var end = b.position + nvert;
		while(f != null) {
			if(f.pos == end) {
				f.pos -= nvert;
				f.count += nvert;
				if(prev != null && prev.pos + prev.count == f.pos) {
					prev.count += f.count;
					prev.next = f.next;
				}
				nvert = 0;
				break;
			}
			if(f.pos > end) {
				if(prev != null && prev.pos + prev.count == b.position) {
					prev.count += nvert;
				} else {
					var n = new h3d_impl__$ManagedBuffer_FreeCell(b.position,nvert,f);
					if(prev == null) {
						this.freeList = n;
					} else {
						prev.next = n;
					}
				}
				nvert = 0;
				break;
			}
			prev = f;
			f = f.next;
		}
		if(nvert != 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		if(this.freeList.count == this.size && (this.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			this.dispose();
		}
	}
	,dispose: function() {
		this.mem.freeManaged(this);
	}
	,__class__: h3d_impl_ManagedBuffer
};
var h3d_impl_MemoryManager = function(driver) {
	this.bufferCount = 0;
	this.texMemory = 0;
	this.usedMemory = 0;
	this.driver = driver;
};
$hxClasses["h3d.impl.MemoryManager"] = h3d_impl_MemoryManager;
h3d_impl_MemoryManager.__name__ = "h3d.impl.MemoryManager";
h3d_impl_MemoryManager.prototype = {
	init: function() {
		this.indexes = [];
		this.textures = [];
		this.buffers = [];
		this.depths = [];
		this.initIndexes();
	}
	,initIndexes: function() {
		var this1 = new Array(0);
		var indices = this1;
		var _g = 0;
		while(_g < 65533) {
			var i = _g++;
			indices.push(i);
		}
		this.triIndexes = h3d_Indexes.alloc(indices);
		var this2 = new Array(0);
		var indices1 = this2;
		var p = 0;
		var _g1 = 0;
		var _g2 = 16383;
		while(_g1 < _g2) {
			var i1 = _g1++;
			var k = i1 << 2;
			indices1.push(k);
			indices1.push(k + 1);
			indices1.push(k + 2);
			indices1.push(k + 2);
			indices1.push(k + 1);
			indices1.push(k + 3);
		}
		indices1.push(65533);
		this.quadIndexes = h3d_Indexes.alloc(indices1);
	}
	,garbage: function() {
	}
	,cleanManagedBuffers: function() {
		var _g = 1;
		var _g1 = this.buffers.length;
		while(_g < _g1) {
			var i = _g++;
			var b = this.buffers[i];
			var prev = null;
			while(b != null) {
				if(b.freeList.count == b.size) {
					b.dispose();
					if(prev == null) {
						this.buffers[i] = b.next;
					} else {
						prev.next = b.next;
					}
				} else {
					prev = b;
				}
				b = b.next;
			}
		}
	}
	,allocManaged: function(m) {
		if(m.vbuf != null) {
			return;
		}
		var mem = m.size * m.stride * 4;
		if(mem == 0) {
			return;
		}
		while(this.usedMemory + mem > 4294967296. || this.bufferCount >= 65536 || (m.vbuf = this.driver.allocVertexes(m)) == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			var size = this.usedMemory - this.freeMemorySize();
			this.garbage();
			this.cleanManagedBuffers();
			if(this.usedMemory - this.freeMemorySize() == size) {
				if(this.bufferCount >= 65536) {
					throw new js__$Boot_HaxeError("Too many buffers");
				}
				throw new js__$Boot_HaxeError("Memory full (" + Math.ceil(size / 1024) + " KB," + this.bufferCount + " buffers)");
			}
		}
		this.usedMemory += mem;
		this.bufferCount++;
	}
	,freeManaged: function(m) {
		if(m.vbuf == null) {
			return;
		}
		this.driver.disposeVertexes(m.vbuf);
		m.vbuf = null;
		this.usedMemory -= m.size * m.stride * 4;
		this.bufferCount--;
		if((m.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			var c = this.buffers[0];
			var prev = null;
			while(c != null) {
				if(c == m) {
					if(prev == null) {
						this.buffers[0] = m.next;
					} else {
						prev.next = m.next;
					}
					break;
				}
				prev = c;
				c = c.next;
			}
		}
	}
	,allocBuffer: function(b,stride) {
		var max = (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 65532 : (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 65533 : 65534;
		if(b.vertices > max) {
			if(max == 65534) {
				throw new js__$Boot_HaxeError("Cannot split buffer with " + b.vertices + " vertices if it's not Quads/Triangles");
			}
			var rem = b.vertices - max;
			b.vertices = max;
			this.allocBuffer(b,stride);
			var n = b;
			while(n.next != null) n = n.next;
			var flags = [];
			var _g = 0;
			var _g1 = h3d_impl_MemoryManager.ALL_FLAGS;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if((b.flags & 1 << f._hx_index) != 0) {
					flags.push(f);
				}
			}
			n.next = new h3d_Buffer(rem,stride,flags);
			return;
		}
		if((b.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			var flags1 = null;
			if((b.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0) {
				if(flags1 == null) {
					flags1 = [];
				}
				flags1.push(h3d_BufferFlag.Dynamic);
			}
			if((b.flags & 1 << h3d_BufferFlag.UniformBuffer._hx_index) != 0) {
				if(flags1 == null) {
					flags1 = [];
				}
				flags1.push(h3d_BufferFlag.UniformBuffer);
			}
			var m = new h3d_impl_ManagedBuffer(stride,b.vertices,flags1);
			m.next = this.buffers[0];
			this.buffers[0] = m;
			if(!m.allocBuffer(b)) {
				throw new js__$Boot_HaxeError("assert");
			}
			return;
		}
		var m1 = this.buffers[stride];
		var prev = null;
		while(m1 != null) {
			if(m1.allocBuffer(b)) {
				return;
			}
			prev = m1;
			m1 = m1.next;
		}
		var align = (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 3 : (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 4 : 0;
		if(m1 == null && align > 0) {
			var total = b.vertices;
			var size = total;
			while(size > 2048) {
				m1 = this.buffers[stride];
				size >>= 1;
				size -= size % align;
				b.vertices = size;
				while(m1 != null) {
					if(m1.allocBuffer(b)) {
						var flags2 = [];
						var _g2 = 0;
						var _g11 = h3d_impl_MemoryManager.ALL_FLAGS;
						while(_g2 < _g11.length) {
							var f1 = _g11[_g2];
							++_g2;
							if((b.flags & 1 << f1._hx_index) != 0) {
								flags2.push(f1);
							}
						}
						b.next = new h3d_Buffer(total - size,stride,flags2);
						return;
					}
					m1 = m1.next;
				}
			}
			b.vertices = total;
		}
		m1 = new h3d_impl_ManagedBuffer(stride,65533,[h3d_BufferFlag.Managed]);
		if(prev == null) {
			this.buffers[stride] = m1;
		} else {
			prev.next = m1;
		}
		if(!m1.allocBuffer(b)) {
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,deleteIndexes: function(i) {
		HxOverrides.remove(this.indexes,i);
		this.driver.disposeIndexes(i.ibuf);
		i.ibuf = null;
		this.usedMemory -= i.count * (i.is32 ? 4 : 2);
	}
	,allocIndexes: function(i) {
		i.ibuf = this.driver.allocIndexes(i.count,i.is32);
		this.indexes.push(i);
		this.usedMemory += i.count * (i.is32 ? 4 : 2);
	}
	,bpp: function(t) {
		return 4;
	}
	,cleanTextures: function(force) {
		if(force == null) {
			force = true;
		}
		this.textures.sort($bind(this,this.sortByLRU));
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.realloc == null || t.t == null && t.realloc == null) {
				continue;
			}
			if(force || t.get_lastFrame() < hxd_Timer.frameCount - 3600) {
				t.dispose();
				return true;
			}
		}
		return false;
	}
	,sortByLRU: function(t1,t2) {
		return t1.get_lastFrame() - t2.get_lastFrame();
	}
	,deleteTexture: function(t) {
		if(!HxOverrides.remove(this.textures,t)) {
			return;
		}
		this.driver.disposeTexture(t);
		this.texMemory -= t.width * t.height * this.bpp(t);
	}
	,allocTexture: function(t) {
		var free = this.cleanTextures(false);
		t.t = this.driver.allocTexture(t);
		if(t.t == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			if(!this.cleanTextures(true)) {
				throw new js__$Boot_HaxeError("Maximum texture memory reached");
			}
			this.allocTexture(t);
			return;
		}
		this.textures.push(t);
		this.texMemory += t.width * t.height * this.bpp(t);
	}
	,allocDepth: function(b) {
		var free = this.cleanTextures(false);
		b.b = this.driver.allocDepthBuffer(b);
		if(b.b == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			if(!this.cleanTextures(true)) {
				throw new js__$Boot_HaxeError("Maximum texture memory reached");
			}
			this.allocDepth(b);
			return;
		}
		this.depths.push(b);
		this.texMemory += b.width * b.height * 4;
	}
	,deleteDepth: function(b) {
		if(!HxOverrides.remove(this.depths,b)) {
			return;
		}
		this.driver.disposeDepthBuffer(b);
		this.texMemory -= b.width * b.height * 4;
	}
	,onContextLost: function() {
		this.dispose();
		this.initIndexes();
	}
	,dispose: function() {
		if(this.triIndexes != null) {
			this.triIndexes.dispose();
		}
		if(this.quadIndexes != null) {
			this.quadIndexes.dispose();
		}
		this.triIndexes = null;
		this.quadIndexes = null;
		var _g = 0;
		var _g1 = this.textures.slice();
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		var _g2 = 0;
		var _g3 = this.depths.slice();
		while(_g2 < _g3.length) {
			var b = _g3[_g2];
			++_g2;
			b.dispose();
		}
		var _g4 = 0;
		var _g5 = this.buffers.slice();
		while(_g4 < _g5.length) {
			var b1 = _g5[_g4];
			++_g4;
			var b2 = b1;
			while(b2 != null) {
				b2.dispose();
				b2 = b2.next;
			}
		}
		var _g6 = 0;
		var _g7 = this.indexes.slice();
		while(_g6 < _g7.length) {
			var i = _g7[_g6];
			++_g6;
			i.dispose();
		}
		this.buffers = [];
		this.indexes = [];
		this.textures = [];
		this.bufferCount = 0;
		this.usedMemory = 0;
		this.texMemory = 0;
	}
	,freeMemorySize: function() {
		var size = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var b1 = b;
			while(b1 != null) {
				var free = b1.freeList;
				while(free != null) {
					size += free.count * b1.stride * 4;
					free = free.next;
				}
				b1 = b1.next;
			}
		}
		return size;
	}
	,__class__: h3d_impl_MemoryManager
};
var h3d_impl_TextureCache = function(ctx) {
	this.position = 0;
	this.ctx = ctx;
	this.cache = [];
	var engine = h3d_Engine.CURRENT;
	this.defaultFormat = h3d_mat_Texture.nativeFormat;
	this.defaultDepthBuffer = h3d_mat_DepthBuffer.getDefault();
};
$hxClasses["h3d.impl.TextureCache"] = h3d_impl_TextureCache;
h3d_impl_TextureCache.__name__ = "h3d.impl.TextureCache";
h3d_impl_TextureCache.prototype = {
	begin: function() {
		while(this.cache.length > this.position) {
			var t = this.cache.pop();
			if(t != null) {
				t.dispose();
			}
		}
		this.position = 0;
	}
	,lookupTarget: function(name,width,height,format,isCube) {
		var t = this.cache[this.position];
		var _g = this.position + 1;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var t2 = this.cache[i];
			if(t2 != null && !(t2.t == null && t2.realloc == null) && t2.width == width && t2.height == height && t2.format == format && isCube == ((t2.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0)) {
				this.cache[this.position] = t2;
				this.cache[i] = t;
				return t2;
			}
		}
		if(t != null && t.name == name) {
			t.dispose();
			t = null;
		}
		var flags = [h3d_mat_TextureFlags.Target];
		if(isCube) {
			flags.push(h3d_mat_TextureFlags.Cube);
		}
		var newt = new h3d_mat_Texture(width,height,flags,format);
		if(t != null) {
			this.cache.splice(this.position,0,newt);
		} else {
			this.cache[this.position] = newt;
		}
		return newt;
	}
	,allocTarget: function(name,width,height,defaultDepth,format,isCube) {
		if(isCube == null) {
			isCube = false;
		}
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		var t = this.cache[this.position];
		if(format == null) {
			format = this.defaultFormat;
		}
		if(t == null || t.t == null && t.realloc == null || t.width != width || t.height != height || t.format != format || isCube != ((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0)) {
			t = this.lookupTarget(name,width,height,format,isCube);
		}
		t.depthBuffer = defaultDepth ? this.defaultDepthBuffer : null;
		t.setName(name);
		this.position++;
		return t;
	}
	,__class__: h3d_impl_TextureCache
};
var hxd_impl_AnyProps = function() { };
$hxClasses["hxd.impl.AnyProps"] = hxd_impl_AnyProps;
hxd_impl_AnyProps.__name__ = "hxd.impl.AnyProps";
hxd_impl_AnyProps.prototype = {
	set_props: function(p) {
		this.props = p;
		this.refreshProps();
		return p;
	}
	,getDefaultProps: function(kind) {
		return { };
	}
	,refreshProps: function() {
	}
	,__class__: hxd_impl_AnyProps
};
var h3d_mat_BaseMaterial = function(shader) {
	if(shader != null) {
		this.addPass(new h3d_mat_Pass("default",null)).addShader(shader);
	}
};
$hxClasses["h3d.mat.BaseMaterial"] = h3d_mat_BaseMaterial;
h3d_mat_BaseMaterial.__name__ = "h3d.mat.BaseMaterial";
h3d_mat_BaseMaterial.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_BaseMaterial.__super__ = hxd_impl_AnyProps;
h3d_mat_BaseMaterial.prototype = $extend(hxd_impl_AnyProps.prototype,{
	addPass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			prev = cur;
			cur = cur.nextPass;
		}
		if(prev == null) {
			this.passes = p;
		} else {
			prev.nextPass = p;
		}
		p.nextPass = null;
		return p;
	}
	,removePass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			if(cur == p) {
				if(prev == null) {
					this.passes = p.nextPass;
				} else {
					prev.nextPass = p.nextPass;
				}
				p.nextPass = null;
				return true;
			}
			prev = cur;
			cur = cur.nextPass;
		}
		return false;
	}
	,getPass: function(name) {
		var p = this.passes;
		while(p != null) {
			if(p.name == name) {
				return p;
			}
			p = p.nextPass;
		}
		return null;
	}
	,__class__: h3d_mat_BaseMaterial
});
var h3d_mat_Face = $hxEnums["h3d.mat.Face"] = { __ename__ : true, __constructs__ : ["None","Back","Front","Both"]
	,None: {_hx_index:0,__enum__:"h3d.mat.Face",toString:$estr}
	,Back: {_hx_index:1,__enum__:"h3d.mat.Face",toString:$estr}
	,Front: {_hx_index:2,__enum__:"h3d.mat.Face",toString:$estr}
	,Both: {_hx_index:3,__enum__:"h3d.mat.Face",toString:$estr}
};
h3d_mat_Face.__empty_constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
var h3d_mat_Blend = $hxEnums["h3d.mat.Blend"] = { __ename__ : true, __constructs__ : ["One","Zero","SrcAlpha","SrcColor","DstAlpha","DstColor","OneMinusSrcAlpha","OneMinusSrcColor","OneMinusDstAlpha","OneMinusDstColor","ConstantColor","ConstantAlpha","OneMinusConstantColor","OneMinusConstantAlpha","SrcAlphaSaturate"]
	,One: {_hx_index:0,__enum__:"h3d.mat.Blend",toString:$estr}
	,Zero: {_hx_index:1,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlpha: {_hx_index:2,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcColor: {_hx_index:3,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstAlpha: {_hx_index:4,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstColor: {_hx_index:5,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcAlpha: {_hx_index:6,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcColor: {_hx_index:7,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstAlpha: {_hx_index:8,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstColor: {_hx_index:9,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantColor: {_hx_index:10,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantAlpha: {_hx_index:11,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantColor: {_hx_index:12,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantAlpha: {_hx_index:13,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlphaSaturate: {_hx_index:14,__enum__:"h3d.mat.Blend",toString:$estr}
};
h3d_mat_Blend.__empty_constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
var h3d_mat_Compare = $hxEnums["h3d.mat.Compare"] = { __ename__ : true, __constructs__ : ["Always","Never","Equal","NotEqual","Greater","GreaterEqual","Less","LessEqual"]
	,Always: {_hx_index:0,__enum__:"h3d.mat.Compare",toString:$estr}
	,Never: {_hx_index:1,__enum__:"h3d.mat.Compare",toString:$estr}
	,Equal: {_hx_index:2,__enum__:"h3d.mat.Compare",toString:$estr}
	,NotEqual: {_hx_index:3,__enum__:"h3d.mat.Compare",toString:$estr}
	,Greater: {_hx_index:4,__enum__:"h3d.mat.Compare",toString:$estr}
	,GreaterEqual: {_hx_index:5,__enum__:"h3d.mat.Compare",toString:$estr}
	,Less: {_hx_index:6,__enum__:"h3d.mat.Compare",toString:$estr}
	,LessEqual: {_hx_index:7,__enum__:"h3d.mat.Compare",toString:$estr}
};
h3d_mat_Compare.__empty_constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
var h3d_mat_StencilOp = $hxEnums["h3d.mat.StencilOp"] = { __ename__ : true, __constructs__ : ["Keep","Zero","Replace","Increment","IncrementWrap","Decrement","DecrementWrap","Invert"]
	,Keep: {_hx_index:0,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Zero: {_hx_index:1,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Replace: {_hx_index:2,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Increment: {_hx_index:3,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,IncrementWrap: {_hx_index:4,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Decrement: {_hx_index:5,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,DecrementWrap: {_hx_index:6,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Invert: {_hx_index:7,__enum__:"h3d.mat.StencilOp",toString:$estr}
};
h3d_mat_StencilOp.__empty_constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
var h3d_mat_MipMap = $hxEnums["h3d.mat.MipMap"] = { __ename__ : true, __constructs__ : ["None","Nearest","Linear"]
	,None: {_hx_index:0,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Nearest: {_hx_index:1,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Linear: {_hx_index:2,__enum__:"h3d.mat.MipMap",toString:$estr}
};
h3d_mat_MipMap.__empty_constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
var h3d_mat_Filter = $hxEnums["h3d.mat.Filter"] = { __ename__ : true, __constructs__ : ["Nearest","Linear"]
	,Nearest: {_hx_index:0,__enum__:"h3d.mat.Filter",toString:$estr}
	,Linear: {_hx_index:1,__enum__:"h3d.mat.Filter",toString:$estr}
};
h3d_mat_Filter.__empty_constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
var h3d_mat_Wrap = $hxEnums["h3d.mat.Wrap"] = { __ename__ : true, __constructs__ : ["Clamp","Repeat"]
	,Clamp: {_hx_index:0,__enum__:"h3d.mat.Wrap",toString:$estr}
	,Repeat: {_hx_index:1,__enum__:"h3d.mat.Wrap",toString:$estr}
};
h3d_mat_Wrap.__empty_constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
var h3d_mat_Operation = $hxEnums["h3d.mat.Operation"] = { __ename__ : true, __constructs__ : ["Add","Sub","ReverseSub","Min","Max"]
	,Add: {_hx_index:0,__enum__:"h3d.mat.Operation",toString:$estr}
	,Sub: {_hx_index:1,__enum__:"h3d.mat.Operation",toString:$estr}
	,ReverseSub: {_hx_index:2,__enum__:"h3d.mat.Operation",toString:$estr}
	,Min: {_hx_index:3,__enum__:"h3d.mat.Operation",toString:$estr}
	,Max: {_hx_index:4,__enum__:"h3d.mat.Operation",toString:$estr}
};
h3d_mat_Operation.__empty_constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub,h3d_mat_Operation.Min,h3d_mat_Operation.Max];
var h3d_mat_TextureFlags = $hxEnums["h3d.mat.TextureFlags"] = { __ename__ : true, __constructs__ : ["Target","Cube","MipMapped","ManualMipMapGen","IsNPOT","NoAlloc","Dynamic","AlphaPremultiplied","WasCleared","Loading","Serialize","IsArray"]
	,Target: {_hx_index:0,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Cube: {_hx_index:1,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,MipMapped: {_hx_index:2,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,ManualMipMapGen: {_hx_index:3,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsNPOT: {_hx_index:4,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,NoAlloc: {_hx_index:5,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Dynamic: {_hx_index:6,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AlphaPremultiplied: {_hx_index:7,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,WasCleared: {_hx_index:8,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Loading: {_hx_index:9,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Serialize: {_hx_index:10,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsArray: {_hx_index:11,__enum__:"h3d.mat.TextureFlags",toString:$estr}
};
h3d_mat_TextureFlags.__empty_constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize,h3d_mat_TextureFlags.IsArray];
var h3d_mat_Defaults = function() { };
$hxClasses["h3d.mat.Defaults"] = h3d_mat_Defaults;
h3d_mat_Defaults.__name__ = "h3d.mat.Defaults";
h3d_mat_Defaults.get_shadowShader = function() {
	var s = h3d_mat_Defaults.shadowShader;
	if(s == null) {
		s = new h3d_shader_Shadow();
		h3d_mat_Defaults.set_shadowShader(s);
		h3d_mat_Defaults.shadowShader.setPriority(-1);
	}
	return s;
};
h3d_mat_Defaults.set_shadowShader = function(s) {
	return h3d_mat_Defaults.shadowShader = s;
};
var h3d_mat_DepthFormat = $hxEnums["h3d.mat.DepthFormat"] = { __ename__ : true, __constructs__ : ["Depth16","Depth24","Depth24Stencil8"]
	,Depth16: {_hx_index:0,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24: {_hx_index:1,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24Stencil8: {_hx_index:2,__enum__:"h3d.mat.DepthFormat",toString:$estr}
};
h3d_mat_DepthFormat.__empty_constructs__ = [h3d_mat_DepthFormat.Depth16,h3d_mat_DepthFormat.Depth24,h3d_mat_DepthFormat.Depth24Stencil8];
var h3d_mat_DepthBuffer = function(width,height,format) {
	this.width = width;
	this.height = height;
	this.format = format;
	if(width > 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.DepthBuffer"] = h3d_mat_DepthBuffer;
h3d_mat_DepthBuffer.__name__ = "h3d.mat.DepthBuffer";
h3d_mat_DepthBuffer.getDefault = function() {
	return h3d_Engine.CURRENT.driver.getDefaultDepthBuffer();
};
h3d_mat_DepthBuffer.prototype = {
	hasStencil: function() {
		switch(this.format._hx_index) {
		case 0:case 1:
			return false;
		case 2:
			return true;
		}
	}
	,alloc: function() {
		h3d_Engine.CURRENT.mem.allocDepth(this);
	}
	,dispose: function() {
		if(this.b != null) {
			h3d_Engine.CURRENT.mem.deleteDepth(this);
			this.b = null;
		}
	}
	,isDisposed: function() {
		return this.b == null;
	}
	,__class__: h3d_mat_DepthBuffer
};
var h3d_mat_Material = function(texture) {
	this.mshader = new h3d_shader_BaseMesh();
	this.set_blendMode(h2d_BlendMode.None);
	h3d_mat_BaseMaterial.call(this,this.mshader);
	this.set_texture(texture);
};
$hxClasses["h3d.mat.Material"] = h3d_mat_Material;
h3d_mat_Material.__name__ = "h3d.mat.Material";
h3d_mat_Material.__super__ = h3d_mat_BaseMaterial;
h3d_mat_Material.prototype = $extend(h3d_mat_BaseMaterial.prototype,{
	set_castShadows: function(v) {
		if(this.castShadows == v) {
			return v;
		}
		if(this.passes != null) {
			if(v) {
				this.addPass(new h3d_mat_Pass("shadow",null,this.passes)).set_isStatic(this.staticShadows);
			} else {
				this.removePass(this.getPass("shadow"));
			}
		}
		return this.castShadows = v;
	}
	,set_receiveShadows: function(v) {
		if(v == this.receiveShadows) {
			return v;
		}
		if(this.passes != null) {
			var shadows = h3d_mat_Defaults.get_shadowShader();
			if(v) {
				this.passes.addShader(shadows);
			} else {
				this.passes.removeShader(shadows);
			}
		}
		return this.receiveShadows = v;
	}
	,set_blendMode: function(v) {
		if(this.passes != null) {
			this.passes.setBlendMode(v);
			switch(v._hx_index) {
			case 0:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("default");
				break;
			case 1:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("alpha");
				break;
			case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			}
		}
		return this.blendMode = v;
	}
	,set_texture: function(t) {
		if(t == null) {
			if(this.textureShader != null) {
				this.passes.removeShader(this.textureShader);
				this.textureShader = null;
			}
		} else {
			if(this.textureShader == null) {
				this.textureShader = new h3d_shader_Texture();
				this.passes.addShader(this.textureShader);
			}
			this.textureShader.texture__ = t;
		}
		return t;
	}
	,getDefaultProps: function(type) {
		var props;
		if(type == null) {
			props = { kind : "Opaque", shadows : true, culling : true, light : true};
		} else {
			switch(type) {
			case "particles3D":case "trail3D":
				props = { kind : "Alpha", shadows : false, culling : false, light : true};
				break;
			case "ui":
				props = { kind : "Alpha", shadows : false, culling : false, light : false};
				break;
			default:
				props = { kind : "Opaque", shadows : true, culling : true, light : true};
			}
		}
		return props;
	}
	,refreshProps: function() {
		if(this.props == null || this.passes == null) {
			return;
		}
		var props = this.props;
		switch(props.kind) {
		case "Add":
			this.set_blendMode(h2d_BlendMode.Add);
			break;
		case "Alpha":
			this.set_blendMode(h2d_BlendMode.Alpha);
			break;
		case "AlphaKill":case "Hidden":case "Opaque":
			this.set_blendMode(h2d_BlendMode.None);
			break;
		case "SoftAdd":
			this.set_blendMode(h2d_BlendMode.SoftAdd);
			break;
		}
		var tshader = this.textureShader;
		if(tshader != null) {
			tshader.constModified = true;
			tshader.killAlpha__ = props.kind == "AlphaKill";
			tshader.killAlphaThreshold__ = 0.5;
		}
		this.passes.set_culling(props.kind == "Hidden" ? h3d_mat_Face.Both : props.culling ? h3d_mat_Face.Back : h3d_mat_Face.None);
		this.passes.set_enableLights(props.light);
		var v = props.shadows;
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		if(this.castShadows && this.receiveShadows) {
			this.getPass("shadow").set_culling(this.passes.culling);
		}
	}
	,__class__: h3d_mat_Material
});
var h3d_mat_MaterialDatabase = function() {
};
$hxClasses["h3d.mat.MaterialDatabase"] = h3d_mat_MaterialDatabase;
h3d_mat_MaterialDatabase.__name__ = "h3d.mat.MaterialDatabase";
h3d_mat_MaterialDatabase.prototype = {
	__class__: h3d_mat_MaterialDatabase
};
var h3d_mat_MaterialSetup = function(name) {
	if(this.database == null) {
		this.database = new h3d_mat_MaterialDatabase();
	}
	this.name = name;
};
$hxClasses["h3d.mat.MaterialSetup"] = h3d_mat_MaterialSetup;
h3d_mat_MaterialSetup.__name__ = "h3d.mat.MaterialSetup";
h3d_mat_MaterialSetup.prototype = {
	createRenderer: function() {
		return new h3d_scene_fwd_Renderer();
	}
	,createLightSystem: function() {
		return new h3d_scene_fwd_LightSystem();
	}
	,createMaterial: function() {
		return new h3d_mat_Material();
	}
	,__class__: h3d_mat_MaterialSetup
};
var h3d_mat_Pass = function(name,shaders,parent) {
	this.layer = 0;
	this.bits = 0;
	this.parentPass = parent;
	this.shaders = shaders;
	this.setPassName(name);
	this.set_culling(h3d_mat_Face.Back);
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	this.set_blendSrc(src);
	this.set_blendAlphaSrc(src);
	this.set_blendDst(dst);
	this.set_blendAlphaDst(dst);
	this.depth(true,h3d_mat_Compare.Less);
	this.set_blendOp(this.set_blendAlphaOp(h3d_mat_Operation.Add));
	this.colorMask = 15;
};
$hxClasses["h3d.mat.Pass"] = h3d_mat_Pass;
h3d_mat_Pass.__name__ = "h3d.mat.Pass";
h3d_mat_Pass.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_Pass.prototype = {
	setPassName: function(name) {
		this.name = name;
		this.passId = hxsl_Globals.allocID(name);
	}
	,setBlendMode: function(b) {
		switch(b._hx_index) {
		case 0:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 1:
			var src1 = h3d_mat_Blend.SrcAlpha;
			var dst1 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src1);
			this.set_blendAlphaSrc(src1);
			this.set_blendDst(dst1);
			this.set_blendAlphaDst(dst1);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 2:
			var src2 = h3d_mat_Blend.SrcAlpha;
			var dst2 = h3d_mat_Blend.One;
			this.set_blendSrc(src2);
			this.set_blendAlphaSrc(src2);
			this.set_blendDst(dst2);
			this.set_blendAlphaDst(dst2);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 3:
			var src3 = h3d_mat_Blend.One;
			var dst3 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src3);
			this.set_blendAlphaSrc(src3);
			this.set_blendDst(dst3);
			this.set_blendAlphaDst(dst3);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 4:
			var src4 = h3d_mat_Blend.OneMinusDstColor;
			var dst4 = h3d_mat_Blend.One;
			this.set_blendSrc(src4);
			this.set_blendAlphaSrc(src4);
			this.set_blendDst(dst4);
			this.set_blendAlphaDst(dst4);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 5:
			var src5 = h3d_mat_Blend.DstColor;
			var dst5 = h3d_mat_Blend.Zero;
			this.set_blendSrc(src5);
			this.set_blendAlphaSrc(src5);
			this.set_blendDst(dst5);
			this.set_blendAlphaDst(dst5);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 6:
			var src6 = h3d_mat_Blend.DstColor;
			var dst6 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src6);
			this.set_blendAlphaSrc(src6);
			this.set_blendDst(dst6);
			this.set_blendAlphaDst(dst6);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 7:
			var src7 = h3d_mat_Blend.Zero;
			var dst7 = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src7);
			this.set_blendAlphaSrc(src7);
			this.set_blendDst(dst7);
			this.set_blendAlphaDst(dst7);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 8:
			var src8 = h3d_mat_Blend.One;
			var dst8 = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src8);
			this.set_blendAlphaSrc(src8);
			this.set_blendDst(dst8);
			this.set_blendAlphaDst(dst8);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 9:
			var src9 = h3d_mat_Blend.SrcAlpha;
			var dst9 = h3d_mat_Blend.One;
			this.set_blendSrc(src9);
			this.set_blendAlphaSrc(src9);
			this.set_blendDst(dst9);
			this.set_blendAlphaDst(dst9);
			this.set_blendOp(h3d_mat_Operation.ReverseSub);
			this.set_blendAlphaOp(h3d_mat_Operation.ReverseSub);
			break;
		case 10:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Max);
			this.set_blendOp(h3d_mat_Operation.Max);
			break;
		case 11:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Min);
			this.set_blendOp(h3d_mat_Operation.Min);
			break;
		}
	}
	,depth: function(write,test) {
		this.set_depthWrite(write);
		this.set_depthTest(test);
	}
	,addShader: function(s) {
		if(s == null) {
			return null;
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var sl = this.shaders;
		var prev = null;
		while(sl != null) {
			if(sl.s == s) {
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		return false;
	}
	,getShadersRec: function() {
		if(this.parentPass == null || this.parentShaders == this.parentPass.shaders) {
			return this.shaders;
		}
		var s = this.shaders;
		var prev = null;
		while(s != null && s != this.parentShaders) {
			prev = s;
			s = s.next;
		}
		this.parentShaders = this.parentPass.shaders;
		if(prev == null) {
			this.shaders = this.parentShaders;
		} else {
			prev.next = this.parentShaders;
		}
		return this.shaders;
	}
	,set_enableLights: function(v) {
		this.flags = this.flags & -2 | (v ? 1 : 0);
		return this.enableLights = v;
	}
	,set_isStatic: function(v) {
		this.flags = this.flags & -5 | (v ? 1 : 0) << 2;
		return this.isStatic = v;
	}
	,set_culling: function(v) {
		this.bits = this.bits & -4 | v._hx_index;
		return this.culling = v;
	}
	,set_depthWrite: function(v) {
		this.bits = this.bits & -5 | (v ? 1 : 0) << 2;
		return this.depthWrite = v;
	}
	,set_depthTest: function(v) {
		this.bits = this.bits & -57 | v._hx_index << 3;
		return this.depthTest = v;
	}
	,set_blendSrc: function(v) {
		this.bits = this.bits & -961 | v._hx_index << 6;
		return this.blendSrc = v;
	}
	,set_blendDst: function(v) {
		this.bits = this.bits & -15361 | v._hx_index << 10;
		return this.blendDst = v;
	}
	,set_blendAlphaSrc: function(v) {
		this.bits = this.bits & -245761 | v._hx_index << 14;
		return this.blendAlphaSrc = v;
	}
	,set_blendAlphaDst: function(v) {
		this.bits = this.bits & -3932161 | v._hx_index << 18;
		return this.blendAlphaDst = v;
	}
	,set_blendOp: function(v) {
		this.bits = this.bits & -29360129 | v._hx_index << 22;
		return this.blendOp = v;
	}
	,set_blendAlphaOp: function(v) {
		this.bits = this.bits & -234881025 | v._hx_index << 25;
		return this.blendAlphaOp = v;
	}
	,__class__: h3d_mat_Pass
};
var h3d_mat_Stencil = function() {
	this.opBits = 0;
	this.maskBits = 0;
	this.setOp(h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep);
	this.setFunc(h3d_mat_Compare.Always);
};
$hxClasses["h3d.mat.Stencil"] = h3d_mat_Stencil;
h3d_mat_Stencil.__name__ = "h3d.mat.Stencil";
h3d_mat_Stencil.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_Stencil.prototype = {
	setFront: function(stfail,dpfail,pass) {
		this.set_frontSTfail(stfail);
		this.set_frontDPfail(dpfail);
		this.set_frontPass(pass);
	}
	,setBack: function(stfail,dpfail,pass) {
		this.set_backSTfail(stfail);
		this.set_backDPfail(dpfail);
		this.set_backPass(pass);
	}
	,setOp: function(stfail,dpfail,pass) {
		this.setFront(stfail,dpfail,pass);
		this.setBack(stfail,dpfail,pass);
	}
	,setFunc: function(f,reference,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(reference == null) {
			reference = 0;
		}
		this.set_frontTest(this.set_backTest(f));
		this.set_reference(reference);
		this.set_readMask(readMask);
		this.set_writeMask(writeMask);
	}
	,set_readMask: function(v) {
		this.maskBits = this.maskBits & -256 | v & 255;
		return this.readMask = v;
	}
	,set_writeMask: function(v) {
		this.maskBits = this.maskBits & -65281 | (v & 255) << 8;
		return this.writeMask = v;
	}
	,set_reference: function(v) {
		this.maskBits = this.maskBits & -16711681 | (v & 255) << 16;
		return this.reference = v;
	}
	,set_frontTest: function(v) {
		this.opBits = this.opBits & -8 | v._hx_index;
		return this.frontTest = v;
	}
	,set_frontPass: function(v) {
		this.opBits = this.opBits & -57 | v._hx_index << 3;
		return this.frontPass = v;
	}
	,set_frontSTfail: function(v) {
		this.opBits = this.opBits & -449 | v._hx_index << 6;
		return this.frontSTfail = v;
	}
	,set_frontDPfail: function(v) {
		this.opBits = this.opBits & -3585 | v._hx_index << 9;
		return this.frontDPfail = v;
	}
	,set_backTest: function(v) {
		this.opBits = this.opBits & -28673 | v._hx_index << 12;
		return this.backTest = v;
	}
	,set_backPass: function(v) {
		this.opBits = this.opBits & -229377 | v._hx_index << 15;
		return this.backPass = v;
	}
	,set_backSTfail: function(v) {
		this.opBits = this.opBits & -1835009 | v._hx_index << 18;
		return this.backSTfail = v;
	}
	,set_backDPfail: function(v) {
		this.opBits = this.opBits & -14680065 | v._hx_index << 21;
		return this.backDPfail = v;
	}
	,__class__: h3d_mat_Stencil
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) (this.h.hasOwnProperty(key) ? a.push(key | 0) : null);
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var hxd_PixelFormat = $hxEnums["hxd.PixelFormat"] = { __ename__ : true, __constructs__ : ["ARGB","BGRA","RGBA","RGBA16F","RGBA32F","R8","R16F","R32F","RG8","RG16F","RG32F","RGB8","RGB16F","RGB32F","SRGB","SRGB_ALPHA","RGB10A2","RG11B10UF","S3TC"]
	,ARGB: {_hx_index:0,__enum__:"hxd.PixelFormat",toString:$estr}
	,BGRA: {_hx_index:1,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA: {_hx_index:2,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16F: {_hx_index:3,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA32F: {_hx_index:4,__enum__:"hxd.PixelFormat",toString:$estr}
	,R8: {_hx_index:5,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16F: {_hx_index:6,__enum__:"hxd.PixelFormat",toString:$estr}
	,R32F: {_hx_index:7,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG8: {_hx_index:8,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16F: {_hx_index:9,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG32F: {_hx_index:10,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB8: {_hx_index:11,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16F: {_hx_index:12,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB32F: {_hx_index:13,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB: {_hx_index:14,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB_ALPHA: {_hx_index:15,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB10A2: {_hx_index:16,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG11B10UF: {_hx_index:17,__enum__:"hxd.PixelFormat",toString:$estr}
	,S3TC: ($_=function(v) { return {_hx_index:18,v:v,__enum__:"hxd.PixelFormat",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxd_PixelFormat.__empty_constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.R8,hxd_PixelFormat.R16F,hxd_PixelFormat.R32F,hxd_PixelFormat.RG8,hxd_PixelFormat.RG16F,hxd_PixelFormat.RG32F,hxd_PixelFormat.RGB8,hxd_PixelFormat.RGB16F,hxd_PixelFormat.RGB32F,hxd_PixelFormat.SRGB,hxd_PixelFormat.SRGB_ALPHA,hxd_PixelFormat.RGB10A2,hxd_PixelFormat.RG11B10UF];
var h3d_mat_Texture = function(w,h,flags,format) {
	var engine = h3d_Engine.CURRENT;
	this.mem = engine.mem;
	if(format == null) {
		format = h3d_mat_Texture.nativeFormat;
	}
	this.id = ++h3d_mat_Texture.UID;
	this.format = format;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	var tw = 1;
	var th = 1;
	while(tw < w) tw <<= 1;
	while(th < h) th <<= 1;
	if(tw != w || th != h) {
		this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
	}
	if((this.flags & 1 << h3d_mat_TextureFlags.Target._hx_index) != 0) {
		this.realloc = function() {
		};
	}
	this.width = w;
	this.height = h;
	this.set_mipMap((this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 ? h3d_mat_MipMap.Nearest : h3d_mat_MipMap.None);
	this.set_filter(h3d_mat_Filter.Linear);
	this.set_wrap(h3d_mat_Wrap.Clamp);
	this.bits &= 32767;
	if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.Texture"] = h3d_mat_Texture;
h3d_mat_Texture.__name__ = "h3d.mat.Texture";
h3d_mat_Texture.fromColor = function(color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	var engine = h3d_Engine.CURRENT;
	var aval = alpha * 255 | 0;
	if(aval < 0) {
		aval = 0;
	} else if(aval > 255) {
		aval = 255;
	}
	var key = color & 16777215 | aval << 24;
	var t = engine.textureColorCache.h[key];
	if(t != null) {
		return t;
	}
	var t1 = new h3d_mat_Texture(1,1,null);
	t1.clear(color,alpha);
	t1.realloc = function() {
		t1.clear(color,alpha);
	};
	engine.textureColorCache.h[key] = t1;
	return t1;
};
h3d_mat_Texture.defaultCubeTexture = function() {
	var engine = h3d_Engine.CURRENT;
	var t = engine.resCache.h[h3d_mat_Texture.__id__];
	if(t != null) {
		return t;
	}
	t = new h3d_mat_Texture(1,1,[h3d_mat_TextureFlags.Cube]);
	t.clear(2105376);
	t.realloc = function() {
		t.clear(2105376);
	};
	engine.resCache.set(h3d_mat_Texture,t);
	return t;
};
h3d_mat_Texture.prototype = {
	set_lastFrame: function(lf) {
		if(this._lastFrame != h3d_mat_Texture.PREVENT_AUTO_DISPOSE) {
			this._lastFrame = lf;
		}
		return this._lastFrame;
	}
	,get_lastFrame: function() {
		return this._lastFrame;
	}
	,get_layerCount: function() {
		if((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			return 6;
		} else {
			return 1;
		}
	}
	,alloc: function() {
		if(this.t == null) {
			this.mem.allocTexture(this);
		}
	}
	,toString: function() {
		var str = this.name;
		if(this.name == null) {
			str = "Texture_" + this.id;
		}
		return str + "(" + this.width + "x" + this.height + ")";
	}
	,setName: function(n) {
		this.name = n;
	}
	,set_mipMap: function(m) {
		this.bits = this.bits & -4 | m._hx_index;
		return this.mipMap = m;
	}
	,set_filter: function(f) {
		this.bits = this.bits & -25 | f._hx_index << 3;
		return this.filter = f;
	}
	,set_wrap: function(w) {
		this.bits = this.bits & -193 | w._hx_index << 6;
		return this.wrap = w;
	}
	,resize: function(width,height) {
		this.dispose();
		var tw = 1;
		var th = 1;
		while(tw < width) tw <<= 1;
		while(th < height) th <<= 1;
		if(tw != width || th != height) {
			this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
		} else {
			this.flags &= -1 - (1 << h3d_mat_TextureFlags.IsNPOT._hx_index);
		}
		this.width = width;
		this.height = height;
		if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
			this.alloc();
		}
	}
	,clear: function(color,alpha,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(alpha == null) {
			alpha = 1.;
		}
		this.alloc();
		if(this.width != 1 || this.height != 1) {
			var engine = h3d_Engine.CURRENT;
			color |= ((alpha < 0. ? 0. : alpha > 1. ? 1. : alpha) * 255 | 0) << 24;
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					engine.pushTarget(this,i);
					engine.clear(color);
					engine.popTarget();
				}
			} else {
				engine.pushTarget(this,layer);
				engine.clear(color);
				engine.popTarget();
			}
		} else {
			var p = hxd_Pixels.alloc(this.width,this.height,h3d_mat_Texture.nativeFormat);
			var k = 0;
			var b = color & 255;
			var g = color >> 8 & 255;
			var r = color >> 16 & 255;
			var a = alpha * 255 | 0;
			if(a < 0) {
				a = 0;
			} else if(a > 255) {
				a = 255;
			}
			switch(h3d_mat_Texture.nativeFormat._hx_index) {
			case 1:
				var tmp = r;
				r = b;
				b = tmp;
				break;
			case 2:
				break;
			default:
				throw new js__$Boot_HaxeError("TODO");
			}
			var _g11 = 0;
			var _g2 = this.width * this.height;
			while(_g11 < _g2) {
				var i1 = _g11++;
				p.bytes.b[k++] = r;
				p.bytes.b[k++] = g;
				p.bytes.b[k++] = b;
				p.bytes.b[k++] = a;
			}
			if(layer < 0) {
				var _g3 = 0;
				var _g4 = this.get_layerCount();
				while(_g3 < _g4) {
					var i2 = _g3++;
					this.uploadPixels(p,0,i2);
				}
			} else {
				this.uploadPixels(p,0,layer);
			}
			p.dispose();
		}
	}
	,checkMipMapGen: function(mipLevel,layer) {
		if(mipLevel == 0 && (this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (this.flags & 1 << h3d_mat_TextureFlags.ManualMipMapGen._hx_index) == 0 && ((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) == 0 || layer == 5)) {
			this.mem.driver.generateMipMaps(this);
		}
	}
	,uploadBitmap: function(bmp,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		var width = bmp.ctx.canvas.width;
		var height = bmp.ctx.canvas.height;
		if(width != this.width >> mipLevel || height != this.height >> mipLevel) {
			throw new js__$Boot_HaxeError("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mipLevel) + "x" + (this.height >> mipLevel));
		}
		this.mem.driver.uploadTextureBitmap(this,bmp,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,uploadPixels: function(pixels,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		var width = pixels.width;
		var height = pixels.height;
		if(width != this.width >> mipLevel || height != this.height >> mipLevel) {
			throw new js__$Boot_HaxeError("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mipLevel) + "x" + (this.height >> mipLevel));
		}
		this.mem.driver.uploadTexturePixels(this,pixels,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,dispose: function() {
		if(this.t != null) {
			this.mem.deleteTexture(this);
		}
	}
	,__class__: h3d_mat_Texture
};
var h3d_mat_TextureArray = function(w,h,layers,flags,format) {
	this.layers = layers;
	if(flags == null) {
		flags = [];
	}
	flags.push(h3d_mat_TextureFlags.IsArray);
	h3d_mat_Texture.call(this,w,h,flags,format);
};
$hxClasses["h3d.mat.TextureArray"] = h3d_mat_TextureArray;
h3d_mat_TextureArray.__name__ = "h3d.mat.TextureArray";
h3d_mat_TextureArray.__super__ = h3d_mat_Texture;
h3d_mat_TextureArray.prototype = $extend(h3d_mat_Texture.prototype,{
	get_layerCount: function() {
		return this.layers;
	}
	,toString: function() {
		return h3d_mat_Texture.prototype.toString.call(this) + "[" + this.layers + "]";
	}
	,__class__: h3d_mat_TextureArray
});
var h3d_pass_Base = function(name) {
	this.name = name;
};
$hxClasses["h3d.pass.Base"] = h3d_pass_Base;
h3d_pass_Base.__name__ = "h3d.pass.Base";
h3d_pass_Base.prototype = {
	setContext: function(ctx) {
		this.ctx = ctx;
	}
	,draw: function(passes,sort) {
	}
	,__class__: h3d_pass_Base
};
var h3d_pass_ScreenFx = function(shader,output) {
	this.shader = shader;
	this.shaders = new hxsl_ShaderList(shader);
	this.manager = new h3d_pass_ShaderManager(output);
	this.pass = new h3d_mat_Pass("screenfx",new hxsl_ShaderList(shader));
	this.pass.set_culling(h3d_mat_Face.None);
	this.pass.depth(false,h3d_mat_Compare.Always);
};
$hxClasses["h3d.pass.ScreenFx"] = h3d_pass_ScreenFx;
h3d_pass_ScreenFx.__name__ = "h3d.pass.ScreenFx";
h3d_pass_ScreenFx.prototype = {
	get_engine: function() {
		if(this._engine == null) {
			this._engine = h3d_Engine.CURRENT;
		}
		return this._engine;
	}
	,render: function() {
		if(this.primitive == null) {
			this.primitive = h3d_prim_Plane2D.get();
		}
		this.shader.flipY__ = this.get_engine().driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.get_engine().getCurrentTarget() != null ? -1 : 1;
		var rts = this.manager.compileShaders(this.shaders);
		this.get_engine().selectMaterial(this.pass);
		this.get_engine().selectShader(rts);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(rts);
		} else {
			var _this = this.buffers;
			_this.vertex.grow(rts.vertex);
			_this.fragment.grow(rts.fragment);
		}
		this.manager.fillGlobals(this.buffers,rts);
		this.manager.fillParams(this.buffers,rts,this.shaders);
		this.get_engine().uploadShaderBuffers(this.buffers,0);
		this.get_engine().uploadShaderBuffers(this.buffers,1);
		this.get_engine().uploadShaderBuffers(this.buffers,2);
		this.primitive.render(this.get_engine());
	}
	,dispose: function() {
	}
	,__class__: h3d_pass_ScreenFx
};
var h3d_pass_Blur = function(radius,gain,linear,quality) {
	if(quality == null) {
		quality = 1.;
	}
	if(linear == null) {
		linear = 0.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	this.cubeDir = [h3d_Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d_Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d_Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d_Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d_Matrix.L([1,0,0,0,0,-1,0,0,0,1,0,0]),h3d_Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
	h3d_pass_ScreenFx.call(this,new h3d_shader_Blur());
	this.set_radius(radius);
	this.set_quality(quality);
	this.set_gain(gain);
	this.set_linear(linear);
};
$hxClasses["h3d.pass.Blur"] = h3d_pass_Blur;
h3d_pass_Blur.__name__ = "h3d.pass.Blur";
h3d_pass_Blur.__super__ = h3d_pass_ScreenFx;
h3d_pass_Blur.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	set_radius: function(r) {
		if(this.radius == r) {
			return r;
		}
		this.values = null;
		return this.radius = r;
	}
	,set_quality: function(q) {
		if(this.quality == q) {
			return q;
		}
		this.values = null;
		return this.quality = q;
	}
	,set_gain: function(s) {
		if(this.gain == s) {
			return s;
		}
		this.values = null;
		return this.gain = s;
	}
	,set_linear: function(b) {
		if(this.linear == b) {
			return b;
		}
		this.values = null;
		return this.linear = b;
	}
	,gauss: function(x,s) {
		if(s <= 0) {
			if(x == 0) {
				return 1;
			} else {
				return 0;
			}
		}
		var sq = s * s;
		var p = Math.pow(2.718281828459,-(x * x) / (2 * sq));
		return p / Math.sqrt(2 * Math.PI * sq);
	}
	,calcValues: function() {
		this.values = [];
		this.offsets = [];
		var tot = 0.;
		var f = this.quality;
		var qadj = (f < 0. ? 0. : f > 1. ? 1. : f) * 0.7 + 0.3;
		var width;
		if(this.radius > 0) {
			var a = this.radius - 1;
			width = Math.ceil((a < 1 ? 1 : a) * qadj / 2);
		} else {
			width = 0;
		}
		var sigma = Math.sqrt(this.radius);
		var _g = 0;
		var _g1 = width + 1;
		while(_g < _g1) {
			var i = _g++;
			var i1 = i * 2;
			var i2 = i == 0 ? 0 : i * 2 - 1;
			var g1 = this.gauss(i1,sigma);
			var g2 = this.gauss(i2,sigma);
			var g = g1 + g2;
			this.values[i] = g;
			this.offsets[i] = i == 0 ? 0 : (g1 * i1 + g2 * i2) / (g * i * Math.sqrt(qadj));
			tot += g;
			if(i > 0) {
				tot += g;
			}
		}
		var minVal = this.values[0] * (0.01 / qadj);
		while(this.values.length > 2) {
			var last = this.values[this.values.length - 1];
			if(last > minVal) {
				break;
			}
			tot -= last * 2;
			this.values.pop();
		}
		tot /= this.gain;
		var _g2 = 0;
		var _g3 = this.values.length;
		while(_g2 < _g3) {
			var i3 = _g2++;
			this.values[i3] /= tot;
		}
		if(this.linear > 0) {
			var m = this.gain / (this.values.length * 2 - 1);
			var _g4 = 0;
			var _g5 = this.values.length;
			while(_g4 < _g5) {
				var i4 = _g4++;
				var a1 = this.values[i4];
				this.values[i4] = a1 + this.linear * (m - a1);
				var a2 = this.offsets[i4];
				this.offsets[i4] = a2 + this.linear * ((i4 == 0 ? 0 : (i4 * 2 - 0.5) / (i4 * qadj)) - a2);
			}
		}
	}
	,apply: function(ctx,src,output) {
		if(this.radius <= 0 && this.shader.fixedColor__ == null) {
			if(output != null) {
				h3d_pass_Copy.run(src,output);
			}
			return;
		}
		if(output == null) {
			output = src;
		}
		if(this.values == null) {
			this.calcValues();
		}
		var isCube = (src.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var faceCount = isCube ? 6 : 1;
		var tmp = ctx.textures.allocTarget(src.name + "BlurTmp",src.width,src.height,false,src.format,isCube);
		var _this = this.shader;
		_this.constModified = true;
		_this.Quality__ = this.values.length;
		this.shader.values__ = this.values;
		this.shader.offsets__ = this.offsets;
		if(isCube) {
			this.shader.cubeTexture__ = src;
			var _this1 = this.shader;
			_this1.constModified = true;
			_this1.isCube__ = true;
		} else {
			this.shader.texture__ = src;
			var _this2 = this.shader;
			_this2.constModified = true;
			_this2.isCube__ = false;
		}
		var _this3 = this.shader.pixel__;
		var x = 1 / src.width;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this3.x = x;
		_this3.y = y;
		_this3.z = 0.;
		_this3.w = 1.;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(tmp,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		if(isCube) {
			this.shader.cubeTexture__ = tmp;
		} else {
			this.shader.texture__ = tmp;
		}
		var _this4 = this.shader.pixel__;
		var x1 = 0;
		var y1 = 1 / src.height;
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this4.x = x1;
		_this4.y = y1;
		_this4.z = 0.;
		_this4.w = 1.;
		var outDepth = output.depthBuffer;
		output.depthBuffer = null;
		var _g2 = 0;
		var _g3 = faceCount;
		while(_g2 < _g3) {
			var i1 = _g2++;
			this.get_engine().pushTarget(output,i1);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i1];
			}
			this.render();
			this.get_engine().popTarget();
		}
		output.depthBuffer = outDepth;
	}
	,__class__: h3d_pass_Blur
});
var hxsl_Shader = function() {
	this.priority = 0;
	this.initialize();
};
$hxClasses["hxsl.Shader"] = hxsl_Shader;
hxsl_Shader.__name__ = "hxsl.Shader";
hxsl_Shader.prototype = {
	initialize: function() {
		this.constModified = true;
		if(this.shader != null) {
			return;
		}
		var cl = js_Boot.getClass(this);
		this.shader = cl._SHADER;
		if(this.shader == null) {
			var curClass = cl;
			while(curClass != null && curClass.SRC == null) curClass = curClass.__super__;
			if(curClass == null) {
				throw new js__$Boot_HaxeError(cl.__name__ + " has no shader source");
			}
			this.shader = curClass._SHADER;
			if(this.shader == null) {
				this.shader = new hxsl_SharedShader(curClass.SRC);
				curClass._SHADER = this.shader;
			}
		}
	}
	,setPriority: function(v) {
		this.priority = v;
	}
	,getParamValue: function(index) {
		throw new js__$Boot_HaxeError("assert");
	}
	,getParamFloatValue: function(index) {
		throw new js__$Boot_HaxeError("assert");
	}
	,updateConstants: function(globals) {
		throw new js__$Boot_HaxeError("assert");
	}
	,updateConstantsFinal: function(globals) {
		var c = this.shader.consts;
		while(c != null) {
			if(c.globalId == 0) {
				c = c.next;
				continue;
			}
			var v = globals.map.h[c.globalId];
			var _g = c.v.type;
			switch(_g._hx_index) {
			case 1:
				var v1 = v;
				if(v1 >>> c.bits != 0) {
					throw new js__$Boot_HaxeError("Constant " + c.v.name + " is outside range (" + v1 + " > " + ((1 << c.bits) - 1) + ")");
				}
				this.constBits |= v1 << c.pos;
				break;
			case 2:
				var v2 = v;
				if(v2) {
					this.constBits |= 1 << c.pos;
				}
				break;
			case 17:
				var count = _g.size;
				if(v == null) {
					c = c.next;
					continue;
				}
				var v3 = v;
				var sel = v3.channel;
				if(v3.texture == null) {
					sel = hxsl_Channel.Unknown;
				} else if(sel == null || sel == hxsl_Channel.Unknown) {
					switch(count) {
					case 1:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedFloat;
						} else {
							throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					case 3:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedNormal;
						} else {
							throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					default:
						throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
					}
				}
				this.constBits |= (globals.allocChannelID(v3.texture) << 3 | sel._hx_index) << c.pos;
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
			c = c.next;
		}
		var _this = this.shader;
		var constBits = this.constBits;
		var i = _this.instanceCache.h[constBits];
		this.instance = i == null ? _this.makeInstance(constBits) : i;
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,__class__: hxsl_Shader
};
var h3d_shader_ScreenShader = function() {
	this.flipY__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.ScreenShader"] = h3d_shader_ScreenShader;
h3d_shader_ScreenShader.__name__ = "h3d.shader.ScreenShader";
h3d_shader_ScreenShader.__super__ = hxsl_Shader;
h3d_shader_ScreenShader.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_ScreenShader
});
var h3d_pass__$Border_BorderShader = function() {
	this.color__ = new h3d_Vector();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Border.BorderShader"] = h3d_pass__$Border_BorderShader;
h3d_pass__$Border_BorderShader.__name__ = "h3d.pass._Border.BorderShader";
h3d_pass__$Border_BorderShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Border_BorderShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Border_BorderShader
});
var h3d_pass_Border = function(width,height,size) {
	if(size == null) {
		size = 1;
	}
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Border_BorderShader());
	var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
	var bbuf = this1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize1 = bbuf.array.length << 1;
		if(newSize1 < 128) {
			newSize1 = 128;
		}
		var newArray1 = new Float32Array(newSize1);
		newArray1.set(bbuf.array);
		bbuf.array = newArray1;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize2 = bbuf.array.length << 1;
		if(newSize2 < 128) {
			newSize2 = 128;
		}
		var newArray2 = new Float32Array(newSize2);
		newArray2.set(bbuf.array);
		bbuf.array = newArray2;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize3 = bbuf.array.length << 1;
		if(newSize3 < 128) {
			newSize3 = 128;
		}
		var newArray3 = new Float32Array(newSize3);
		newArray3.set(bbuf.array);
		bbuf.array = newArray3;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize4 = bbuf.array.length << 1;
		if(newSize4 < 128) {
			newSize4 = 128;
		}
		var newArray4 = new Float32Array(newSize4);
		newArray4.set(bbuf.array);
		bbuf.array = newArray4;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize5 = bbuf.array.length << 1;
		if(newSize5 < 128) {
			newSize5 = 128;
		}
		var newArray5 = new Float32Array(newSize5);
		newArray5.set(bbuf.array);
		bbuf.array = newArray5;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize6 = bbuf.array.length << 1;
		if(newSize6 < 128) {
			newSize6 = 128;
		}
		var newArray6 = new Float32Array(newSize6);
		newArray6.set(bbuf.array);
		bbuf.array = newArray6;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize7 = bbuf.array.length << 1;
		if(newSize7 < 128) {
			newSize7 = 128;
		}
		var newArray7 = new Float32Array(newSize7);
		newArray7.set(bbuf.array);
		bbuf.array = newArray7;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize8 = bbuf.array.length << 1;
		if(newSize8 < 128) {
			newSize8 = 128;
		}
		var newArray8 = new Float32Array(newSize8);
		newArray8.set(bbuf.array);
		bbuf.array = newArray8;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize9 = bbuf.array.length << 1;
		if(newSize9 < 128) {
			newSize9 = 128;
		}
		var newArray9 = new Float32Array(newSize9);
		newArray9.set(bbuf.array);
		bbuf.array = newArray9;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize10 = bbuf.array.length << 1;
		if(newSize10 < 128) {
			newSize10 = 128;
		}
		var newArray10 = new Float32Array(newSize10);
		newArray10.set(bbuf.array);
		bbuf.array = newArray10;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize11 = bbuf.array.length << 1;
		if(newSize11 < 128) {
			newSize11 = 128;
		}
		var newArray11 = new Float32Array(newSize11);
		newArray11.set(bbuf.array);
		bbuf.array = newArray11;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize12 = bbuf.array.length << 1;
		if(newSize12 < 128) {
			newSize12 = 128;
		}
		var newArray12 = new Float32Array(newSize12);
		newArray12.set(bbuf.array);
		bbuf.array = newArray12;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize13 = bbuf.array.length << 1;
		if(newSize13 < 128) {
			newSize13 = 128;
		}
		var newArray13 = new Float32Array(newSize13);
		newArray13.set(bbuf.array);
		bbuf.array = newArray13;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize14 = bbuf.array.length << 1;
		if(newSize14 < 128) {
			newSize14 = 128;
		}
		var newArray14 = new Float32Array(newSize14);
		newArray14.set(bbuf.array);
		bbuf.array = newArray14;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize15 = bbuf.array.length << 1;
		if(newSize15 < 128) {
			newSize15 = 128;
		}
		var newArray15 = new Float32Array(newSize15);
		newArray15.set(bbuf.array);
		bbuf.array = newArray15;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize16 = bbuf.array.length << 1;
		if(newSize16 < 128) {
			newSize16 = 128;
		}
		var newArray16 = new Float32Array(newSize16);
		newArray16.set(bbuf.array);
		bbuf.array = newArray16;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize17 = bbuf.array.length << 1;
		if(newSize17 < 128) {
			newSize17 = 128;
		}
		var newArray17 = new Float32Array(newSize17);
		newArray17.set(bbuf.array);
		bbuf.array = newArray17;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize18 = bbuf.array.length << 1;
		if(newSize18 < 128) {
			newSize18 = 128;
		}
		var newArray18 = new Float32Array(newSize18);
		newArray18.set(bbuf.array);
		bbuf.array = newArray18;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize19 = bbuf.array.length << 1;
		if(newSize19 < 128) {
			newSize19 = 128;
		}
		var newArray19 = new Float32Array(newSize19);
		newArray19.set(bbuf.array);
		bbuf.array = newArray19;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize20 = bbuf.array.length << 1;
		if(newSize20 < 128) {
			newSize20 = 128;
		}
		var newArray20 = new Float32Array(newSize20);
		newArray20.set(bbuf.array);
		bbuf.array = newArray20;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize21 = bbuf.array.length << 1;
		if(newSize21 < 128) {
			newSize21 = 128;
		}
		var newArray21 = new Float32Array(newSize21);
		newArray21.set(bbuf.array);
		bbuf.array = newArray21;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize22 = bbuf.array.length << 1;
		if(newSize22 < 128) {
			newSize22 = 128;
		}
		var newArray22 = new Float32Array(newSize22);
		newArray22.set(bbuf.array);
		bbuf.array = newArray22;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize23 = bbuf.array.length << 1;
		if(newSize23 < 128) {
			newSize23 = 128;
		}
		var newArray23 = new Float32Array(newSize23);
		newArray23.set(bbuf.array);
		bbuf.array = newArray23;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize24 = bbuf.array.length << 1;
		if(newSize24 < 128) {
			newSize24 = 128;
		}
		var newArray24 = new Float32Array(newSize24);
		newArray24.set(bbuf.array);
		bbuf.array = newArray24;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize25 = bbuf.array.length << 1;
		if(newSize25 < 128) {
			newSize25 = 128;
		}
		var newArray25 = new Float32Array(newSize25);
		newArray25.set(bbuf.array);
		bbuf.array = newArray25;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize26 = bbuf.array.length << 1;
		if(newSize26 < 128) {
			newSize26 = 128;
		}
		var newArray26 = new Float32Array(newSize26);
		newArray26.set(bbuf.array);
		bbuf.array = newArray26;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize27 = bbuf.array.length << 1;
		if(newSize27 < 128) {
			newSize27 = 128;
		}
		var newArray27 = new Float32Array(newSize27);
		newArray27.set(bbuf.array);
		bbuf.array = newArray27;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize28 = bbuf.array.length << 1;
		if(newSize28 < 128) {
			newSize28 = 128;
		}
		var newArray28 = new Float32Array(newSize28);
		newArray28.set(bbuf.array);
		bbuf.array = newArray28;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize29 = bbuf.array.length << 1;
		if(newSize29 < 128) {
			newSize29 = 128;
		}
		var newArray29 = new Float32Array(newSize29);
		newArray29.set(bbuf.array);
		bbuf.array = newArray29;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize30 = bbuf.array.length << 1;
		if(newSize30 < 128) {
			newSize30 = 128;
		}
		var newArray30 = new Float32Array(newSize30);
		newArray30.set(bbuf.array);
		bbuf.array = newArray30;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize31 = bbuf.array.length << 1;
		if(newSize31 < 128) {
			newSize31 = 128;
		}
		var newArray31 = new Float32Array(newSize31);
		newArray31.set(bbuf.array);
		bbuf.array = newArray31;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	this.primitive = new h3d_prim_RawPrimitive({ vbuf : bbuf, stride : 2, quads : true},true);
	var _this = this.shader.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = w;
};
$hxClasses["h3d.pass.Border"] = h3d_pass_Border;
h3d_pass_Border.__name__ = "h3d.pass.Border";
h3d_pass_Border.__super__ = h3d_pass_ScreenFx;
h3d_pass_Border.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	dispose: function() {
		h3d_pass_ScreenFx.prototype.dispose.call(this);
		this.primitive.dispose();
	}
	,__class__: h3d_pass_Border
});
var h3d_pass__$Copy_ArrayCopyShader = function() {
	this.layer__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.ArrayCopyShader"] = h3d_pass__$Copy_ArrayCopyShader;
h3d_pass__$Copy_ArrayCopyShader.__name__ = "h3d.pass._Copy.ArrayCopyShader";
h3d_pass__$Copy_ArrayCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_ArrayCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.layer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Copy_ArrayCopyShader
});
var h3d_pass__$Copy_CopyShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.CopyShader"] = h3d_pass__$Copy_CopyShader;
h3d_pass__$Copy_CopyShader.__name__ = "h3d.pass._Copy.CopyShader";
h3d_pass__$Copy_CopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_CopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Copy_CopyShader
});
var h3d_pass_Copy = function() {
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Copy_CopyShader());
};
$hxClasses["h3d.pass.Copy"] = h3d_pass_Copy;
h3d_pass_Copy.__name__ = "h3d.pass.Copy";
h3d_pass_Copy.run = function(from,to,blend,pass,layer) {
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_Copy.__id__];
	if(inst == null) {
		inst = new h3d_pass_Copy();
		engine.resCache.set(h3d_pass_Copy,inst);
	}
	inst.apply(from,to,blend,pass,layer);
	return;
};
h3d_pass_Copy.__super__ = h3d_pass_ScreenFx;
h3d_pass_Copy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0);
		}
		this.shader.texture__ = from;
		if(customPass != null) {
			var old = this.pass;
			this.pass = customPass;
			if(blend != null) {
				this.pass.setBlendMode(blend);
			}
			var h = this.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	,__class__: h3d_pass_Copy
});
var h3d_pass__$CubeCopy_CubeCopyShader = function() {
	this.mat__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._CubeCopy.CubeCopyShader"] = h3d_pass__$CubeCopy_CubeCopyShader;
h3d_pass__$CubeCopy_CubeCopyShader.__name__ = "h3d.pass._CubeCopy.CubeCopyShader";
h3d_pass__$CubeCopy_CubeCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$CubeCopy_CubeCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$CubeCopy_CubeCopyShader
});
var h3d_pass_Default = function(name) {
	this.defaultSort = ($_=new h3d_pass_SortByMaterial(),$bind($_,$_.sort));
	h3d_pass_Base.call(this,name);
	this.manager = new h3d_pass_ShaderManager(this.getOutputs());
	this.initGlobals();
};
$hxClasses["h3d.pass.Default"] = h3d_pass_Default;
h3d_pass_Default.__name__ = "h3d.pass.Default";
h3d_pass_Default.__super__ = h3d_pass_Base;
h3d_pass_Default.prototype = $extend(h3d_pass_Base.prototype,{
	getOutputs: function() {
		return [hxsl_Output.Value("output.color")];
	}
	,processShaders: function(p,shaders) {
		var p1 = this.ctx.extraShaders;
		while(p1 != null) {
			shaders = this.ctx.allocShaderList(p1.s,shaders);
			p1 = p1.next;
		}
		return shaders;
	}
	,setupShaders: function(passes) {
		var lightInit = false;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var shaders = p.pass.getShadersRec();
			shaders = this.processShaders(p,shaders);
			if(p.pass.enableLights && this.ctx.lightSystem != null) {
				if(!lightInit) {
					this.ctx.lightSystem.initGlobals(this.manager.globals);
					lightInit = true;
				}
				shaders = this.ctx.lightSystem.computeLight(p.obj,shaders);
			}
			p.shader = this.manager.compileShaders(shaders,p.pass.batchMode);
			p.shaders = shaders;
			var t = p.shader.fragment.textures;
			if(t == null) {
				p.texture = 0;
			} else {
				var _this = this.manager;
				var opt = true;
				if(opt == null) {
					opt = false;
				}
				var t1;
				if(t.perObjectGlobal != null) {
					var v = _this.globals.map.h[t.perObjectGlobal.gid];
					if(v == null) {
						throw new js__$Boot_HaxeError("Missing global value " + t.perObjectGlobal.path + " for shader " + _this.shaderInfo(shaders,t.perObjectGlobal.path));
					}
					var _g = t.type;
					var t2;
					if(_g._hx_index == 17) {
						var _g1 = _g.size;
						t2 = true;
					} else {
						t2 = false;
					}
					t1 = t2 ? v.texture : v;
				} else {
					var si = shaders;
					var n = t.instance;
					while(--n > 0) si = si.next;
					var v1 = si.s.getParamValue(t.index);
					if(v1 == null && !opt) {
						throw new js__$Boot_HaxeError("Missing param value " + Std.string(si.s) + "." + t.name);
					}
					t1 = v1;
				}
				p.texture = t1 == null ? 0 : t1.id;
			}
		}
	}
	,drawObject: function(p) {
		this.ctx.drawPass = p;
		this.ctx.engine.selectMaterial(p.pass);
		p.obj.draw(this.ctx);
	}
	,draw: function(passes,sort) {
		if(passes.current == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.ctx.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			this.manager.globals.map.h[g.gid] = g.value;
		}
		this.setGlobals();
		this.setupShaders(passes);
		if(sort == null) {
			this.defaultSort(passes);
		} else {
			sort(passes);
		}
		this.ctx.currentManager = this.manager;
		var buf = this.ctx.shaderBuffers;
		var prevShader = null;
		var _g2_o = passes.current;
		while(_g2_o != null) {
			var tmp = _g2_o;
			_g2_o = _g2_o.next;
			var p = tmp;
			var v = p.obj.absPos;
			this.manager.globals.map.h[this.globalModelView_id] = v;
			if(p.shader.globals.h.hasOwnProperty(this.globalModelViewInverse_id)) {
				var v1 = p.obj.getInvPos();
				this.manager.globals.map.h[this.globalModelViewInverse_id] = v1;
			}
			if(prevShader != p.shader) {
				prevShader = p.shader;
				this.ctx.engine.selectShader(p.shader);
				if(buf == null) {
					buf = this.ctx.shaderBuffers = new h3d_shader_Buffers(p.shader);
				} else {
					var s = p.shader;
					buf.vertex.grow(s.vertex);
					buf.fragment.grow(s.fragment);
				}
				this.manager.fillGlobals(buf,p.shader);
				this.ctx.engine.uploadShaderBuffers(buf,0);
			}
			if(!p.pass.dynamicParameters) {
				this.manager.fillParams(buf,p.shader,p.shaders);
				this.ctx.engine.uploadShaderBuffers(buf,1);
				this.ctx.engine.uploadShaderBuffers(buf,2);
				this.ctx.engine.uploadShaderBuffers(buf,3);
			}
			this.drawObject(p);
		}
		var _this = this.ctx;
		_this.cachedPos = 0;
		_this.drawPass = null;
	}
	,initGlobals: function() {
		var this1 = hxsl_Globals.allocID("camera.view");
		this.cameraView_id = this1;
		var this2 = hxsl_Globals.allocID("camera.zNear");
		this.cameraNear_id = this2;
		var this3 = hxsl_Globals.allocID("camera.zFar");
		this.cameraFar_id = this3;
		var this4 = hxsl_Globals.allocID("camera.proj");
		this.cameraProj_id = this4;
		var this5 = hxsl_Globals.allocID("camera.position");
		this.cameraPos_id = this5;
		var this6 = hxsl_Globals.allocID("camera.projDiag");
		this.cameraProjDiag_id = this6;
		var this7 = hxsl_Globals.allocID("camera.projFlip");
		this.cameraProjFlip_id = this7;
		var this8 = hxsl_Globals.allocID("camera.viewProj");
		this.cameraViewProj_id = this8;
		var this9 = hxsl_Globals.allocID("camera.inverseViewProj");
		this.cameraInverseViewProj_id = this9;
		var this10 = hxsl_Globals.allocID("global.time");
		this.globalTime_id = this10;
		var this11 = hxsl_Globals.allocID("global.pixelSize");
		this.pixelSize_id = this11;
		var this12 = hxsl_Globals.allocID("global.modelView");
		this.globalModelView_id = this12;
		var this13 = hxsl_Globals.allocID("global.modelViewInverse");
		this.globalModelViewInverse_id = this13;
	}
	,setGlobals: function() {
		var v = this.ctx.camera.mcam;
		this.manager.globals.map.h[this.cameraView_id] = v;
		var v1 = this.ctx.camera.zNear;
		this.manager.globals.map.h[this.cameraNear_id] = v1;
		var v2 = this.ctx.camera.zFar;
		this.manager.globals.map.h[this.cameraFar_id] = v2;
		var v3 = this.ctx.camera.mproj;
		this.manager.globals.map.h[this.cameraProj_id] = v3;
		var v4 = this.ctx.camera.pos;
		this.manager.globals.map.h[this.cameraPos_id] = v4;
		var v5 = new h3d_Vector(this.ctx.camera.mproj._11,this.ctx.camera.mproj._22,this.ctx.camera.mproj._33,this.ctx.camera.mproj._44);
		this.manager.globals.map.h[this.cameraProjDiag_id] = v5;
		var v6 = this.ctx.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.ctx.engine.getCurrentTarget() != null ? -1 : 1;
		this.manager.globals.map.h[this.cameraProjFlip_id] = v6;
		var v7 = this.ctx.camera.m;
		this.manager.globals.map.h[this.cameraViewProj_id] = v7;
		var v8 = this.ctx.camera.getInverseViewProj();
		this.manager.globals.map.h[this.cameraInverseViewProj_id] = v8;
		var v9 = this.ctx.time;
		this.manager.globals.map.h[this.globalTime_id] = v9;
		var v10 = new h3d_Vector(2 / this.ctx.engine.width,2 / this.ctx.engine.height);
		this.manager.globals.map.h[this.pixelSize_id] = v10;
	}
	,__class__: h3d_pass_Default
});
var h3d_pass_Shadows = function(light) {
	this.pcfScale = 1.0;
	this.pcfQuality = 1;
	this.bias = 0.01;
	this.power = 30.0;
	this.samplingKind = h3d_pass_ShadowSamplingKind.None;
	this.size = 1024;
	this.mode = h3d_pass_RenderMode.None;
	this.enabled = true;
	if(this.format == null) {
		this.format = hxd_PixelFormat.R16F;
	}
	if(!h3d_Engine.CURRENT.driver.isSupportedFormat(this.format)) {
		this.format = h3d_mat_Texture.nativeFormat;
	}
	h3d_pass_Default.call(this,"shadow");
	this.light = light;
	this.blur = new h3d_pass_Blur(5);
	this.blur.set_quality(0.5);
	var _this = this.blur.shader;
	_this.constModified = true;
	_this.isDepth__ = this.format == h3d_mat_Texture.nativeFormat;
};
$hxClasses["h3d.pass.Shadows"] = h3d_pass_Shadows;
h3d_pass_Shadows.__name__ = "h3d.pass.Shadows";
h3d_pass_Shadows.__super__ = h3d_pass_Default;
h3d_pass_Shadows.prototype = $extend(h3d_pass_Default.prototype,{
	set_size: function(s) {
		if(s != this.size && this.staticTexture != null) {
			this.staticTexture.dispose();
			this.staticTexture = null;
		}
		return this.size = s;
	}
	,getShadowProj: function() {
		return this.lightCamera.m;
	}
	,isUsingWorldDist: function() {
		return false;
	}
	,getOutputs: function() {
		if(this.isUsingWorldDist()) {
			return [hxsl_Output.Swiz(hxsl_Output.Value("output.worldDist",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
		}
		if(this.format == h3d_mat_Texture.nativeFormat) {
			return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
		}
		return [hxsl_Output.Swiz(hxsl_Output.Value("output.depth",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
	}
	,createDefaultShadowMap: function() {
		var tex = h3d_mat_Texture.fromColor(16777215);
		tex.name = "defaultShadowMap";
		return tex;
	}
	,syncShader: function(texture) {
	}
	,filterPasses: function(passes) {
		if(!this.ctx.computingStatic) {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var tmp;
				if(this.staticTexture != null) {
					var _this = this.staticTexture;
					tmp = _this.t == null && _this.realloc == null;
				} else {
					tmp = true;
				}
				if(tmp) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				this.syncShader(this.staticTexture);
				return false;
			case 2:
				return true;
			case 3:
				var tmp1;
				if(this.staticTexture != null) {
					var _this1 = this.staticTexture;
					tmp1 = _this1.t == null && _this1.realloc == null;
				} else {
					tmp1 = true;
				}
				if(tmp1) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				return true;
			}
		} else {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			case 2:
				return false;
			case 3:
				var head1 = null;
				var prev1 = null;
				var disc1 = passes.discarded;
				var discQueue1 = passes.lastDisc;
				var cur1 = passes.current;
				while(cur1 != null) {
					if(cur1.pass.isStatic == true) {
						if(head1 == null) {
							prev1 = cur1;
							head1 = prev1;
						} else {
							prev1.next = cur1;
							prev1 = cur1;
						}
					} else if(disc1 == null) {
						discQueue1 = cur1;
						disc1 = discQueue1;
					} else {
						discQueue1.next = cur1;
						discQueue1 = cur1;
					}
					cur1 = cur1.next;
				}
				if(prev1 != null) {
					prev1.next = null;
				}
				if(discQueue1 != null) {
					discQueue1.next = null;
				}
				passes.current = head1;
				passes.discarded = disc1;
				passes.lastDisc = discQueue1;
				return true;
			}
		}
	}
	,__class__: h3d_pass_Shadows
});
var h3d_pass_DirShadowMap = function(light) {
	this.mergePass = new h3d_pass_ScreenFx(new h3d_shader_MinMaxShader());
	h3d_pass_Shadows.call(this,light);
	this.lightCamera = new h3d_Camera();
	this.lightCamera.orthoBounds = new h3d_col_Bounds();
	this.shader = this.dshader = new h3d_shader_DirShadow();
	this.border = new h3d_pass_Border(this.size,this.size);
	this.customDepth = h3d_Engine.CURRENT.driver.hasFeature(h3d_impl_Feature.AllocDepthBuffer);
	if(!this.customDepth) {
		this.depth = h3d_mat_DepthBuffer.getDefault();
	}
};
$hxClasses["h3d.pass.DirShadowMap"] = h3d_pass_DirShadowMap;
h3d_pass_DirShadowMap.__name__ = "h3d.pass.DirShadowMap";
h3d_pass_DirShadowMap.__super__ = h3d_pass_Shadows;
h3d_pass_DirShadowMap.prototype = $extend(h3d_pass_Shadows.prototype,{
	set_mode: function(m) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = m != h3d_pass_RenderMode.None;
		return this.mode = m;
	}
	,set_size: function(s) {
		if(this.border != null && this.size != s) {
			this.border.dispose();
			this.border = new h3d_pass_Border(s,s);
		}
		return h3d_pass_Shadows.prototype.set_size.call(this,s);
	}
	,calcShadowBounds: function(camera) {
		var bounds = camera.orthoBounds;
		var mtmp = new h3d_Matrix();
		this.ctx.scene.iterVisibleMeshes(function(m) {
			if(m.primitive == null || !m.material.castShadows) {
				return;
			}
			var b = m.primitive.getBounds();
			if(b.xMin > b.xMax) {
				return;
			}
			var tmp = m.getAbsPos();
			mtmp.multiply3x4(tmp,camera.mcam);
			var x = b.xMin;
			var y = b.yMin;
			var z = b.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
			var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
			var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			if(p_x < bounds.xMin) {
				bounds.xMin = p_x;
			}
			if(p_x > bounds.xMax) {
				bounds.xMax = p_x;
			}
			if(p_y < bounds.yMin) {
				bounds.yMin = p_y;
			}
			if(p_y > bounds.yMax) {
				bounds.yMax = p_y;
			}
			if(p_z < bounds.zMin) {
				bounds.zMin = p_z;
			}
			if(p_z > bounds.zMax) {
				bounds.zMax = p_z;
			}
			var x1 = b.xMin;
			var y1 = b.yMin;
			var z1 = b.zMax;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p_x1 = x1;
			var p_y1 = y1;
			var p_z1 = z1;
			var px1 = p_x1 * mtmp._11 + p_y1 * mtmp._21 + p_z1 * mtmp._31 + mtmp._41;
			var py1 = p_x1 * mtmp._12 + p_y1 * mtmp._22 + p_z1 * mtmp._32 + mtmp._42;
			var pz1 = p_x1 * mtmp._13 + p_y1 * mtmp._23 + p_z1 * mtmp._33 + mtmp._43;
			p_x1 = px1;
			p_y1 = py1;
			p_z1 = pz1;
			if(p_x1 < bounds.xMin) {
				bounds.xMin = p_x1;
			}
			if(p_x1 > bounds.xMax) {
				bounds.xMax = p_x1;
			}
			if(p_y1 < bounds.yMin) {
				bounds.yMin = p_y1;
			}
			if(p_y1 > bounds.yMax) {
				bounds.yMax = p_y1;
			}
			if(p_z1 < bounds.zMin) {
				bounds.zMin = p_z1;
			}
			if(p_z1 > bounds.zMax) {
				bounds.zMax = p_z1;
			}
			var x2 = b.xMin;
			var y2 = b.yMax;
			var z2 = b.zMin;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var p_x2 = x2;
			var p_y2 = y2;
			var p_z2 = z2;
			var px2 = p_x2 * mtmp._11 + p_y2 * mtmp._21 + p_z2 * mtmp._31 + mtmp._41;
			var py2 = p_x2 * mtmp._12 + p_y2 * mtmp._22 + p_z2 * mtmp._32 + mtmp._42;
			var pz2 = p_x2 * mtmp._13 + p_y2 * mtmp._23 + p_z2 * mtmp._33 + mtmp._43;
			p_x2 = px2;
			p_y2 = py2;
			p_z2 = pz2;
			if(p_x2 < bounds.xMin) {
				bounds.xMin = p_x2;
			}
			if(p_x2 > bounds.xMax) {
				bounds.xMax = p_x2;
			}
			if(p_y2 < bounds.yMin) {
				bounds.yMin = p_y2;
			}
			if(p_y2 > bounds.yMax) {
				bounds.yMax = p_y2;
			}
			if(p_z2 < bounds.zMin) {
				bounds.zMin = p_z2;
			}
			if(p_z2 > bounds.zMax) {
				bounds.zMax = p_z2;
			}
			var x3 = b.xMin;
			var y3 = b.yMax;
			var z3 = b.zMax;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var p_x3 = x3;
			var p_y3 = y3;
			var p_z3 = z3;
			var px3 = p_x3 * mtmp._11 + p_y3 * mtmp._21 + p_z3 * mtmp._31 + mtmp._41;
			var py3 = p_x3 * mtmp._12 + p_y3 * mtmp._22 + p_z3 * mtmp._32 + mtmp._42;
			var pz3 = p_x3 * mtmp._13 + p_y3 * mtmp._23 + p_z3 * mtmp._33 + mtmp._43;
			p_x3 = px3;
			p_y3 = py3;
			p_z3 = pz3;
			if(p_x3 < bounds.xMin) {
				bounds.xMin = p_x3;
			}
			if(p_x3 > bounds.xMax) {
				bounds.xMax = p_x3;
			}
			if(p_y3 < bounds.yMin) {
				bounds.yMin = p_y3;
			}
			if(p_y3 > bounds.yMax) {
				bounds.yMax = p_y3;
			}
			if(p_z3 < bounds.zMin) {
				bounds.zMin = p_z3;
			}
			if(p_z3 > bounds.zMax) {
				bounds.zMax = p_z3;
			}
			var x4 = b.xMax;
			var y4 = b.yMin;
			var z4 = b.zMin;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var p_x4 = x4;
			var p_y4 = y4;
			var p_z4 = z4;
			var px4 = p_x4 * mtmp._11 + p_y4 * mtmp._21 + p_z4 * mtmp._31 + mtmp._41;
			var py4 = p_x4 * mtmp._12 + p_y4 * mtmp._22 + p_z4 * mtmp._32 + mtmp._42;
			var pz4 = p_x4 * mtmp._13 + p_y4 * mtmp._23 + p_z4 * mtmp._33 + mtmp._43;
			p_x4 = px4;
			p_y4 = py4;
			p_z4 = pz4;
			if(p_x4 < bounds.xMin) {
				bounds.xMin = p_x4;
			}
			if(p_x4 > bounds.xMax) {
				bounds.xMax = p_x4;
			}
			if(p_y4 < bounds.yMin) {
				bounds.yMin = p_y4;
			}
			if(p_y4 > bounds.yMax) {
				bounds.yMax = p_y4;
			}
			if(p_z4 < bounds.zMin) {
				bounds.zMin = p_z4;
			}
			if(p_z4 > bounds.zMax) {
				bounds.zMax = p_z4;
			}
			var x5 = b.xMax;
			var y5 = b.yMin;
			var z5 = b.zMax;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var p_x5 = x5;
			var p_y5 = y5;
			var p_z5 = z5;
			var px5 = p_x5 * mtmp._11 + p_y5 * mtmp._21 + p_z5 * mtmp._31 + mtmp._41;
			var py5 = p_x5 * mtmp._12 + p_y5 * mtmp._22 + p_z5 * mtmp._32 + mtmp._42;
			var pz5 = p_x5 * mtmp._13 + p_y5 * mtmp._23 + p_z5 * mtmp._33 + mtmp._43;
			p_x5 = px5;
			p_y5 = py5;
			p_z5 = pz5;
			if(p_x5 < bounds.xMin) {
				bounds.xMin = p_x5;
			}
			if(p_x5 > bounds.xMax) {
				bounds.xMax = p_x5;
			}
			if(p_y5 < bounds.yMin) {
				bounds.yMin = p_y5;
			}
			if(p_y5 > bounds.yMax) {
				bounds.yMax = p_y5;
			}
			if(p_z5 < bounds.zMin) {
				bounds.zMin = p_z5;
			}
			if(p_z5 > bounds.zMax) {
				bounds.zMax = p_z5;
			}
			var x6 = b.xMax;
			var y6 = b.yMax;
			var z6 = b.zMin;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			var p_x6 = x6;
			var p_y6 = y6;
			var p_z6 = z6;
			var px6 = p_x6 * mtmp._11 + p_y6 * mtmp._21 + p_z6 * mtmp._31 + mtmp._41;
			var py6 = p_x6 * mtmp._12 + p_y6 * mtmp._22 + p_z6 * mtmp._32 + mtmp._42;
			var pz6 = p_x6 * mtmp._13 + p_y6 * mtmp._23 + p_z6 * mtmp._33 + mtmp._43;
			p_x6 = px6;
			p_y6 = py6;
			p_z6 = pz6;
			if(p_x6 < bounds.xMin) {
				bounds.xMin = p_x6;
			}
			if(p_x6 > bounds.xMax) {
				bounds.xMax = p_x6;
			}
			if(p_y6 < bounds.yMin) {
				bounds.yMin = p_y6;
			}
			if(p_y6 > bounds.yMax) {
				bounds.yMax = p_y6;
			}
			if(p_z6 < bounds.zMin) {
				bounds.zMin = p_z6;
			}
			if(p_z6 > bounds.zMax) {
				bounds.zMax = p_z6;
			}
			var x7 = b.xMax;
			var y7 = b.yMax;
			var z7 = b.zMax;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			var p_x7 = x7;
			var p_y7 = y7;
			var p_z7 = z7;
			var px7 = p_x7 * mtmp._11 + p_y7 * mtmp._21 + p_z7 * mtmp._31 + mtmp._41;
			var py7 = p_x7 * mtmp._12 + p_y7 * mtmp._22 + p_z7 * mtmp._32 + mtmp._42;
			var pz7 = p_x7 * mtmp._13 + p_y7 * mtmp._23 + p_z7 * mtmp._33 + mtmp._43;
			p_x7 = px7;
			p_y7 = py7;
			p_z7 = pz7;
			if(p_x7 < bounds.xMin) {
				bounds.xMin = p_x7;
			}
			if(p_x7 > bounds.xMax) {
				bounds.xMax = p_x7;
			}
			if(p_y7 < bounds.yMin) {
				bounds.yMin = p_y7;
			}
			if(p_y7 > bounds.yMax) {
				bounds.yMax = p_y7;
			}
			if(p_z7 < bounds.zMin) {
				bounds.zMin = p_z7;
			}
			if(p_z7 > bounds.zMax) {
				bounds.zMax = p_z7;
			}
		});
		if(this.mode == h3d_pass_RenderMode.Dynamic) {
			var cameraBounds = new h3d_col_Bounds();
			var _g = 0;
			var _g1 = this.ctx.camera.getFrustumCorners();
			while(_g < _g1.length) {
				var pt = _g1[_g];
				++_g;
				var m1 = camera.mcam;
				var px8 = pt.x * m1._11 + pt.y * m1._21 + pt.z * m1._31 + pt.w * m1._41;
				var py8 = pt.x * m1._12 + pt.y * m1._22 + pt.z * m1._32 + pt.w * m1._42;
				var pz8 = pt.x * m1._13 + pt.y * m1._23 + pt.z * m1._33 + pt.w * m1._43;
				var pw = pt.x * m1._14 + pt.y * m1._24 + pt.z * m1._34 + pt.w * m1._44;
				pt.x = px8;
				pt.y = py8;
				pt.z = pz8;
				pt.w = pw;
				var x8 = pt.x;
				var y8 = pt.y;
				var z8 = pt.z;
				if(x8 < cameraBounds.xMin) {
					cameraBounds.xMin = x8;
				}
				if(x8 > cameraBounds.xMax) {
					cameraBounds.xMax = x8;
				}
				if(y8 < cameraBounds.yMin) {
					cameraBounds.yMin = y8;
				}
				if(y8 > cameraBounds.yMax) {
					cameraBounds.yMax = y8;
				}
				if(z8 < cameraBounds.zMin) {
					cameraBounds.zMin = z8;
				}
				if(z8 > cameraBounds.zMax) {
					cameraBounds.zMax = z8;
				}
			}
			cameraBounds.zMin = bounds.zMin;
			bounds.intersection(bounds,cameraBounds);
		}
		bounds.scaleCenter(1.01);
	}
	,setGlobals: function() {
		h3d_pass_Shadows.prototype.setGlobals.call(this);
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var _this = this.lightCamera.orthoBounds;
			_this.xMin = 1e20;
			_this.xMax = -1e20;
			_this.yMin = 1e20;
			_this.yMax = -1e20;
			_this.zMin = 1e20;
			_this.zMax = -1e20;
			this.calcShadowBounds(this.lightCamera);
			this.lightCamera.update();
		}
		var v = this.getShadowProj();
		this.manager.globals.map.h[this.cameraViewProj_id] = v;
	}
	,syncShader: function(texture) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = texture;
		var _this1 = this.dshader;
		_this1.constModified = true;
		_this1.shadowMapChannel__ = this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R;
		this.dshader.shadowBias__ = this.bias;
		this.dshader.shadowPower__ = this.power;
		this.dshader.shadowProj__ = this.getShadowProj();
		var _this2 = this.dshader;
		_this2.constModified = true;
		_this2.USE_ESM__ = this.samplingKind == h3d_pass_ShadowSamplingKind.ESM;
		this.dshader.shadowPower__ = this.power;
		var _this3 = this.dshader;
		_this3.constModified = true;
		_this3.USE_PCF__ = this.samplingKind == h3d_pass_ShadowSamplingKind.PCF;
		var _this4 = this.dshader.shadowRes__;
		var x = texture.width;
		var y = texture.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this4.x = x;
		_this4.y = y;
		_this4.z = 0.;
		_this4.w = 1.;
		this.dshader.pcfScale__ = this.pcfScale;
		var _this5 = this.dshader;
		_this5.constModified = true;
		_this5.pcfQuality__ = this.pcfQuality;
	}
	,draw: function(passes,sort) {
		var _gthis = this;
		if(!this.enabled) {
			return;
		}
		if(!this.filterPasses(passes)) {
			return;
		}
		var f = function(col) {
			return col.inFrustum(_gthis.lightCamera.frustum);
		};
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col1 = cur.obj.cullingCollider;
			var tmp;
			if(col1 == null) {
				tmp = true;
			} else {
				if(col1 != prevCollider) {
					prevCollider = col1;
					prevResult = f(col1);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		var texture = this.ctx.textures.allocTarget("dirShadowMap",this.size,this.size,false,this.format);
		if(this.customDepth && (this.depth == null || this.depth.width != this.size || this.depth.height != this.size || this.depth.isDisposed())) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d_mat_DepthBuffer(this.size,this.size);
		}
		texture.depthBuffer = this.depth;
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var ct = this.ctx.camera.target;
			var slight = this.light == null ? this.ctx.lightSystem.shadowLight : this.light;
			var ldir = slight == null ? null : slight.getShadowDirection();
			if(ldir == null) {
				var _this = this.lightCamera.target;
				var x = 0;
				var y = 0;
				var z = -1;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				_this.w = 1.;
			} else {
				var _this1 = this.lightCamera.target;
				var x1 = ldir.x;
				var y1 = ldir.y;
				var z1 = ldir.z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				_this1.x = x1;
				_this1.y = y1;
				_this1.z = z1;
				_this1.w = 1.;
				this.lightCamera.target.normalize();
			}
			this.lightCamera.target.x += ct.x;
			this.lightCamera.target.y += ct.y;
			this.lightCamera.target.z += ct.z;
			var _this2 = this.lightCamera.pos;
			_this2.x = ct.x;
			_this2.y = ct.y;
			_this2.z = ct.z;
			_this2.w = ct.w;
			this.lightCamera.update();
		}
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(16777215,1);
		h3d_pass_Shadows.prototype.draw.call(this,passes,sort);
		if(this.border != null) {
			this.border.render();
		}
		this.ctx.engine.popTarget();
		if(this.mode == h3d_pass_RenderMode.Mixed && !this.ctx.computingStatic) {
			var merge = this.ctx.textures.allocTarget("mergedDirShadowMap",this.size,this.size,false,this.format);
			this.mergePass.shader.texA__ = texture;
			this.mergePass.shader.texB__ = this.staticTexture;
			this.ctx.engine.pushTarget(merge);
			this.mergePass.render();
			this.ctx.engine.popTarget();
			texture = merge;
		}
		if(this.blur.radius > 0 && (this.mode != h3d_pass_RenderMode.Mixed || !this.ctx.computingStatic)) {
			this.blur.apply(this.ctx,texture);
		}
		this.syncShader(texture);
	}
	,__class__: h3d_pass_DirShadowMap
});
var h3d_pass_DefaultShadowMap = function(size,format) {
	if(size == null) {
		size = 1024;
	}
	if(format != null) {
		this.format = format;
	}
	h3d_pass_DirShadowMap.call(this,null);
	this.set_size(size);
	this.color = new h3d_Vector();
	this.set_mode(h3d_pass_RenderMode.Dynamic);
	this.shadowMapId = hxsl_Globals.allocID("shadow.map");
	this.shadowProjId = hxsl_Globals.allocID("shadow.proj");
	this.shadowColorId = hxsl_Globals.allocID("shadow.color");
	this.shadowPowerId = hxsl_Globals.allocID("shadow.power");
	this.shadowBiasId = hxsl_Globals.allocID("shadow.bias");
};
$hxClasses["h3d.pass.DefaultShadowMap"] = h3d_pass_DefaultShadowMap;
h3d_pass_DefaultShadowMap.__name__ = "h3d.pass.DefaultShadowMap";
h3d_pass_DefaultShadowMap.__super__ = h3d_pass_DirShadowMap;
h3d_pass_DefaultShadowMap.prototype = $extend(h3d_pass_DirShadowMap.prototype,{
	draw: function(passes,sort) {
		h3d_pass_DirShadowMap.prototype.draw.call(this,passes,sort);
		this.ctx.setGlobalID(this.shadowMapId,{ texture : this.dshader.shadowMap__, channel : this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R});
		this.ctx.setGlobalID(this.shadowProjId,this.getShadowProj());
		this.ctx.setGlobalID(this.shadowColorId,this.color);
		this.ctx.setGlobalID(this.shadowPowerId,this.power);
		this.ctx.setGlobalID(this.shadowBiasId,this.bias);
	}
	,__class__: h3d_pass_DefaultShadowMap
});
var h3d_pass__$HardwarePick_FixedColor = function() {
	this.viewport__ = new h3d_Vector();
	this.colorID__ = new h3d_Vector();
	hxsl_Shader.call(this);
};
$hxClasses["h3d.pass._HardwarePick.FixedColor"] = h3d_pass__$HardwarePick_FixedColor;
h3d_pass__$HardwarePick_FixedColor.__name__ = "h3d.pass._HardwarePick.FixedColor";
h3d_pass__$HardwarePick_FixedColor.__super__ = hxsl_Shader;
h3d_pass__$HardwarePick_FixedColor.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.colorID__;
		case 1:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_pass__$HardwarePick_FixedColor
});
var h3d_pass_PassList = function(current) {
	this.current = current;
	this.discarded = this.lastDisc = null;
};
$hxClasses["h3d.pass.PassList"] = h3d_pass_PassList;
h3d_pass_PassList.__name__ = "h3d.pass.PassList";
h3d_pass_PassList.prototype = {
	__class__: h3d_pass_PassList
};
var h3d_pass_PassObject = function() {
	this.texture = 0;
};
$hxClasses["h3d.pass.PassObject"] = h3d_pass_PassObject;
h3d_pass_PassObject.__name__ = "h3d.pass.PassObject";
h3d_pass_PassObject.prototype = {
	__class__: h3d_pass_PassObject
};
var h3d_pass_ShaderManager = function(output) {
	this.shaderCache = hxsl_Cache.get();
	this.globals = new hxsl_Globals();
	this.currentOutput = new hxsl_ShaderList(null);
	this.setOutput(output);
};
$hxClasses["h3d.pass.ShaderManager"] = h3d_pass_ShaderManager;
h3d_pass_ShaderManager.__name__ = "h3d.pass.ShaderManager";
h3d_pass_ShaderManager.prototype = {
	setOutput: function(output) {
		if(output == null) {
			output = [hxsl_Output.Value("output.color")];
		}
		this.currentOutput.s = this.shaderCache.getLinkShader(output);
	}
	,fillRec: function(v,type,out,pos) {
		switch(type._hx_index) {
		case 1:
			out[pos] = v;
			return 1;
		case 3:
			out[pos] = v;
			return 1;
		case 5:
			var _g1 = type.t;
			var n = type.size;
			var v1 = v;
			out[pos++] = v1.x;
			out[pos++] = v1.y;
			switch(n) {
			case 3:
				out[pos++] = v1.z;
				break;
			case 4:
				out[pos++] = v1.z;
				out[pos++] = v1.w;
				break;
			}
			return n;
		case 6:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = 0;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = 0;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = 0;
			return 12;
		case 7:
			var m1 = v;
			out[pos++] = m1._11;
			out[pos++] = m1._21;
			out[pos++] = m1._31;
			out[pos++] = m1._41;
			out[pos++] = m1._12;
			out[pos++] = m1._22;
			out[pos++] = m1._32;
			out[pos++] = m1._42;
			out[pos++] = m1._13;
			out[pos++] = m1._23;
			out[pos++] = m1._33;
			out[pos++] = m1._43;
			out[pos++] = m1._14;
			out[pos++] = m1._24;
			out[pos++] = m1._34;
			out[pos++] = m1._44;
			return 16;
		case 8:
			var m2 = v;
			out[pos++] = m2._11;
			out[pos++] = m2._21;
			out[pos++] = m2._31;
			out[pos++] = m2._41;
			out[pos++] = m2._12;
			out[pos++] = m2._22;
			out[pos++] = m2._32;
			out[pos++] = m2._42;
			out[pos++] = m2._13;
			out[pos++] = m2._23;
			out[pos++] = m2._33;
			out[pos++] = m2._43;
			return 12;
		case 13:
			var vl = type.vl;
			var tot = 0;
			var _g = 0;
			while(_g < vl.length) {
				var vv = vl[_g];
				++_g;
				tot += this.fillRec(Reflect.field(v,vv.name),vv.type,out,pos + tot);
			}
			return tot;
		case 15:
			var _g4 = type.size;
			var _g3 = type.t;
			switch(_g3._hx_index) {
			case 3:
				if(_g4._hx_index == 0) {
					var len = _g4.v;
					var v2 = v;
					var size = 0;
					var count = v2.length < len ? v2.length : len;
					var _g2 = 0;
					var _g11 = count;
					while(_g2 < _g11) {
						var i = _g2++;
						out[pos++] = v2[i];
					}
					return len;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			case 5:
				if(_g3.size == 4) {
					if(_g3.t._hx_index == 1) {
						if(_g4._hx_index == 0) {
							var len1 = _g4.v;
							var v3 = v;
							var _g5 = 0;
							var _g12 = len1;
							while(_g5 < _g12) {
								var i1 = _g5++;
								var n1 = v3[i1];
								if(n1 == null) {
									break;
								}
								out[pos++] = n1.x;
								out[pos++] = n1.y;
								out[pos++] = n1.z;
								out[pos++] = n1.w;
							}
							return len1 * 4;
						} else {
							throw new js__$Boot_HaxeError("assert " + Std.string(type));
						}
					} else if(_g4._hx_index == 0) {
						var len2 = _g4.v;
						var t = _g3;
						var v4 = v;
						var size1 = 0;
						var _g6 = 0;
						var _g13 = len2;
						while(_g6 < _g13) {
							var i2 = _g6++;
							var n2 = v4[i2];
							if(n2 == null) {
								break;
							}
							size1 = this.fillRec(n2,t,out,pos);
							pos += size1;
						}
						return len2 * size1;
					} else {
						throw new js__$Boot_HaxeError("assert " + Std.string(type));
					}
				} else if(_g4._hx_index == 0) {
					var len3 = _g4.v;
					var t1 = _g3;
					var v5 = v;
					var size2 = 0;
					var _g7 = 0;
					var _g14 = len3;
					while(_g7 < _g14) {
						var i3 = _g7++;
						var n3 = v5[i3];
						if(n3 == null) {
							break;
						}
						size2 = this.fillRec(n3,t1,out,pos);
						pos += size2;
					}
					return len3 * size2;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			case 8:
				if(_g4._hx_index == 0) {
					var len4 = _g4.v;
					var v6 = v;
					var _g8 = 0;
					var _g15 = len4;
					while(_g8 < _g15) {
						var i4 = _g8++;
						var m3 = v6[i4];
						if(m3 == null) {
							break;
						}
						out[pos++] = m3._11;
						out[pos++] = m3._21;
						out[pos++] = m3._31;
						out[pos++] = m3._41;
						out[pos++] = m3._12;
						out[pos++] = m3._22;
						out[pos++] = m3._32;
						out[pos++] = m3._42;
						out[pos++] = m3._13;
						out[pos++] = m3._23;
						out[pos++] = m3._33;
						out[pos++] = m3._43;
					}
					return len4 * 12;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			default:
				if(_g4._hx_index == 0) {
					var len5 = _g4.v;
					var t2 = _g3;
					var v7 = v;
					var size3 = 0;
					var _g9 = 0;
					var _g16 = len5;
					while(_g9 < _g16) {
						var i5 = _g9++;
						var n4 = v7[i5];
						if(n4 == null) {
							break;
						}
						size3 = this.fillRec(n4,t2,out,pos);
						pos += size3;
					}
					return len5 * size3;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
			}
			break;
		default:
			throw new js__$Boot_HaxeError("assert " + Std.string(type));
		}
	}
	,shaderInfo: function(shaders,path) {
		var name = path.split(".").pop();
		while(shaders != null) {
			var inst = shaders.s.instance;
			var _g = 0;
			var _g1 = inst.shader.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.name == name) {
					return shaders.s.toString();
				}
			}
			shaders = shaders.next;
		}
		return "(not found)";
	}
	,fillGlobals: function(buf,s) {
		var _gthis = this;
		var s1 = s.vertex;
		var g = s1.globals;
		var ptr = buf.vertex.globals;
		while(g != null) {
			var v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				if(g.path == "__consts__") {
					_gthis.fillRec(s1.consts,g.type,ptr,g.pos);
					g = g.next;
					continue;
				}
				throw new js__$Boot_HaxeError("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
		var s2 = s.fragment;
		var g1 = s2.globals;
		var ptr1 = buf.fragment.globals;
		while(g1 != null) {
			var v1 = _gthis.globals.map.h[g1.gid];
			if(v1 == null) {
				if(g1.path == "__consts__") {
					_gthis.fillRec(s2.consts,g1.type,ptr1,g1.pos);
					g1 = g1.next;
					continue;
				}
				throw new js__$Boot_HaxeError("Missing global value " + g1.path);
			}
			_gthis.fillRec(v1,g1.type,ptr1,g1.pos);
			g1 = g1.next;
		}
	}
	,fillParams: function(buf,s,shaders) {
		var _gthis = this;
		var curInstance = -1;
		var curInstanceValue = null;
		var buf1 = buf.vertex;
		var s1 = s.vertex;
		var p = s1.params;
		var ptr = buf1.params;
		while(p != null) {
			var v;
			if(p.perObjectGlobal == null) {
				if(p.type == hxsl_Type.TFloat) {
					var index = p.instance;
					var i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				}
				var index1 = p.instance;
				var v1;
				if(curInstance == index1) {
					v1 = curInstanceValue;
				} else {
					var si1 = shaders;
					curInstance = index1;
					while(--index1 > 0) si1 = si1.next;
					curInstanceValue = si1.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v2 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var v3;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					v3 = true;
				} else {
					v3 = false;
				}
				v = v3 ? v2.texture : v2;
			} else {
				var si2 = shaders;
				var n = p.instance;
				while(--n > 0) si2 = si2.next;
				var v4 = si2.s.getParamValue(p.index);
				if(v4 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si2.s) + "." + p.name);
				}
				v = v4;
			}
			_gthis.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p1 = s1.textures;
		while(p1 != null) {
			var this1 = buf1.tex;
			var index2 = tid++;
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var val;
			if(p1.perObjectGlobal != null) {
				var v5 = _gthis.globals.map.h[p1.perObjectGlobal.gid];
				if(v5 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p1.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p1.perObjectGlobal.path));
				}
				var _g2 = p1.type;
				var val1;
				if(_g2._hx_index == 17) {
					var _g11 = _g2.size;
					val1 = true;
				} else {
					val1 = false;
				}
				val = val1 ? v5.texture : v5;
			} else {
				var si3 = shaders;
				var n1 = p1.instance;
				while(--n1 > 0) si3 = si3.next;
				var v6 = si3.s.getParamValue(p1.index);
				if(v6 == null && !opt) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si3.s) + "." + p1.name);
				}
				val = v6;
			}
			this1[index2] = val;
			p1 = p1.next;
		}
		var p2 = s1.buffers;
		var bid = 0;
		while(p2 != null) {
			var opt1 = !h3d_pass_ShaderManager.STRICT;
			if(opt1 == null) {
				opt1 = false;
			}
			var b;
			if(p2.perObjectGlobal != null) {
				var v7 = _gthis.globals.map.h[p2.perObjectGlobal.gid];
				if(v7 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p2.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p2.perObjectGlobal.path));
				}
				var _g3 = p2.type;
				var b1;
				if(_g3._hx_index == 17) {
					var _g12 = _g3.size;
					b1 = true;
				} else {
					b1 = false;
				}
				b = b1 ? v7.texture : v7;
			} else {
				var si4 = shaders;
				var n2 = p2.instance;
				while(--n2 > 0) si4 = si4.next;
				var v8 = si4.s.getParamValue(p2.index);
				if(v8 == null && !opt1) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si4.s) + "." + p2.name);
				}
				b = v8;
			}
			buf1.buffers[bid++] = b;
			p2 = p2.next;
		}
		var buf2 = buf.fragment;
		var s2 = s.fragment;
		var p3 = s2.params;
		var ptr1 = buf2.params;
		while(p3 != null) {
			var v9;
			if(p3.perObjectGlobal == null) {
				if(p3.type == hxsl_Type.TFloat) {
					var index3 = p3.instance;
					var i1;
					if(curInstance == index3) {
						i1 = curInstanceValue;
					} else {
						var si5 = shaders;
						curInstance = index3;
						while(--index3 > 0) si5 = si5.next;
						curInstanceValue = si5.s;
						i1 = curInstanceValue;
					}
					ptr1[p3.pos] = i1.getParamFloatValue(p3.index);
					p3 = p3.next;
					continue;
				}
				var index4 = p3.instance;
				var v10;
				if(curInstance == index4) {
					v10 = curInstanceValue;
				} else {
					var si6 = shaders;
					curInstance = index4;
					while(--index4 > 0) si6 = si6.next;
					curInstanceValue = si6.s;
					v10 = curInstanceValue;
				}
				v9 = v10.getParamValue(p3.index);
				if(v9 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(curInstanceValue) + "." + p3.name);
				}
			} else if(p3.perObjectGlobal != null) {
				var v11 = _gthis.globals.map.h[p3.perObjectGlobal.gid];
				if(v11 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p3.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p3.perObjectGlobal.path));
				}
				var _g4 = p3.type;
				var v12;
				if(_g4._hx_index == 17) {
					var _g13 = _g4.size;
					v12 = true;
				} else {
					v12 = false;
				}
				v9 = v12 ? v11.texture : v11;
			} else {
				var si7 = shaders;
				var n3 = p3.instance;
				while(--n3 > 0) si7 = si7.next;
				var v13 = si7.s.getParamValue(p3.index);
				if(v13 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si7.s) + "." + p3.name);
				}
				v9 = v13;
			}
			_gthis.fillRec(v9,p3.type,ptr1,p3.pos);
			p3 = p3.next;
		}
		var tid1 = 0;
		var p4 = s2.textures;
		while(p4 != null) {
			var this2 = buf2.tex;
			var index5 = tid1++;
			var opt2 = !h3d_pass_ShaderManager.STRICT;
			if(opt2 == null) {
				opt2 = false;
			}
			var val2;
			if(p4.perObjectGlobal != null) {
				var v14 = _gthis.globals.map.h[p4.perObjectGlobal.gid];
				if(v14 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p4.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p4.perObjectGlobal.path));
				}
				var _g5 = p4.type;
				var val3;
				if(_g5._hx_index == 17) {
					var _g14 = _g5.size;
					val3 = true;
				} else {
					val3 = false;
				}
				val2 = val3 ? v14.texture : v14;
			} else {
				var si8 = shaders;
				var n4 = p4.instance;
				while(--n4 > 0) si8 = si8.next;
				var v15 = si8.s.getParamValue(p4.index);
				if(v15 == null && !opt2) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si8.s) + "." + p4.name);
				}
				val2 = v15;
			}
			this2[index5] = val2;
			p4 = p4.next;
		}
		var p5 = s2.buffers;
		var bid1 = 0;
		while(p5 != null) {
			var opt3 = !h3d_pass_ShaderManager.STRICT;
			if(opt3 == null) {
				opt3 = false;
			}
			var b2;
			if(p5.perObjectGlobal != null) {
				var v16 = _gthis.globals.map.h[p5.perObjectGlobal.gid];
				if(v16 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p5.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p5.perObjectGlobal.path));
				}
				var _g6 = p5.type;
				var b3;
				if(_g6._hx_index == 17) {
					var _g15 = _g6.size;
					b3 = true;
				} else {
					b3 = false;
				}
				b2 = b3 ? v16.texture : v16;
			} else {
				var si9 = shaders;
				var n5 = p5.instance;
				while(--n5 > 0) si9 = si9.next;
				var v17 = si9.s.getParamValue(p5.index);
				if(v17 == null && !opt3) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si9.s) + "." + p5.name);
				}
				b2 = v17;
			}
			buf2.buffers[bid1++] = b2;
			p5 = p5.next;
		}
	}
	,compileShaders: function(shaders,batchMode) {
		if(batchMode == null) {
			batchMode = false;
		}
		this.globals.maxChannels = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			s1.updateConstants(this.globals);
		}
		this.currentOutput.next = shaders;
		var s2 = this.shaderCache.link(this.currentOutput,batchMode);
		this.currentOutput.next = null;
		return s2;
	}
	,__class__: h3d_pass_ShaderManager
};
var h3d_pass_RenderMode = $hxEnums["h3d.pass.RenderMode"] = { __ename__ : true, __constructs__ : ["None","Static","Dynamic","Mixed"]
	,None: {_hx_index:0,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Static: {_hx_index:1,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Dynamic: {_hx_index:2,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Mixed: {_hx_index:3,__enum__:"h3d.pass.RenderMode",toString:$estr}
};
h3d_pass_RenderMode.__empty_constructs__ = [h3d_pass_RenderMode.None,h3d_pass_RenderMode.Static,h3d_pass_RenderMode.Dynamic,h3d_pass_RenderMode.Mixed];
var h3d_pass_ShadowSamplingKind = $hxEnums["h3d.pass.ShadowSamplingKind"] = { __ename__ : true, __constructs__ : ["None","PCF","ESM"]
	,None: {_hx_index:0,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,PCF: {_hx_index:1,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,ESM: {_hx_index:2,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
};
h3d_pass_ShadowSamplingKind.__empty_constructs__ = [h3d_pass_ShadowSamplingKind.None,h3d_pass_ShadowSamplingKind.PCF,h3d_pass_ShadowSamplingKind.ESM];
var h3d_pass_SortByMaterial = function() {
	this.textureCount = 1;
	this.shaderCount = 1;
	this.shaderIdMap = [];
	this.textureIdMap = [];
};
$hxClasses["h3d.pass.SortByMaterial"] = h3d_pass_SortByMaterial;
h3d_pass_SortByMaterial.__name__ = "h3d.pass.SortByMaterial";
h3d_pass_SortByMaterial.prototype = {
	sort: function(passes) {
		var _gthis = this;
		var shaderStart = this.shaderCount;
		var textureStart = this.textureCount;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			if(this.shaderIdMap[p.shader.id] < shaderStart || this.shaderIdMap[p.shader.id] == null) {
				this.shaderIdMap[p.shader.id] = this.shaderCount++;
			}
			if(this.textureIdMap[p.texture] < textureStart || this.textureIdMap[p.shader.id] == null) {
				this.textureIdMap[p.texture] = this.textureCount++;
			}
		}
		var list = passes.current;
		var tmp1;
		if(list == null) {
			tmp1 = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p1;
			var q;
			var e;
			var tail;
			while(true) {
				p1 = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p1 != null) {
					++nmerges;
					q = p1;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else {
							var tmp2;
							if(!(qsize == 0 || q == null)) {
								var d = _gthis.shaderIdMap[p1.shader.id] - _gthis.shaderIdMap[q.shader.id];
								tmp2 = (d != 0 ? d : _gthis.textureIdMap[p1.texture] - _gthis.textureIdMap[q.texture]) <= 0;
							} else {
								tmp2 = true;
							}
							if(tmp2) {
								e = p1;
								p1 = p1.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p1 = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp1 = list;
		}
		passes.current = tmp1;
	}
	,__class__: h3d_pass_SortByMaterial
};
var h3d_prim_Plane2D = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.Plane2D"] = h3d_prim_Plane2D;
h3d_prim_Plane2D.__name__ = "h3d.prim.Plane2D";
h3d_prim_Plane2D.get = function() {
	var engine = h3d_Engine.CURRENT;
	var inst = engine.resCache.h[h3d_prim_Plane2D.__id__];
	if(inst == null) {
		inst = new h3d_prim_Plane2D();
		engine.resCache.set(h3d_prim_Plane2D,inst);
	}
	return inst;
};
h3d_prim_Plane2D.__super__ = h3d_prim_Primitive;
h3d_prim_Plane2D.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		var v = this1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize1 = v.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(v.array);
			v.array = newArray1;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize2 = v.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(v.array);
			v.array = newArray2;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize3 = v.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(v.array);
			v.array = newArray3;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize4 = v.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(v.array);
			v.array = newArray4;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize5 = v.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(v.array);
			v.array = newArray5;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize6 = v.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(v.array);
			v.array = newArray6;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize7 = v.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(v.array);
			v.array = newArray7;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize8 = v.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(v.array);
			v.array = newArray8;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize9 = v.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(v.array);
			v.array = newArray9;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize10 = v.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(v.array);
			v.array = newArray10;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize11 = v.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(v.array);
			v.array = newArray11;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize12 = v.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(v.array);
			v.array = newArray12;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize13 = v.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(v.array);
			v.array = newArray13;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize14 = v.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(v.array);
			v.array = newArray14;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize15 = v.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(v.array);
			v.array = newArray15;
		}
		v.array[v.pos++] = 0;
		this.buffer = h3d_Buffer.ofFloats(v,4,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
	}
	,__class__: h3d_prim_Plane2D
});
var h3d_prim_RawPrimitive = function(inf,persist) {
	if(persist == null) {
		persist = false;
	}
	h3d_prim_Primitive.call(this);
	this.onContextLost = function() {
		return inf;
	};
	this.bounds = inf.bounds;
	this.alloc(null);
	if(!persist) {
		this.onContextLost = null;
	}
};
$hxClasses["h3d.prim.RawPrimitive"] = h3d_prim_RawPrimitive;
h3d_prim_RawPrimitive.__name__ = "h3d.prim.RawPrimitive";
h3d_prim_RawPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_RawPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		if(this.onContextLost == null) {
			throw new js__$Boot_HaxeError("Cannot realloc " + Std.string(this));
		}
		var inf = this.onContextLost();
		var flags = [];
		if(inf.ibuf == null) {
			flags.push(inf.quads ? h3d_BufferFlag.Quads : h3d_BufferFlag.Triangles);
		}
		if(inf.stride < 8) {
			flags.push(h3d_BufferFlag.RawFormat);
		}
		this.buffer = h3d_Buffer.ofFloats(inf.vbuf,inf.stride,flags);
		this.vcount = this.buffer.vertices;
		this.tcount = inf.ibuf != null ? inf.ibuf.length / 3 | 0 : inf.quads ? this.vcount >> 1 : this.vcount / 3 | 0;
		if(inf.ibuf != null) {
			this.indexes = h3d_Indexes.alloc(inf.ibuf);
		} else if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,getBounds: function() {
		if(this.bounds == null) {
			throw new js__$Boot_HaxeError("Bounds not defined for " + Std.string(this));
		}
		return this.bounds;
	}
	,__class__: h3d_prim_RawPrimitive
});
var h3d_scene_Object = function(parent) {
	var this1 = 0;
	this.flags = this1;
	this.absPos = new h3d_Matrix();
	this.absPos.identity();
	this.x = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.y = 0;
	var f1 = 1;
	var b1 = true;
	if(b1) {
		this.flags |= f1;
	} else {
		this.flags &= ~f1;
	}
	this.z = 0;
	var f2 = 1;
	var b2 = true;
	if(b2) {
		this.flags |= f2;
	} else {
		this.flags &= ~f2;
	}
	this.scaleX = 1;
	var f3 = 1;
	var b3 = true;
	if(b3) {
		this.flags |= f3;
	} else {
		this.flags &= ~f3;
	}
	this.scaleY = 1;
	var f4 = 1;
	var b4 = true;
	if(b4) {
		this.flags |= f4;
	} else {
		this.flags &= ~f4;
	}
	this.scaleZ = 1;
	var f5 = 1;
	var b5 = true;
	if(b5) {
		this.flags |= f5;
	} else {
		this.flags &= ~f5;
	}
	this.qRot = new h3d_Quat();
	var f6 = 1;
	var b6 = this.follow != null;
	if(b6) {
		this.flags |= f6;
	} else {
		this.flags &= ~f6;
	}
	var f7 = 2;
	this.flags |= f7;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h3d.scene.Object"] = h3d_scene_Object;
h3d_scene_Object.__name__ = "h3d.scene.Object";
h3d_scene_Object.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_scene_Object.prototype = {
	set_cullingCollider: function(c) {
		this.cullingCollider = c;
		var f = 4096;
		this.flags &= ~f;
		return c;
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h3d_Vector();
		}
		var m = this.absPos;
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + pt.w * m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + pt.w * m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + pt.w * m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,getInvPos: function() {
		this.syncPos();
		if(this.invPos == null) {
			this.invPos = new h3d_Matrix();
			this.invPos._44 = 0;
		}
		if(this.invPos._44 == 0) {
			this.invPos.inverse3x4(this.absPos);
		}
		return this.invPos;
	}
	,addChild: function(o) {
		this.addChildAt(o,this.children.length);
	}
	,addChildAt: function(o,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == o) {
				throw new js__$Boot_HaxeError("Recursive addChild");
			}
			p = p.parent;
		}
		if(o.parent != null) {
			var old = (o.flags & 32) != 0;
			var f = 32;
			o.flags &= ~f;
			o.parent.removeChild(o);
			var f1 = 32;
			if(old) {
				o.flags |= f1;
			} else {
				o.flags &= ~f1;
			}
		}
		this.children.splice(pos,0,o);
		if((this.flags & 32) == 0 && (o.flags & 32) != 0) {
			o.onRemove();
		}
		o.parent = this;
		var f2 = 1;
		var b = true;
		if(b) {
			o.flags |= f2;
		} else {
			o.flags &= ~f2;
		}
		if((this.flags & 32) != 0) {
			if((o.flags & 32) == 0) {
				o.onAdd();
			} else {
				o.onParentChanged();
			}
		}
	}
	,iterVisibleMeshes: function(callb) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 4) == 0) {
			var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
			if(m != null) {
				callb(m);
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.iterVisibleMeshes(callb);
		}
	}
	,onParentChanged: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	,onAdd: function() {
		var f = 32;
		this.flags |= f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		var f = 32;
		this.flags &= ~f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,removeChild: function(o) {
		if(HxOverrides.remove(this.children,o)) {
			if((o.flags & 32) != 0) {
				o.onRemove();
			}
			o.parent = null;
			var f = 1;
			var b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		return ((p) instanceof h3d_scene_Scene) ? p : null;
	}
	,getAbsPos: function() {
		this.syncPos();
		return this.absPos;
	}
	,draw: function(ctx) {
	}
	,calcAbsPos: function() {
		this.qRot.toMatrix(this.absPos);
		this.absPos._11 *= this.scaleX;
		this.absPos._12 *= this.scaleX;
		this.absPos._13 *= this.scaleX;
		this.absPos._21 *= this.scaleY;
		this.absPos._22 *= this.scaleY;
		this.absPos._23 *= this.scaleY;
		this.absPos._31 *= this.scaleZ;
		this.absPos._32 *= this.scaleZ;
		this.absPos._33 *= this.scaleZ;
		this.absPos._41 = this.x;
		this.absPos._42 = this.y;
		this.absPos._43 = this.z;
		if(this.follow != null) {
			this.follow.syncPos();
			if((this.flags & 8) != 0) {
				var _this = this.absPos;
				var a = this.absPos;
				var b = this.parent.absPos;
				var m11 = a._11;
				var m12 = a._12;
				var m13 = a._13;
				var m21 = a._21;
				var m22 = a._22;
				var m23 = a._23;
				var a31 = a._31;
				var a32 = a._32;
				var a33 = a._33;
				var a41 = a._41;
				var a42 = a._42;
				var a43 = a._43;
				var b11 = b._11;
				var b12 = b._12;
				var b13 = b._13;
				var b21 = b._21;
				var b22 = b._22;
				var b23 = b._23;
				var b31 = b._31;
				var b32 = b._32;
				var b33 = b._33;
				var b41 = b._41;
				var b42 = b._42;
				var b43 = b._43;
				_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
				_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
				_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
				_this._14 = 0;
				_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
				_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
				_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
				_this._24 = 0;
				_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
				_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
				_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
				_this._34 = 0;
				_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				_this._44 = 1;
				this.absPos._41 = this.x + this.follow.absPos._41;
				this.absPos._42 = this.y + this.follow.absPos._42;
				this.absPos._43 = this.z + this.follow.absPos._43;
			} else {
				this.absPos.multiply3x4(this.absPos,this.follow.absPos);
			}
		} else if(this.parent != null && (this.flags & 2048) == 0) {
			var _this1 = this.absPos;
			var a1 = this.absPos;
			var b1 = this.parent.absPos;
			var m111 = a1._11;
			var m121 = a1._12;
			var m131 = a1._13;
			var m211 = a1._21;
			var m221 = a1._22;
			var m231 = a1._23;
			var a311 = a1._31;
			var a321 = a1._32;
			var a331 = a1._33;
			var a411 = a1._41;
			var a421 = a1._42;
			var a431 = a1._43;
			var b111 = b1._11;
			var b121 = b1._12;
			var b131 = b1._13;
			var b211 = b1._21;
			var b221 = b1._22;
			var b231 = b1._23;
			var b311 = b1._31;
			var b321 = b1._32;
			var b331 = b1._33;
			var b411 = b1._41;
			var b421 = b1._42;
			var b431 = b1._43;
			_this1._11 = m111 * b111 + m121 * b211 + m131 * b311;
			_this1._12 = m111 * b121 + m121 * b221 + m131 * b321;
			_this1._13 = m111 * b131 + m121 * b231 + m131 * b331;
			_this1._14 = 0;
			_this1._21 = m211 * b111 + m221 * b211 + m231 * b311;
			_this1._22 = m211 * b121 + m221 * b221 + m231 * b321;
			_this1._23 = m211 * b131 + m221 * b231 + m231 * b331;
			_this1._24 = 0;
			_this1._31 = a311 * b111 + a321 * b211 + a331 * b311;
			_this1._32 = a311 * b121 + a321 * b221 + a331 * b321;
			_this1._33 = a311 * b131 + a321 * b231 + a331 * b331;
			_this1._34 = 0;
			_this1._41 = a411 * b111 + a421 * b211 + a431 * b311 + b411;
			_this1._42 = a411 * b121 + a421 * b221 + a431 * b321 + b421;
			_this1._43 = a411 * b131 + a421 * b231 + a431 * b331 + b431;
			_this1._44 = 1;
		}
		if(this.defaultTransform != null) {
			var _this2 = this.absPos;
			var a2 = this.defaultTransform;
			var b2 = this.absPos;
			var m112 = a2._11;
			var m122 = a2._12;
			var m132 = a2._13;
			var m212 = a2._21;
			var m222 = a2._22;
			var m232 = a2._23;
			var a312 = a2._31;
			var a322 = a2._32;
			var a332 = a2._33;
			var a412 = a2._41;
			var a422 = a2._42;
			var a432 = a2._43;
			var b112 = b2._11;
			var b122 = b2._12;
			var b132 = b2._13;
			var b212 = b2._21;
			var b222 = b2._22;
			var b232 = b2._23;
			var b312 = b2._31;
			var b322 = b2._32;
			var b332 = b2._33;
			var b412 = b2._41;
			var b422 = b2._42;
			var b432 = b2._43;
			_this2._11 = m112 * b112 + m122 * b212 + m132 * b312;
			_this2._12 = m112 * b122 + m122 * b222 + m132 * b322;
			_this2._13 = m112 * b132 + m122 * b232 + m132 * b332;
			_this2._14 = 0;
			_this2._21 = m212 * b112 + m222 * b212 + m232 * b312;
			_this2._22 = m212 * b122 + m222 * b222 + m232 * b322;
			_this2._23 = m212 * b132 + m222 * b232 + m232 * b332;
			_this2._24 = 0;
			_this2._31 = a312 * b112 + a322 * b212 + a332 * b312;
			_this2._32 = a312 * b122 + a322 * b222 + a332 * b322;
			_this2._33 = a312 * b132 + a322 * b232 + a332 * b332;
			_this2._34 = 0;
			_this2._41 = a412 * b112 + a422 * b212 + a432 * b312 + b412;
			_this2._42 = a412 * b122 + a422 * b222 + a432 * b322 + b422;
			_this2._43 = a412 * b132 + a422 * b232 + a432 * b332 + b432;
			_this2._44 = 1;
		}
		if(this.invPos != null) {
			this.invPos._44 = 0;
		}
	}
	,sync: function(ctx) {
	}
	,syncRec: function(ctx) {
		if(this.currentAnimation != null) {
			var old = this.parent;
			var dt = ctx.elapsedTime;
			while(dt > 0 && this.currentAnimation != null) dt = this.currentAnimation.update(dt);
			if(this.currentAnimation != null && (ctx.visibleFlag && (this.flags & 2) != 0 && (this.flags & 4) == 0 || (this.flags & 64) != 0)) {
				this.currentAnimation.sync();
			}
			if(this.parent == null && old != null) {
				return;
			}
		}
		var old1 = ctx.visibleFlag;
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			ctx.visibleFlag = false;
		}
		if(ctx.cullingCollider != null && (this.cullingCollider == null || (this.flags & 4096) != 0)) {
			this.set_cullingCollider(ctx.cullingCollider);
			var f = 4096;
			this.flags |= f;
		} else if((this.flags & 4096) != 0) {
			this.set_cullingCollider(null);
		}
		var prevCollider = ctx.cullingCollider;
		if((this.flags & 128) != 0) {
			ctx.cullingCollider = this.cullingCollider;
		}
		var changed = (this.flags & 1) != 0;
		if(changed) {
			this.calcAbsPos();
		}
		this.sync(ctx);
		var f1 = 1;
		var b = this.follow != null;
		if(b) {
			this.flags |= f1;
		} else {
			this.flags &= ~f1;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					var f2 = 1;
					var b1 = true;
					if(b1) {
						c.flags |= f2;
					} else {
						c.flags &= ~f2;
					}
				}
				c.syncRec(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
		ctx.visibleFlag = old1;
		ctx.cullingCollider = prevCollider;
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if((this.flags & 1) != 0) {
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f1 = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f1;
				} else {
					c.flags &= ~f1;
				}
			}
		}
	}
	,emit: function(ctx) {
	}
	,emitRec: function(ctx) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0 && !ctx.computingStatic) {
			return;
		}
		if((this.flags & 1) != 0) {
			if(this.currentAnimation != null) {
				this.currentAnimation.sync();
			}
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f1 = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f1;
				} else {
					c.flags &= ~f1;
				}
			}
		}
		if((this.flags & 4) == 0 || ctx.computingStatic) {
			this.emit(ctx);
		}
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var c1 = _g11[_g2];
			++_g2;
			c1.emitRec(ctx);
		}
	}
	,__class__: h3d_scene_Object
};
var h3d_scene_Mesh = function(primitive,material,parent) {
	h3d_scene_Object.call(this,parent);
	this.set_primitive(primitive);
	if(material == null) {
		material = h3d_mat_MaterialSetup.current.createMaterial();
		material.set_props(material.getDefaultProps());
	}
	this.material = material;
};
$hxClasses["h3d.scene.Mesh"] = h3d_scene_Mesh;
h3d_scene_Mesh.__name__ = "h3d.scene.Mesh";
h3d_scene_Mesh.__super__ = h3d_scene_Object;
h3d_scene_Mesh.prototype = $extend(h3d_scene_Object.prototype,{
	draw: function(ctx) {
		this.primitive.render(ctx.engine);
	}
	,emit: function(ctx) {
		var p = this.material.passes;
		while(p != null) {
			ctx.emitPass(p,this).index = 0;
			p = p.nextPass;
		}
	}
	,onAdd: function() {
		h3d_scene_Object.prototype.onAdd.call(this);
		if(this.primitive != null) {
			this.primitive.incref();
		}
	}
	,onRemove: function() {
		if(this.primitive != null) {
			this.primitive.decref();
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,set_primitive: function(prim) {
		if(prim != this.primitive && (this.flags & 32) != 0) {
			if(this.primitive != null) {
				this.primitive.decref();
			}
			if(prim != null) {
				prim.incref();
			}
		}
		return this.primitive = prim;
	}
	,__class__: h3d_scene_Mesh
});
var h3d_scene_Interactive = function(shape,parent) {
	this.hitPoint = new h3d_Vector();
	this.mouseDownButton = -1;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h3d_scene_Object.call(this,parent);
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h3d.scene.Interactive"] = h3d_scene_Interactive;
h3d_scene_Interactive.__name__ = "h3d.scene.Interactive";
h3d_scene_Interactive.__interfaces__ = [hxd_Interactive];
h3d_scene_Interactive.__super__ = h3d_scene_Object;
h3d_scene_Interactive.prototype = $extend(h3d_scene_Object.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h3d_scene_Object.prototype.onAdd.call(this);
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = null;
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h3d_scene_Interactive
});
var h3d_scene_Light = function(shader,parent) {
	this.priority = 0;
	this.cullingDistance = -1;
	h3d_scene_Object.call(this,parent);
	this.shader = shader;
};
$hxClasses["h3d.scene.Light"] = h3d_scene_Light;
h3d_scene_Light.__name__ = "h3d.scene.Light";
h3d_scene_Light.__super__ = h3d_scene_Object;
h3d_scene_Light.prototype = $extend(h3d_scene_Object.prototype,{
	emit: function(ctx) {
		ctx.emitLight(this);
	}
	,getShadowDirection: function() {
		return null;
	}
	,__class__: h3d_scene_Light
});
var h3d_scene_LightSystem = function() {
	this.ambientLight = new h3d_Vector(1,1,1);
};
$hxClasses["h3d.scene.LightSystem"] = h3d_scene_LightSystem;
h3d_scene_LightSystem.__name__ = "h3d.scene.LightSystem";
h3d_scene_LightSystem.prototype = {
	initGlobals: function(globals) {
	}
	,cullLights: function() {
		var l = this.ctx.lights;
		var prev = null;
		var s = new h3d_col_Sphere();
		while(l != null) {
			s.x = l.absPos._41;
			s.y = l.absPos._42;
			s.z = l.absPos._43;
			s.r = l.cullingDistance;
			if(l.cullingDistance > 0 && !this.ctx.computingStatic && !this.ctx.camera.frustum.hasSphere(s)) {
				if(prev == null) {
					this.ctx.lights = l.next;
				} else {
					prev.next = l.next;
				}
				l = l.next;
				continue;
			}
			this.lightCount++;
			l.objectDistance = 0.;
			prev = l;
			l = l.next;
		}
	}
	,initLights: function(ctx) {
		this.lightCount = 0;
		this.ctx = ctx;
		this.cullLights();
		if(this.shadowLight == null || (this.shadowLight.flags & 32) == 0) {
			var l = ctx.lights;
			while(l != null) {
				var dir = l.getShadowDirection();
				if(dir != null) {
					this.shadowLight = l;
					break;
				}
				l = l.next;
			}
		}
	}
	,computeLight: function(obj,shaders) {
		return shaders;
	}
	,__class__: h3d_scene_LightSystem
};
var h3d_scene__$RenderContext_SharedGlobal = function(gid,value) {
	this.gid = gid;
	this.value = value;
};
$hxClasses["h3d.scene._RenderContext.SharedGlobal"] = h3d_scene__$RenderContext_SharedGlobal;
h3d_scene__$RenderContext_SharedGlobal.__name__ = "h3d.scene._RenderContext.SharedGlobal";
h3d_scene__$RenderContext_SharedGlobal.prototype = {
	__class__: h3d_scene__$RenderContext_SharedGlobal
};
var h3d_scene_RenderContext = function() {
	h3d_impl_RenderContext.call(this);
	this.cachedShaderList = [];
	this.cachedPassObjects = [];
};
$hxClasses["h3d.scene.RenderContext"] = h3d_scene_RenderContext;
h3d_scene_RenderContext.__name__ = "h3d.scene.RenderContext";
h3d_scene_RenderContext.__super__ = h3d_impl_RenderContext;
h3d_scene_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	start: function() {
		this.sharedGlobals = [];
		this.lights = null;
		this.drawPass = null;
		this.passes = null;
		this.lights = null;
		this.cachedPos = 0;
		this.visibleFlag = true;
		this.time += this.elapsedTime;
		this.frame++;
	}
	,setGlobalID: function(gid,value) {
		var _g = 0;
		var _g1 = this.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.gid == gid) {
				g.value = value;
				return;
			}
		}
		this.sharedGlobals.push(new h3d_scene__$RenderContext_SharedGlobal(gid,value));
	}
	,emitPass: function(pass,obj) {
		var o = this.allocPool;
		if(o == null) {
			o = new h3d_pass_PassObject();
			o.nextAlloc = this.allocFirst;
			this.allocFirst = o;
		} else {
			this.allocPool = o.nextAlloc;
		}
		o.pass = pass;
		o.obj = obj;
		o.next = this.passes;
		this.passes = o;
		return o;
	}
	,allocShaderList: function(s,next) {
		var sl = this.cachedShaderList[this.cachedPos++];
		if(sl == null) {
			sl = new hxsl_ShaderList(null);
			this.cachedShaderList[this.cachedPos - 1] = sl;
		}
		sl.s = s;
		sl.next = next;
		return sl;
	}
	,emitLight: function(l) {
		l.next = this.lights;
		this.lights = l;
	}
	,done: function() {
		this.drawPass = null;
		var p = this.allocFirst;
		while(p != null && p != this.allocPool) {
			p.obj = null;
			p.pass = null;
			p.shader = null;
			p.shaders = null;
			p.next = null;
			p.index = 0;
			p.texture = 0;
			p = p.nextAlloc;
		}
		if(this.allocPool != null) {
			this.allocFirst = this.allocFirst.nextAlloc;
		}
		this.allocPool = this.allocFirst;
		var _g = 0;
		var _g1 = this.cachedShaderList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.s = null;
			c.next = null;
		}
		this.passes = null;
		this.lights = null;
	}
	,__class__: h3d_scene_RenderContext
});
var h3d_scene_PassObjects = function() {
	this.passes = new h3d_pass_PassList();
};
$hxClasses["h3d.scene.PassObjects"] = h3d_scene_PassObjects;
h3d_scene_PassObjects.__name__ = "h3d.scene.PassObjects";
h3d_scene_PassObjects.prototype = {
	__class__: h3d_scene_PassObjects
};
var h3d_scene_Renderer = function() {
	this.hasSetTarget = false;
	this.emptyPasses = new h3d_pass_PassList();
	this.allPasses = [];
	this.passObjects = new haxe_ds_StringMap();
	this.set_props(this.getDefaultProps());
	var f = $bind(this,this.depthSort);
	this.frontToBack = function(passes) {
		f(true,passes);
	};
	var f1 = $bind(this,this.depthSort);
	this.backToFront = function(passes1) {
		f1(false,passes1);
	};
};
$hxClasses["h3d.scene.Renderer"] = h3d_scene_Renderer;
h3d_scene_Renderer.__name__ = "h3d.scene.Renderer";
h3d_scene_Renderer.__super__ = hxd_impl_AnyProps;
h3d_scene_Renderer.prototype = $extend(hxd_impl_AnyProps.prototype,{
	depthSort: function(frontToBack,passes) {
		var cam = this.ctx.camera.m;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var z = p.obj.absPos._41 * cam._13 + p.obj.absPos._42 * cam._23 + p.obj.absPos._43 * cam._33 + cam._43;
			var w = p.obj.absPos._41 * cam._14 + p.obj.absPos._42 * cam._24 + p.obj.absPos._43 * cam._34 + cam._44;
			p.depth = z / w;
		}
		if(frontToBack) {
			var list = passes.current;
			var tmp1;
			if(list == null) {
				tmp1 = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p1;
				var q;
				var e;
				var tail;
				while(true) {
					p1 = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p1 != null) {
						++nmerges;
						q = p1;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p1.pass.layer == q.pass.layer ? p1.depth > q.depth ? 1 : -1 : p1.pass.layer - q.pass.layer) <= 0) {
								e = p1;
								p1 = p1.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p1 = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp1 = list;
			}
			passes.current = tmp1;
		} else {
			var list1 = passes.current;
			var tmp2;
			if(list1 == null) {
				tmp2 = null;
			} else {
				var insize1 = 1;
				var nmerges1;
				var psize1 = 0;
				var qsize1 = 0;
				var p2;
				var q1;
				var e1;
				var tail1;
				while(true) {
					p2 = list1;
					list1 = null;
					tail1 = null;
					nmerges1 = 0;
					while(p2 != null) {
						++nmerges1;
						q1 = p2;
						psize1 = 0;
						var _g2 = 0;
						var _g11 = insize1;
						while(_g2 < _g11) {
							var i1 = _g2++;
							++psize1;
							q1 = q1.next;
							if(q1 == null) {
								break;
							}
						}
						qsize1 = insize1;
						while(psize1 > 0 || qsize1 > 0 && q1 != null) {
							if(psize1 == 0) {
								e1 = q1;
								q1 = q1.next;
								--qsize1;
							} else if(qsize1 == 0 || q1 == null || (p2.pass.layer == q1.pass.layer ? p2.depth > q1.depth ? -1 : 1 : p2.pass.layer - q1.pass.layer) <= 0) {
								e1 = p2;
								p2 = p2.next;
								--psize1;
							} else {
								e1 = q1;
								q1 = q1.next;
								--qsize1;
							}
							if(tail1 != null) {
								tail1.next = e1;
							} else {
								list1 = e1;
							}
							tail1 = e1;
						}
						p2 = q1;
					}
					tail1.next = null;
					if(nmerges1 <= 1) {
						break;
					}
					insize1 *= 2;
				}
				tmp2 = list1;
			}
			passes.current = tmp2;
		}
	}
	,resetTarget: function() {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
			this.hasSetTarget = false;
		}
	}
	,has: function(name) {
		var _this = this.passObjects;
		return (__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) != null;
	}
	,get: function(name) {
		var _this = this.passObjects;
		var p = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(p == null) {
			return this.emptyPasses;
		}
		p.rendered = true;
		return p.passes;
	}
	,render: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,computeStatic: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,start: function() {
	}
	,process: function(passes) {
		this.hasSetTarget = false;
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.setContext(this.ctx);
		}
		var _g2 = 0;
		while(_g2 < passes.length) {
			var p1 = passes[_g2];
			++_g2;
			var key = p1.name;
			var _this = this.passObjects;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,p1);
			} else {
				_this.h[key] = p1;
			}
		}
		this.ctx.textures.begin();
		if(this.ctx.computingStatic) {
			this.computeStatic();
		} else {
			this.render();
		}
		this.resetTarget();
		var _g3 = 0;
		while(_g3 < passes.length) {
			var p2 = passes[_g3];
			++_g3;
			var key1 = p2.name;
			var value = null;
			var _this1 = this.passObjects;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value);
			} else {
				_this1.h[key1] = value;
			}
		}
	}
	,__class__: h3d_scene_Renderer
});
var h3d_scene_Scene = function(createRenderer,createLightSystem) {
	if(createLightSystem == null) {
		createLightSystem = true;
	}
	if(createRenderer == null) {
		createRenderer = true;
	}
	h3d_scene_Object.call(this,null);
	this.window = hxd_Window.getInstance();
	this.eventListeners = [];
	this.hitInteractives = [];
	this.interactives = [];
	this.camera = new h3d_Camera();
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.camera.screenRatio = engine.width / engine.height;
	}
	this.ctx = new h3d_scene_RenderContext();
	if(createRenderer) {
		this.set_renderer(h3d_mat_MaterialSetup.current.createRenderer());
	}
	if(createLightSystem) {
		this.lightSystem = h3d_mat_MaterialSetup.current.createLightSystem();
	}
};
$hxClasses["h3d.scene.Scene"] = h3d_scene_Scene;
h3d_scene_Scene.__name__ = "h3d.scene.Scene";
h3d_scene_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h3d_scene_Scene.__super__ = h3d_scene_Object;
h3d_scene_Scene.prototype = $extend(h3d_scene_Object.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,dispatchListeners: function(event) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,set_renderer: function(r) {
		this.renderer = r;
		if(r != null) {
			r.ctx = this.ctx;
		}
		return r;
	}
	,sortHitPointByCameraDistance: function(i1,i2) {
		var z1 = i1.hitPoint.w;
		var z2 = i2.hitPoint.w;
		if(z1 > z2) {
			return -1;
		}
		return 1;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		i.handleEvent(event);
	}
	,isInteractiveVisible: function(i) {
		var o = i;
		while(o != this) {
			if(o == null || (o.flags & 2) == 0) {
				return false;
			}
			o = o.parent;
		}
		return true;
	}
	,handleEvent: function(event,last) {
		if(this.interactives.length == 0) {
			return null;
		}
		if(this.hitInteractives.length == 0) {
			var screenX = (event.relX / this.window.get_width() - 0.5) * 2;
			var screenY = -(event.relY / this.window.get_height() - 0.5) * 2;
			var p0 = this.camera.unproject(screenX,screenY,0);
			var p1 = this.camera.unproject(screenX,screenY,1);
			var x = p0.x;
			var y = p0.y;
			var z = p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p1_x = x;
			var p1_y = y;
			var p1_z = z;
			var x1 = p1.x;
			var y1 = p1.y;
			var z1 = p1.z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p2_x = x1;
			var p2_y = y1;
			var p2_z = z1;
			var r = new h3d_col_Ray();
			r.px = p1_x;
			r.py = p1_y;
			r.pz = p1_z;
			r.lx = p2_x - p1_x;
			r.ly = p2_y - p1_y;
			r.lz = p2_z - p1_z;
			r.normalize();
			var r1 = r;
			var saveR_px = r1.px;
			var saveR_py = r1.py;
			var saveR_pz = r1.pz;
			var saveR_lx = r1.lx;
			var saveR_ly = r1.ly;
			var saveR_lz = r1.lz;
			var priority = -2147483648;
			var _g = 0;
			var _g1 = this.interactives;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.priority < priority) {
					continue;
				}
				var p = i;
				while(p != null && (p.flags & 2) != 0) p = p.parent;
				if(p != null) {
					continue;
				}
				var minv = i.getInvPos();
				var x2 = r1.px;
				var y2 = r1.py;
				var z2 = r1.pz;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				var p_x = x2;
				var p_y = y2;
				var p_z = z2;
				var p_w = 1.;
				var px = p_x * minv._11 + p_y * minv._21 + p_z * minv._31 + p_w * minv._41;
				var py = p_x * minv._12 + p_y * minv._22 + p_z * minv._32 + p_w * minv._42;
				var pz = p_x * minv._13 + p_y * minv._23 + p_z * minv._33 + p_w * minv._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				r1.px = p_x;
				r1.py = p_y;
				r1.pz = p_z;
				var x3 = r1.lx;
				var y3 = r1.ly;
				var z3 = r1.lz;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				var l_x = x3;
				var l_y = y3;
				var l_z = z3;
				var l_w = 1.;
				var px1 = l_x * minv._11 + l_y * minv._21 + l_z * minv._31;
				var py1 = l_x * minv._12 + l_y * minv._22 + l_z * minv._32;
				var pz1 = l_x * minv._13 + l_y * minv._23 + l_z * minv._33;
				l_x = px1;
				l_y = py1;
				l_z = pz1;
				r1.lx = l_x;
				r1.ly = l_y;
				r1.lz = l_z;
				r1.normalize();
				if(r1.lx != r1.lx) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var hit = i.shape.rayIntersection(r1,i.bestMatch);
				if(hit < 0) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var x4 = r1.px + hit * r1.lx;
				var y4 = r1.py + hit * r1.ly;
				var z4 = r1.pz + hit * r1.lz;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				var hitPoint_x = x4;
				var hitPoint_y = y4;
				var hitPoint_z = z4;
				r1.px = saveR_px;
				r1.py = saveR_py;
				r1.pz = saveR_pz;
				r1.lx = saveR_lx;
				r1.ly = saveR_ly;
				r1.lz = saveR_lz;
				i.hitPoint.x = hitPoint_x;
				i.hitPoint.y = hitPoint_y;
				i.hitPoint.z = hitPoint_z;
				if(i.priority > priority) {
					while(this.hitInteractives.length > 0) this.hitInteractives.pop();
					priority = i.priority;
				}
				this.hitInteractives.push(i);
			}
			if(this.hitInteractives.length == 0) {
				return null;
			}
			if(this.hitInteractives.length > 1) {
				var _g2 = 0;
				var _g3 = this.hitInteractives;
				while(_g2 < _g3.length) {
					var i1 = _g3[_g2];
					++_g2;
					var m = i1.invPos;
					var wfactor = 0.;
					if(i1.preciseShape != null) {
						var x5 = r1.px;
						var y5 = r1.py;
						var z5 = r1.pz;
						if(z5 == null) {
							z5 = 0.;
						}
						if(y5 == null) {
							y5 = 0.;
						}
						if(x5 == null) {
							x5 = 0.;
						}
						var p_x1 = x5;
						var p_y1 = y5;
						var p_z1 = z5;
						var p_w1 = 1.;
						var px2 = p_x1 * m._11 + p_y1 * m._21 + p_z1 * m._31 + p_w1 * m._41;
						var py2 = p_x1 * m._12 + p_y1 * m._22 + p_z1 * m._32 + p_w1 * m._42;
						var pz2 = p_x1 * m._13 + p_y1 * m._23 + p_z1 * m._33 + p_w1 * m._43;
						p_x1 = px2;
						p_y1 = py2;
						p_z1 = pz2;
						r1.px = p_x1;
						r1.py = p_y1;
						r1.pz = p_z1;
						var x6 = r1.lx;
						var y6 = r1.ly;
						var z6 = r1.lz;
						if(z6 == null) {
							z6 = 0.;
						}
						if(y6 == null) {
							y6 = 0.;
						}
						if(x6 == null) {
							x6 = 0.;
						}
						var l_x1 = x6;
						var l_y1 = y6;
						var l_z1 = z6;
						var l_w1 = 1.;
						var px3 = l_x1 * m._11 + l_y1 * m._21 + l_z1 * m._31;
						var py3 = l_x1 * m._12 + l_y1 * m._22 + l_z1 * m._32;
						var pz3 = l_x1 * m._13 + l_y1 * m._23 + l_z1 * m._33;
						l_x1 = px3;
						l_y1 = py3;
						l_z1 = pz3;
						r1.lx = l_x1;
						r1.ly = l_y1;
						r1.lz = l_z1;
						r1.normalize();
						var hit1 = i1.preciseShape.rayIntersection(r1,i1.bestMatch);
						if(hit1 > 0) {
							var x7 = r1.px + hit1 * r1.lx;
							var y7 = r1.py + hit1 * r1.ly;
							var z7 = r1.pz + hit1 * r1.lz;
							if(z7 == null) {
								z7 = 0.;
							}
							if(y7 == null) {
								y7 = 0.;
							}
							if(x7 == null) {
								x7 = 0.;
							}
							var hitPoint_x1 = x7;
							var hitPoint_y1 = y7;
							var hitPoint_z1 = z7;
							i1.hitPoint.x = hitPoint_x1;
							i1.hitPoint.y = hitPoint_y1;
							i1.hitPoint.z = hitPoint_z1;
						} else {
							wfactor = 1.;
						}
						r1.px = saveR_px;
						r1.py = saveR_py;
						r1.pz = saveR_pz;
						r1.lx = saveR_lx;
						r1.ly = saveR_ly;
						r1.lz = saveR_lz;
					}
					var _this = i1.hitPoint;
					var x8 = _this.x;
					var y8 = _this.y;
					var z8 = _this.z;
					var w = _this.w;
					if(w == null) {
						w = 1.;
					}
					if(z8 == null) {
						z8 = 0.;
					}
					if(y8 == null) {
						y8 = 0.;
					}
					if(x8 == null) {
						x8 = 0.;
					}
					var p_x2 = x8;
					var p_y2 = y8;
					var p_z2 = z8;
					var p_w2 = w;
					p_w2 = 1;
					var m1 = i1.absPos;
					var px4 = p_x2 * m1._11 + p_y2 * m1._21 + p_z2 * m1._31 + p_w2 * m1._41;
					var py4 = p_x2 * m1._12 + p_y2 * m1._22 + p_z2 * m1._32 + p_w2 * m1._42;
					var pz4 = p_x2 * m1._13 + p_y2 * m1._23 + p_z2 * m1._33 + p_w2 * m1._43;
					p_x2 = px4;
					p_y2 = py4;
					p_z2 = pz4;
					var m2 = this.camera.m;
					var px5 = p_x2 * m2._11 + p_y2 * m2._21 + p_z2 * m2._31 + p_w2 * m2._41;
					var py5 = p_x2 * m2._12 + p_y2 * m2._22 + p_z2 * m2._32 + p_w2 * m2._42;
					var pz5 = p_x2 * m2._13 + p_y2 * m2._23 + p_z2 * m2._33 + p_w2 * m2._43;
					var iw = 1 / (p_x2 * m2._14 + p_y2 * m2._24 + p_z2 * m2._34 + p_w2 * m2._44);
					p_x2 = px5 * iw;
					p_y2 = py5 * iw;
					p_z2 = pz5 * iw;
					p_w2 = 1;
					i1.hitPoint.w = p_z2 + wfactor;
				}
				this.hitInteractives.sort($bind(this,this.sortHitPointByCameraDistance));
			}
			this.hitInteractives.unshift(null);
		}
		while(this.hitInteractives.length > 0) {
			var i2 = this.hitInteractives.pop();
			if(i2 == null) {
				return null;
			}
			event.relX = i2.hitPoint.x;
			event.relY = i2.hitPoint.y;
			event.relZ = i2.hitPoint.z;
			i2.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			if(!event.propagate) {
				while(this.hitInteractives.length > 0) this.hitInteractives.pop();
			}
			return i2;
		}
		return null;
	}
	,addEventTarget: function(i) {
		if(this.interactives.indexOf(i) >= 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		this.interactives.push(i);
	}
	,removeEventTarget: function(i) {
		if(HxOverrides.remove(this.interactives,i)) {
			if(this.events != null) {
				this.events.onRemove(i);
			}
			HxOverrides.remove(this.hitInteractives,i);
		}
	}
	,setElapsedTime: function(elapsedTime) {
		this.ctx.elapsedTime = elapsedTime;
	}
	,render: function(engine) {
		if((this.flags & 32) == 0) {
			this.onAdd();
		}
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,1);
		}
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.renderer.start();
		this.syncRec(this.ctx);
		this.emitRec(this.ctx);
		var list = this.ctx.passes;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || p.pass.passId - q.pass.passId <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.ctx.passes = tmp;
		var curPass = this.ctx.passes;
		var passes = [];
		var passIndex = -1;
		while(curPass != null) {
			var passId = curPass.pass.passId;
			var p1 = curPass;
			var prev = null;
			while(p1 != null && p1.pass.passId == passId) {
				prev = p1;
				p1 = p1.next;
			}
			prev.next = null;
			var pobjs = this.ctx.cachedPassObjects[++passIndex];
			if(pobjs == null) {
				pobjs = new h3d_scene_PassObjects();
				this.ctx.cachedPassObjects[passIndex] = pobjs;
			}
			pobjs.name = curPass.pass.name;
			var _this = pobjs.passes;
			_this.current = curPass;
			_this.discarded = _this.lastDisc = null;
			passes.push(pobjs);
			curPass = p1;
		}
		if(this.lightSystem != null) {
			this.ctx.lightSystem = this.lightSystem;
			this.lightSystem.initLights(this.ctx);
		}
		this.renderer.process(passes);
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,0);
		}
		this.ctx.done();
		this.ctx.scene = null;
		this.ctx.camera = null;
		this.ctx.engine = null;
		var _g2 = 0;
		var _g11 = passIndex;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var p2 = this.ctx.cachedPassObjects[i1];
			p2.name = null;
			var _this1 = p2.passes;
			_this1.current = null;
			_this1.discarded = _this1.lastDisc = null;
		}
	}
	,__class__: h3d_scene_Scene
});
var h3d_scene_fwd_LightSystem = function() {
	this.perPixelLighting = true;
	this.maxLightsPerObject = 6;
	h3d_scene_LightSystem.call(this);
	var _this = this.ambientLight;
	var x = 0.5;
	var y = 0.5;
	var z = 0.5;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	this.ambientShader = new h3d_shader_AmbientLight();
	this.set_additiveLighting(true);
};
$hxClasses["h3d.scene.fwd.LightSystem"] = h3d_scene_fwd_LightSystem;
h3d_scene_fwd_LightSystem.__name__ = "h3d.scene.fwd.LightSystem";
h3d_scene_fwd_LightSystem.__super__ = h3d_scene_LightSystem;
h3d_scene_fwd_LightSystem.prototype = $extend(h3d_scene_LightSystem.prototype,{
	set_additiveLighting: function(b) {
		var value = this.ambientShader;
		var _this = ((value) instanceof h3d_shader_AmbientLight) ? value : null;
		_this.constModified = true;
		return _this.additive__ = b;
	}
	,initLights: function(ctx) {
		h3d_scene_LightSystem.prototype.initLights.call(this,ctx);
		if(this.lightCount <= this.maxLightsPerObject) {
			var list = ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			ctx.lights = tmp;
		}
	}
	,initGlobals: function(globals) {
		globals.set("global.ambientLight",this.ambientLight);
		globals.set("global.perPixelLighting",this.perPixelLighting);
	}
	,sortLight: function(l1,l2) {
		var p = l1.priority - l2.priority;
		if(p != 0) {
			return -p;
		}
		if(l1.objectDistance < l2.objectDistance) {
			return -1;
		} else {
			return 1;
		}
	}
	,computeLight: function(obj,shaders) {
		var _gthis = this;
		if(this.lightCount > this.maxLightsPerObject) {
			var l = this.ctx.lights;
			while(l != null) {
				if((obj.flags & 16) != 0) {
					var dx = l.absPos._41 - this.ctx.camera.target.x;
					var dy = l.absPos._42 - this.ctx.camera.target.y;
					var dz = l.absPos._43 - this.ctx.camera.target.z;
					if(dz == null) {
						dz = 0.;
					}
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				} else {
					var dx1 = l.absPos._41 - obj.absPos._41;
					var dy1 = l.absPos._42 - obj.absPos._42;
					var dz1 = l.absPos._43 - obj.absPos._43;
					if(dz1 == null) {
						dz1 = 0.;
					}
					l.objectDistance = dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
				}
				l = l.next;
			}
			var list = this.ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			this.ctx.lights = tmp;
		}
		shaders = _gthis.ctx.allocShaderList(this.ambientShader,shaders);
		var l1 = this.ctx.lights;
		var i1 = 0;
		while(l1 != null) {
			if(i1++ == this.maxLightsPerObject) {
				break;
			}
			shaders = _gthis.ctx.allocShaderList(l1.shader,shaders);
			l1 = l1.next;
		}
		return shaders;
	}
	,__class__: h3d_scene_fwd_LightSystem
});
var h3d_scene_fwd_DepthPass = function() {
	this.enableSky = false;
	h3d_pass_Default.call(this,"depth");
	this.depthMapId = hxsl_Globals.allocID("depthMap");
};
$hxClasses["h3d.scene.fwd.DepthPass"] = h3d_scene_fwd_DepthPass;
h3d_scene_fwd_DepthPass.__name__ = "h3d.scene.fwd.DepthPass";
h3d_scene_fwd_DepthPass.__super__ = h3d_pass_Default;
h3d_scene_fwd_DepthPass.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
	}
	,draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("depthMap",this.ctx.engine.width,this.ctx.engine.height,true);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(this.enableSky ? 0 : 16711680,1);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.depthMapId,{ texture : texture});
	}
	,__class__: h3d_scene_fwd_DepthPass
});
var h3d_scene_fwd_NormalPass = function() {
	h3d_pass_Default.call(this,"normal");
	this.normalMapId = hxsl_Globals.allocID("normalMap");
};
$hxClasses["h3d.scene.fwd.NormalPass"] = h3d_scene_fwd_NormalPass;
h3d_scene_fwd_NormalPass.__name__ = "h3d.scene.fwd.NormalPass";
h3d_scene_fwd_NormalPass.__super__ = h3d_pass_Default;
h3d_scene_fwd_NormalPass.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackNormal(hxsl_Output.Value("output.normal"))];
	}
	,draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("normalMap",this.ctx.engine.width,this.ctx.engine.height);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(8421504,1);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.normalMapId,texture);
	}
	,__class__: h3d_scene_fwd_NormalPass
});
var h3d_scene_fwd_Renderer = function() {
	this.shadow = new h3d_pass_DefaultShadowMap(1024);
	this.normal = new h3d_scene_fwd_NormalPass();
	this.depth = new h3d_scene_fwd_DepthPass();
	h3d_scene_Renderer.call(this);
	this.defaultPass = new h3d_pass_Default("default");
	this.allPasses = [this.defaultPass,this.depth,this.normal,this.shadow];
};
$hxClasses["h3d.scene.fwd.Renderer"] = h3d_scene_fwd_Renderer;
h3d_scene_fwd_Renderer.__name__ = "h3d.scene.fwd.Renderer";
h3d_scene_fwd_Renderer.__super__ = h3d_scene_Renderer;
h3d_scene_fwd_Renderer.prototype = $extend(h3d_scene_Renderer.prototype,{
	renderPass: function(p,passes,sort) {
		p.draw(passes,sort);
	}
	,render: function() {
		if(this.has("shadow")) {
			this.renderPass(this.shadow,this.get("shadow"));
		}
		if(this.has("depth")) {
			this.renderPass(this.depth,this.get("depth"));
		}
		if(this.has("normal")) {
			this.renderPass(this.normal,this.get("normal"));
		}
		this.renderPass(this.defaultPass,this.get("default"));
		this.renderPass(this.defaultPass,this.get("alpha"),this.backToFront);
		this.renderPass(this.defaultPass,this.get("additive"));
	}
	,__class__: h3d_scene_fwd_Renderer
});
var h3d_shader_AmbientLight = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.AmbientLight"] = h3d_shader_AmbientLight;
h3d_shader_AmbientLight.__name__ = "h3d.shader.AmbientLight";
h3d_shader_AmbientLight.__super__ = hxsl_Shader;
h3d_shader_AmbientLight.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_AmbientLight
});
var h3d_shader_Base2d = function() {
	this.viewport__ = new h3d_Vector();
	this.halfPixelInverse__ = new h3d_Vector();
	this.uvPos__ = new h3d_Vector();
	this.filterMatrixB__ = new h3d_Vector();
	this.filterMatrixA__ = new h3d_Vector();
	this.absoluteMatrixB__ = new h3d_Vector();
	this.absoluteMatrixA__ = new h3d_Vector();
	this.color__ = new h3d_Vector();
	this.zValue__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Base2d"] = h3d_shader_Base2d;
h3d_shader_Base2d.__name__ = "h3d.shader.Base2d";
h3d_shader_Base2d.__super__ = hxsl_Shader;
h3d_shader_Base2d.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isRelative__) {
			this.constBits |= 1;
		}
		if(this.hasUVPos__) {
			this.constBits |= 2;
		}
		if(this.killAlpha__) {
			this.constBits |= 4;
		}
		if(this.pixelAlign__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.zValue__;
		case 1:
			return this.texture__;
		case 2:
			return this.isRelative__;
		case 3:
			return this.color__;
		case 4:
			return this.absoluteMatrixA__;
		case 5:
			return this.absoluteMatrixB__;
		case 6:
			return this.filterMatrixA__;
		case 7:
			return this.filterMatrixB__;
		case 8:
			return this.hasUVPos__;
		case 9:
			return this.uvPos__;
		case 10:
			return this.killAlpha__;
		case 11:
			return this.pixelAlign__;
		case 12:
			return this.halfPixelInverse__;
		case 13:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.zValue__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Base2d
});
var h3d_shader_BaseMesh = function() {
	this.specularColor__ = new h3d_Vector();
	this.specularAmount__ = 0;
	this.specularPower__ = 0;
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this1 = this.specularColor__;
	var x1 = 1;
	var y1 = 1;
	var z1 = 1;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	_this1.x = x1;
	_this1.y = y1;
	_this1.z = z1;
	_this1.w = 1.;
	this.specularPower__ = 50;
	this.specularAmount__ = 1;
};
$hxClasses["h3d.shader.BaseMesh"] = h3d_shader_BaseMesh;
h3d_shader_BaseMesh.__name__ = "h3d.shader.BaseMesh";
h3d_shader_BaseMesh.__super__ = hxsl_Shader;
h3d_shader_BaseMesh.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		case 3:
			return this.specularColor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_BaseMesh
});
var h3d_shader_Blur = function() {
	this.cubeDir__ = new h3d_Matrix();
	this.fixedColor__ = new h3d_Vector();
	this.pixel__ = new h3d_Vector();
	this.offsets__ = [];
	this.values__ = [];
	this.Quality__ = 0;
	this.cameraInverseViewProj__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.Blur"] = h3d_shader_Blur;
h3d_shader_Blur.__name__ = "h3d.shader.Blur";
h3d_shader_Blur.__super__ = h3d_shader_ScreenShader;
h3d_shader_Blur.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Quality__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("Quality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.isDepth__) {
			this.constBits |= 256;
		}
		if(this.hasFixedColor__) {
			this.constBits |= 512;
		}
		if(this.smoothFixedColor__) {
			this.constBits |= 1024;
		}
		if(this.isDepthDependant__) {
			this.constBits |= 2048;
		}
		if(this.hasNormal__) {
			this.constBits |= 4096;
		}
		if(this.isCube__) {
			this.constBits |= 8192;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.cameraInverseViewProj__;
		case 2:
			return this.texture__;
		case 3:
			return this.depthTexture__;
		case 4:
			return this.Quality__;
		case 5:
			return this.isDepth__;
		case 6:
			return this.values__;
		case 7:
			return this.offsets__;
		case 8:
			return this.pixel__;
		case 9:
			return this.hasFixedColor__;
		case 10:
			return this.smoothFixedColor__;
		case 11:
			return this.fixedColor__;
		case 12:
			return this.isDepthDependant__;
		case 13:
			return this.hasNormal__;
		case 14:
			return this.normalTexture__;
		case 15:
			return this.isCube__;
		case 16:
			return this.cubeTexture__;
		case 17:
			return this.cubeDir__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Blur
});
var h3d_shader_ShaderBuffers = function(s) {
	this.globals = new Float32Array(s.globalsSize << 2);
	this.params = new Float32Array(s.paramsSize << 2);
	var this1 = new Array(s.texturesCount);
	this.tex = this1;
	var tmp;
	if(s.bufferCount > 0) {
		var this2 = new Array(s.bufferCount);
		tmp = this2;
	} else {
		tmp = null;
	}
	this.buffers = tmp;
};
$hxClasses["h3d.shader.ShaderBuffers"] = h3d_shader_ShaderBuffers;
h3d_shader_ShaderBuffers.__name__ = "h3d.shader.ShaderBuffers";
h3d_shader_ShaderBuffers.prototype = {
	grow: function(s) {
		var ng = s.globalsSize << 2;
		var np = s.paramsSize << 2;
		var nt = s.texturesCount;
		var nb = s.bufferCount;
		if(this.globals.length < ng) {
			this.globals = new Float32Array(ng);
		}
		if(this.params.length < np) {
			this.params = new Float32Array(np);
		}
		if(this.tex.length < nt) {
			var this1 = new Array(nt);
			this.tex = this1;
		}
		if(nb > 0 && (this.buffers == null || this.buffers.length < nb)) {
			var this2 = new Array(nb);
			this.buffers = this2;
		}
	}
	,__class__: h3d_shader_ShaderBuffers
};
var h3d_shader_Buffers = function(s) {
	this.vertex = new h3d_shader_ShaderBuffers(s.vertex);
	this.fragment = new h3d_shader_ShaderBuffers(s.fragment);
};
$hxClasses["h3d.shader.Buffers"] = h3d_shader_Buffers;
h3d_shader_Buffers.__name__ = "h3d.shader.Buffers";
h3d_shader_Buffers.prototype = {
	__class__: h3d_shader_Buffers
};
var h3d_shader_ColorAdd = function(color) {
	if(color == null) {
		color = 0;
	}
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
	_this.w = (color >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorAdd"] = h3d_shader_ColorAdd;
h3d_shader_ColorAdd.__name__ = "h3d.shader.ColorAdd";
h3d_shader_ColorAdd.__super__ = hxsl_Shader;
h3d_shader_ColorAdd.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorAdd
});
var h3d_shader_ColorKey = function(v) {
	if(v == null) {
		v = 0;
	}
	this.colorKey__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.colorKey__;
	_this.x = (v >> 16 & 255) / 255;
	_this.y = (v >> 8 & 255) / 255;
	_this.z = (v & 255) / 255;
	_this.w = (v >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorKey"] = h3d_shader_ColorKey;
h3d_shader_ColorKey.__name__ = "h3d.shader.ColorKey";
h3d_shader_ColorKey.__super__ = hxsl_Shader;
h3d_shader_ColorKey.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.colorKey__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorKey
});
var h3d_shader_ColorMatrix = function(m) {
	this.matrix__ = new h3d_Matrix();
	hxsl_Shader.call(this);
	if(m != null) {
		this.matrix__.loadValues(m);
	} else {
		this.matrix__.identity();
	}
};
$hxClasses["h3d.shader.ColorMatrix"] = h3d_shader_ColorMatrix;
h3d_shader_ColorMatrix.__name__ = "h3d.shader.ColorMatrix";
h3d_shader_ColorMatrix.__super__ = hxsl_Shader;
h3d_shader_ColorMatrix.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.matrix__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorMatrix
});
var h3d_shader_DirShadow = function() {
	this.poissonDiskVeryHigh__ = [];
	this.poissonDiskHigh__ = [];
	this.poissonDiskLow__ = [];
	this.shadowBias__ = 0;
	this.shadowProj__ = new h3d_Matrix();
	this.shadowMapChannel__ = hxsl_Channel.Unknown;
	this.shadowRes__ = new h3d_Vector();
	this.pcfScale__ = 0;
	this.pcfQuality__ = 0;
	this.shadowPower__ = 0;
	hxsl_Shader.call(this);
	this.poissonDiskLow__ = [new h3d_Vector(-0.942,-0.399),new h3d_Vector(0.945,-0.768),new h3d_Vector(-0.094,-0.929),new h3d_Vector(0.344,0.293)];
	this.poissonDiskHigh__ = [new h3d_Vector(-0.326,-0.406),new h3d_Vector(-0.840,-0.074),new h3d_Vector(-0.696,0.457),new h3d_Vector(-0.203,0.621),new h3d_Vector(0.962,-0.195),new h3d_Vector(0.473,-0.480),new h3d_Vector(0.519,0.767),new h3d_Vector(0.185,-0.893),new h3d_Vector(0.507,0.064),new h3d_Vector(0.896,0.412),new h3d_Vector(-0.322,-0.933),new h3d_Vector(-0.792,-0.598)];
	this.poissonDiskVeryHigh__ = [new h3d_Vector(-0.613392,0.617481),new h3d_Vector(0.170019,-0.040254),new h3d_Vector(-0.299417,0.791925),new h3d_Vector(0.645680,0.493210),new h3d_Vector(-0.651784,0.717887),new h3d_Vector(0.421003,0.027070),new h3d_Vector(-0.817194,-0.271096),new h3d_Vector(-0.705374,-0.668203),new h3d_Vector(0.977050,-0.108615),new h3d_Vector(0.063326,0.142369),new h3d_Vector(0.203528,0.214331),new h3d_Vector(-0.667531,0.326090),new h3d_Vector(-0.098422,-0.295755),new h3d_Vector(-0.885922,0.215369),new h3d_Vector(0.566637,0.605213),new h3d_Vector(0.039766,-0.396100),new h3d_Vector(0.751946,0.453352),new h3d_Vector(0.078707,-0.715323),new h3d_Vector(-0.075838,-0.529344),new h3d_Vector(0.724479,-0.580798),new h3d_Vector(0.222999,-0.215125),new h3d_Vector(-0.467574,-0.405438),new h3d_Vector(-0.248268,-0.814753),new h3d_Vector(0.354411,-0.887570),new h3d_Vector(0.175817,0.382366),new h3d_Vector(0.487472,-0.063082),new h3d_Vector(-0.084078,0.898312),new h3d_Vector(0.488876,-0.783441),new h3d_Vector(0.470016,0.217933),new h3d_Vector(-0.696890,-0.549791),new h3d_Vector(-0.149693,0.605762),new h3d_Vector(0.034211,0.979980),new h3d_Vector(0.503098,-0.308878),new h3d_Vector(-0.016205,-0.872921),new h3d_Vector(0.385784,-0.393902),new h3d_Vector(-0.146886,-0.859249),new h3d_Vector(0.643361,0.164098),new h3d_Vector(0.634388,-0.049471),new h3d_Vector(-0.688894,0.007843),new h3d_Vector(0.464034,-0.188818),new h3d_Vector(-0.440840,0.137486),new h3d_Vector(0.364483,0.511704),new h3d_Vector(0.034028,0.325968),new h3d_Vector(0.099094,-0.308023),new h3d_Vector(0.693960,-0.366253),new h3d_Vector(0.678884,-0.204688),new h3d_Vector(0.001801,0.780328),new h3d_Vector(0.145177,-0.898984),new h3d_Vector(0.062655,-0.611866),new h3d_Vector(0.315226,-0.604297),new h3d_Vector(-0.780145,0.486251),new h3d_Vector(-0.371868,0.882138),new h3d_Vector(0.200476,0.494430),new h3d_Vector(-0.494552,-0.711051),new h3d_Vector(0.612476,0.705252),new h3d_Vector(-0.578845,-0.768792),new h3d_Vector(-0.772454,-0.090976),new h3d_Vector(0.504440,0.372295),new h3d_Vector(0.155736,0.065157),new h3d_Vector(0.391522,0.849605),new h3d_Vector(-0.620106,-0.328104),new h3d_Vector(0.789239,-0.419965),new h3d_Vector(-0.545396,0.538133),new h3d_Vector(-0.178564,-0.596057)];
};
$hxClasses["h3d.shader.DirShadow"] = h3d_shader_DirShadow;
h3d_shader_DirShadow.__name__ = "h3d.shader.DirShadow";
h3d_shader_DirShadow.__super__ = hxsl_Shader;
h3d_shader_DirShadow.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		var v = this.pcfQuality__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("pcfQuality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 3;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl_Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl_Channel.Unknown) {
			if(this.shadowMap__.format == h3d_mat_Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl_Channel.PackedFloat;
			} else {
				throw new js__$Boot_HaxeError("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= (globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index) << 11;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.pcfQuality__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowRes__;
		case 7:
			return this.shadowMap__;
		case 8:
			return this.shadowProj__;
		case 9:
			return this.shadowBias__;
		case 10:
			return this.poissonDiskLow__;
		case 11:
			return this.poissonDiskHigh__;
		case 12:
			return this.poissonDiskVeryHigh__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 5:
			return this.pcfScale__;
		case 9:
			return this.shadowBias__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_DirShadow
});
var h3d_shader_GenTexture = function() {
	this.color__ = new h3d_Vector();
	this.mode__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.GenTexture"] = h3d_shader_GenTexture;
h3d_shader_GenTexture.__name__ = "h3d.shader.GenTexture";
h3d_shader_GenTexture.__super__ = h3d_shader_ScreenShader;
h3d_shader_GenTexture.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.mode__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("mode" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.mode__;
		case 2:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_GenTexture
});
var h3d_shader_LineShader = function(width,lengthScale) {
	if(lengthScale == null) {
		lengthScale = 1.;
	}
	if(width == null) {
		width = 1.5;
	}
	this.width__ = 0;
	this.lengthScale__ = 0;
	hxsl_Shader.call(this);
	this.width__ = width;
	this.lengthScale__ = lengthScale;
};
$hxClasses["h3d.shader.LineShader"] = h3d_shader_LineShader;
h3d_shader_LineShader.__name__ = "h3d.shader.LineShader";
h3d_shader_LineShader.__super__ = hxsl_Shader;
h3d_shader_LineShader.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_LineShader
});
var h3d_shader_MinMaxShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.MinMaxShader"] = h3d_shader_MinMaxShader;
h3d_shader_MinMaxShader.__name__ = "h3d.shader.MinMaxShader";
h3d_shader_MinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_MinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_MinMaxShader
});
var h3d_shader_CubeMinMaxShader = function() {
	this.mat__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.CubeMinMaxShader"] = h3d_shader_CubeMinMaxShader;
h3d_shader_CubeMinMaxShader.__name__ = "h3d.shader.CubeMinMaxShader";
h3d_shader_CubeMinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_CubeMinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		case 4:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_CubeMinMaxShader
});
var h3d_shader_NormalMap = function(texture) {
	hxsl_Shader.call(this);
	this.texture__ = texture;
};
$hxClasses["h3d.shader.NormalMap"] = h3d_shader_NormalMap;
h3d_shader_NormalMap.__name__ = "h3d.shader.NormalMap";
h3d_shader_NormalMap.__super__ = hxsl_Shader;
h3d_shader_NormalMap.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_NormalMap
});
var h3d_shader_Shadow = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Shadow"] = h3d_shader_Shadow;
h3d_shader_Shadow.__name__ = "h3d.shader.Shadow";
h3d_shader_Shadow.__super__ = hxsl_Shader;
h3d_shader_Shadow.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Shadow
});
var h3d_shader_SignedDistanceField = function() {
	this.smoothing__ = 0.041666666666666664;
	this.alphaCutoff__ = 0.5;
	this.channel__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.SignedDistanceField"] = h3d_shader_SignedDistanceField;
h3d_shader_SignedDistanceField.__name__ = "h3d.shader.SignedDistanceField";
h3d_shader_SignedDistanceField.__super__ = hxsl_Shader;
h3d_shader_SignedDistanceField.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.channel__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("channel" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.channel__;
		case 1:
			return this.alphaCutoff__;
		case 2:
			return this.smoothing__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.alphaCutoff__;
		case 2:
			return this.smoothing__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_SignedDistanceField
});
var h3d_shader_SkinBase = function() {
	this.bonesMatrixes__ = [];
	this.MaxBones__ = 0;
	hxsl_Shader.call(this);
	this.constModified = true;
	this.MaxBones__ = 34;
};
$hxClasses["h3d.shader.SkinBase"] = h3d_shader_SkinBase;
h3d_shader_SkinBase.__name__ = "h3d.shader.SkinBase";
h3d_shader_SkinBase.__super__ = hxsl_Shader;
h3d_shader_SkinBase.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SkinBase
});
var h3d_shader_Skin = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.Skin"] = h3d_shader_Skin;
h3d_shader_Skin.__name__ = "h3d.shader.Skin";
h3d_shader_Skin.__super__ = h3d_shader_SkinBase;
h3d_shader_Skin.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Skin
});
var h3d_shader_SkinTangent = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.SkinTangent"] = h3d_shader_SkinTangent;
h3d_shader_SkinTangent.__name__ = "h3d.shader.SkinTangent";
h3d_shader_SkinTangent.__super__ = h3d_shader_SkinBase;
h3d_shader_SkinTangent.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SkinTangent
});
var h3d_shader_SpecularTexture = function(tex) {
	hxsl_Shader.call(this);
	this.texture__ = tex;
};
$hxClasses["h3d.shader.SpecularTexture"] = h3d_shader_SpecularTexture;
h3d_shader_SpecularTexture.__name__ = "h3d.shader.SpecularTexture";
h3d_shader_SpecularTexture.__super__ = hxsl_Shader;
h3d_shader_SpecularTexture.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SpecularTexture
});
var h3d_shader_Texture = function(tex) {
	this.killAlphaThreshold__ = 0;
	hxsl_Shader.call(this);
	this.texture__ = tex;
	this.killAlphaThreshold__ = h3d_mat_Defaults.defaultKillAlphaThreshold;
};
$hxClasses["h3d.shader.Texture"] = h3d_shader_Texture;
h3d_shader_Texture.__name__ = "h3d.shader.Texture";
h3d_shader_Texture.__super__ = hxsl_Shader;
h3d_shader_Texture.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		if(this.killAlpha__) {
			this.constBits |= 2;
		}
		if(this.specularAlpha__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.additive__;
		case 1:
			return this.killAlpha__;
		case 2:
			return this.specularAlpha__;
		case 3:
			return this.killAlphaThreshold__;
		case 4:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 3) {
			return this.killAlphaThreshold__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Texture
});
var h3d_shader_UVDelta = function(dx,dy,sx,sy) {
	if(sy == null) {
		sy = 1.;
	}
	if(sx == null) {
		sx = 1.;
	}
	if(dy == null) {
		dy = 0.;
	}
	if(dx == null) {
		dx = 0.;
	}
	this.uvScale__ = new h3d_Vector();
	this.uvDelta__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.uvDelta__;
	var x = dx;
	var y = dy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	_this.w = 1.;
	var _this1 = this.uvScale__;
	var x1 = sx;
	var y1 = sy;
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	_this1.x = x1;
	_this1.y = y1;
	_this1.z = 0.;
	_this1.w = 1.;
};
$hxClasses["h3d.shader.UVDelta"] = h3d_shader_UVDelta;
h3d_shader_UVDelta.__name__ = "h3d.shader.UVDelta";
h3d_shader_UVDelta.__super__ = hxsl_Shader;
h3d_shader_UVDelta.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.uvDelta__;
		case 1:
			return this.uvScale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_UVDelta
});
var h3d_shader_VertexColorAlpha = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.VertexColorAlpha"] = h3d_shader_VertexColorAlpha;
h3d_shader_VertexColorAlpha.__name__ = "h3d.shader.VertexColorAlpha";
h3d_shader_VertexColorAlpha.__super__ = hxsl_Shader;
h3d_shader_VertexColorAlpha.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VertexColorAlpha
});
var h3d_shader_VolumeDecal = function(objectWidth,objectHeight) {
	this.isCentered__ = true;
	this.tangent__ = new h3d_Vector();
	this.normal__ = new h3d_Vector();
	this.scale__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.normal__;
	var x = 0;
	var y = 0;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this1 = this.tangent__;
	var x1 = 1;
	var y1 = 0;
	var z1 = 0;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	_this1.x = x1;
	_this1.y = y1;
	_this1.z = z1;
	_this1.w = 1.;
	var _this2 = this.scale__;
	var x2 = 1 / objectWidth;
	var y2 = 1 / objectHeight;
	if(y2 == null) {
		y2 = 0.;
	}
	if(x2 == null) {
		x2 = 0.;
	}
	_this2.x = x2;
	_this2.y = y2;
	_this2.z = 0.;
	_this2.w = 1.;
};
$hxClasses["h3d.shader.VolumeDecal"] = h3d_shader_VolumeDecal;
h3d_shader_VolumeDecal.__name__ = "h3d.shader.VolumeDecal";
h3d_shader_VolumeDecal.__super__ = hxsl_Shader;
h3d_shader_VolumeDecal.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isCentered__) {
			this.constBits |= 64;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.normal__;
		case 2:
			return this.tangent__;
		case 3:
			return this.isCentered__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VolumeDecal
});
var hxd_App = function() {
	var _gthis = this;
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.engine = engine;
		engine.onReady = $bind(this,this.setup);
		haxe_Timer.delay($bind(this,this.setup),0);
	} else {
		hxd_System.start(function() {
			engine = new h3d_Engine();
			_gthis.engine = engine;
			engine.onReady = $bind(_gthis,_gthis.setup);
			engine.init();
		});
	}
};
$hxClasses["hxd.App"] = hxd_App;
hxd_App.__name__ = "hxd.App";
hxd_App.__interfaces__ = [h3d_IDrawable];
hxd_App.staticHandler = function() {
};
hxd_App.prototype = {
	onResize: function() {
	}
	,render: function(e) {
		this.s3d.render(e);
		this.s2d.render(e);
	}
	,setup: function() {
		var _gthis = this;
		var initDone = false;
		this.engine.onReady = hxd_App.staticHandler;
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			if(initDone) {
				_gthis.onResize();
			}
		};
		this.s3d = new h3d_scene_Scene();
		this.s2d = new h2d_Scene();
		this.sevents = new hxd_SceneEvents();
		this.sevents.addScene(this.s2d);
		this.sevents.addScene(this.s3d);
		this.loadAssets(function() {
			initDone = true;
			_gthis.init();
			hxd_Timer.skip();
			_gthis.mainLoop();
			hxd_System.setLoop($bind(_gthis,_gthis.mainLoop));
			hxd_Key.initialize();
		});
	}
	,loadAssets: function(onLoaded) {
		onLoaded();
	}
	,init: function() {
	}
	,mainLoop: function() {
		hxd_Timer.update();
		this.sevents.checkEvents();
		if(this.isDisposed) {
			return;
		}
		this.update(hxd_Timer.dt);
		if(this.isDisposed) {
			return;
		}
		var dt = hxd_Timer.dt;
		if(this.s2d != null) {
			this.s2d.setElapsedTime(dt);
		}
		if(this.s3d != null) {
			this.s3d.setElapsedTime(dt);
		}
		this.engine.render(this);
	}
	,update: function(dt) {
	}
	,__class__: hxd_App
};
var hashagon_Boot = function() {
	hxd_App.call(this);
};
$hxClasses["hashagon.Boot"] = hashagon_Boot;
hashagon_Boot.__name__ = "hashagon.Boot";
hashagon_Boot.main = function() {
	new hashagon_Core();
};
hashagon_Boot.__super__ = hxd_App;
hashagon_Boot.prototype = $extend(hxd_App.prototype,{
	init: function() {
	}
	,__class__: hashagon_Boot
});
var hashagon_Col = function() { };
$hxClasses["hashagon.Col"] = hashagon_Col;
hashagon_Col.__name__ = "hashagon.Col";
var hashagon_Core = function() {
	hxd_App.call(this);
};
$hxClasses["hashagon.Core"] = hashagon_Core;
hashagon_Core.__name__ = "hashagon.Core";
hashagon_Core.cleanup = function() {
	hashagon_Text.cleanup();
	hashagon_Gfx.cleanup();
};
hashagon_Core.__super__ = hxd_App;
hashagon_Core.prototype = $extend(hxd_App.prototype,{
	init: function() {
		hxd_Res.set_loader(new hxd_res_Loader(new hxd_fs_EmbedFileSystem(haxe_Unserializer.run("oy8:graphicsoy19:adam_jawbreaker.pngty11:wombats.pngtgy6:soundsoy12:euryfind.mp3ty12:fireball.mp3tgg"))));
		this.s2d.set_scaleMode(h2d_ScaleMode.LetterBox(320,180,false));
		hashagon_Text.init(this);
		hashagon_Gfx.init(this);
		hashagon_Sound.init();
		hashagon_Music.init();
		hashagon_Random.set_seed(0);
		hashagon_Core.deltatime = 0;
		hashagon_Scene.init();
	}
	,update: function(dt) {
		hashagon_Core.deltatime = dt;
		hashagon_Scene.update();
	}
	,__class__: hashagon_Core
});
var hashagon_Gfx = function() { };
$hxClasses["hashagon.Gfx"] = hashagon_Gfx;
hashagon_Gfx.__name__ = "hashagon.Gfx";
hashagon_Gfx.init = function(_c) {
	hashagon_Gfx.core = _c;
	hashagon_Gfx.graphicsmap = new haxe_ds_StringMap();
	hashagon_Gfx.imagemap = new haxe_ds_StringMap();
	hashagon_Gfx.imageindex = new haxe_ds_StringMap();
	hashagon_Gfx.tilemap = new haxe_ds_StringMap();
	hashagon_Gfx.tileindex = new haxe_ds_StringMap();
	hashagon_Gfx.clearbuffer = new hashagon_displayobject_Quad();
	hashagon_Gfx.set_linethickness(1);
};
hashagon_Gfx.loadtiles = function(imagename,width,height) {
	imagename = imagename.toLowerCase();
	var _this = hashagon_Gfx.tileindex;
	if(__map_reserved[imagename] != null ? _this.existsReserved(imagename) : _this.h.hasOwnProperty(imagename)) {
		return true;
	}
	var newtileset = new hashagon_displayobject_Tileset(imagename,width,height);
	var _this1 = hashagon_Gfx.tileindex;
	if(__map_reserved[imagename] != null) {
		_this1.setReserved(imagename,newtileset);
	} else {
		_this1.h[imagename] = newtileset;
	}
	return true;
};
hashagon_Gfx.numberoftiles = function(tileset) {
	var _this = hashagon_Gfx.tileindex;
	return (__map_reserved[tileset] != null ? _this.getReserved(tileset) : _this.h[tileset]).numtiles;
};
hashagon_Gfx.drawtile = function(x,y,tilesetname,tilenum,id,pos) {
	if(id == null) {
		id = "";
	}
	if(id == "") {
		id = pos.fileName + "_" + pos.lineNumber;
	}
	var t;
	var _this = hashagon_Gfx.tilemap;
	if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
		var _this1 = hashagon_Gfx.tilemap;
		t = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
	} else {
		t = new hashagon_displayobject_Tile();
		var _this2 = hashagon_Gfx.tilemap;
		if(__map_reserved[id] != null) {
			_this2.setReserved(id,t);
		} else {
			_this2.h[id] = t;
		}
	}
	t.drawtile(x,y,tilesetname,tilenum);
};
hashagon_Gfx.cleanup = function() {
	if(hashagon_Gfx.graphicsmap != null) {
		var k = hashagon_Gfx.graphicsmap.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var _this = hashagon_Gfx.graphicsmap;
			(__map_reserved[k1] != null ? _this.getReserved(k1) : _this.h[k1]).dispose();
			hashagon_Gfx.graphicsmap.remove(k1);
		}
	}
	if(hashagon_Gfx.tilemap != null) {
		var k2 = hashagon_Gfx.tilemap.keys();
		while(k2.hasNext()) {
			var k3 = k2.next();
			var _this1 = hashagon_Gfx.tilemap;
			(__map_reserved[k3] != null ? _this1.getReserved(k3) : _this1.h[k3]).dispose();
			hashagon_Gfx.tilemap.remove(k3);
		}
	}
	if(hashagon_Gfx.imagemap != null) {
		var k4 = hashagon_Gfx.imagemap.keys();
		while(k4.hasNext()) {
			var k5 = k4.next();
			var _this2 = hashagon_Gfx.imagemap;
			(__map_reserved[k5] != null ? _this2.getReserved(k5) : _this2.h[k5]).dispose();
			hashagon_Gfx.imagemap.remove(k5);
		}
	}
};
hashagon_Gfx.set_linethickness = function(size) {
	hashagon_Gfx._linethickness = size;
	if(hashagon_Gfx._linethickness < 1) {
		hashagon_Gfx._linethickness = 1;
	}
	return hashagon_Gfx._linethickness;
};
var hashagon_Input = function() { };
$hxClasses["hashagon.Input"] = hashagon_Input;
hashagon_Input.__name__ = "hashagon.Input";
hashagon_Input.justpressed = function(k) {
	if(hxd_Key.isPressed(k)) {
		return true;
	}
	return false;
};
hashagon_Input.justreleased = function(k) {
	if(hxd_Key.isReleased(k)) {
		return true;
	}
	return false;
};
var hashagon_Music = function() { };
$hxClasses["hashagon.Music"] = hashagon_Music;
hashagon_Music.__name__ = "hashagon.Music";
hashagon_Music.init = function() {
	hashagon_Music.loadedsounds = new haxe_ds_StringMap();
	hashagon_Music.currentlyplaying = "";
};
var hashagon_Random = function() { };
$hxClasses["hashagon.Random"] = hashagon_Random;
hashagon_Random.__name__ = "hashagon.Random";
hashagon_Random.set_seed = function(s) {
	if(s == null) {
		hashagon_Random._seed = 1 + Math.random() * 2147483646 | 0;
	} else if(typeof(s) == "string") {
		if(s == "") {
			s = HxOverrides.dateStr(new Date());
		}
		hashagon_Random._seed = 0;
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			hashagon_Random._seed += s.charCodeAt(i) * (i + 1 ^ 2);
		}
	} else if(typeof(s) == "number" && ((s | 0) === s)) {
		if(s == 0) {
			hashagon_Random._seed = 1 + Math.random() * 2147483646 | 0;
		} else {
			hashagon_Random._seed = s | 0;
		}
	} else {
		s = Std.string(s);
		hashagon_Random._seed = 0;
		var _g2 = 0;
		var _g11 = s.length;
		while(_g2 < _g11) {
			var i1 = _g2++;
			hashagon_Random._seed += s.charCodeAt(i1) * (i1 + 1 ^ 2);
		}
	}
	return hashagon_Random._seed;
};
var hashagon_Scene = function() { };
$hxClasses["hashagon.Scene"] = hashagon_Scene;
hashagon_Scene.__name__ = "hashagon.Scene";
hashagon_Scene.init = function() {
	hashagon_Scene.currentscene = 0;
	hashagon_Scene.callinit();
};
hashagon_Scene.callinit = function() {
	if(hashagon_Scene.currentscene == 0) {
		Main.init();
	} else if(hashagon_Scene.currentscene == 1) {
		TestLevel.init();
	}
};
hashagon_Scene.update = function() {
	if(hashagon_Scene.currentscene == 0) {
		Main.update();
	} else {
		TestLevel.update();
	}
};
hashagon_Scene.cleanup = function() {
	if(hashagon_Scene.currentscene == 0) {
		Main.cleanup();
	} else {
		TestLevel.cleanup();
	}
};
hashagon_Scene.change = function(newscene) {
	hashagon_Core.cleanup();
	hashagon_Scene.cleanup();
	newscene = newscene.toLowerCase();
	if(newscene == "main") {
		hashagon_Scene.currentscene = 0;
	} else if(newscene == "testlevel") {
		hashagon_Scene.currentscene = 1;
	} else {
		hashagon_Scene.currentscene = 0;
	}
	hashagon_Scene.callinit();
};
var hashagon_Sound = function() { };
$hxClasses["hashagon.Sound"] = hashagon_Sound;
hashagon_Sound.__name__ = "hashagon.Sound";
hashagon_Sound.init = function() {
	hashagon_Sound.loadedsounds = new haxe_ds_StringMap();
};
hashagon_Sound.load = function(soundfile) {
	var _this = hashagon_Sound.loadedsounds;
	if(!(__map_reserved[soundfile] != null ? _this.existsReserved(soundfile) : _this.h.hasOwnProperty(soundfile))) {
		var this1 = hashagon_Sound.loadedsounds;
		var value = hxd_Res.load("sounds/" + soundfile + ".mp3").toSound();
		var _this1 = this1;
		if(__map_reserved[soundfile] != null) {
			_this1.setReserved(soundfile,value);
		} else {
			_this1.h[soundfile] = value;
		}
	}
};
hashagon_Sound.play = function(soundfile) {
	var soundresource;
	var _this = hashagon_Sound.loadedsounds;
	if(__map_reserved[soundfile] != null ? _this.existsReserved(soundfile) : _this.h.hasOwnProperty(soundfile)) {
		var _this1 = hashagon_Sound.loadedsounds;
		soundresource = __map_reserved[soundfile] != null ? _this1.getReserved(soundfile) : _this1.h[soundfile];
	} else {
		soundresource = hxd_Res.load("sounds/" + soundfile + ".mp3").toSound();
		var _this2 = hashagon_Sound.loadedsounds;
		if(__map_reserved[soundfile] != null) {
			_this2.setReserved(soundfile,soundresource);
		} else {
			_this2.h[soundfile] = soundresource;
		}
	}
	soundresource.play();
};
var hashagon_Text = function() { };
$hxClasses["hashagon.Text"] = hashagon_Text;
hashagon_Text.__name__ = "hashagon.Text";
hashagon_Text.init = function(_c) {
	hashagon_Text.core = _c;
	hashagon_Text.textfieldmap = new haxe_ds_StringMap();
	hashagon_Text.align = hashagon_Text.LEFT;
	hashagon_Text.size = 1;
};
hashagon_Text.display = function(x,y,text,color,alpha,id,pos) {
	if(id == null) {
		id = "";
	}
	if(alpha == null) {
		alpha = 1.0;
	}
	if(color == null) {
		color = 16777215;
	}
	if(id == "") {
		id = pos.fileName + "_" + pos.lineNumber;
	}
	var tf;
	var _this = hashagon_Text.textfieldmap;
	if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
		var _this1 = hashagon_Text.textfieldmap;
		tf = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
		tf.update(x,y,text,color,alpha);
	} else {
		tf = new hashagon_displayobject_TextField();
		var _this2 = hashagon_Text.textfieldmap;
		if(__map_reserved[id] != null) {
			_this2.setReserved(id,tf);
		} else {
			_this2.h[id] = tf;
		}
		tf.update(x,y,text,color,alpha);
	}
	tf.display();
};
hashagon_Text.cleanup = function() {
	if(hashagon_Text.textfieldmap != null) {
		var k = hashagon_Text.textfieldmap.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var _this = hashagon_Text.textfieldmap;
			(__map_reserved[k1] != null ? _this.getReserved(k1) : _this.h[k1]).dispose();
			hashagon_Text.textfieldmap.remove(k1);
		}
	}
};
var hashagon_displayobject_Image = function() {
	this.bitmap = null;
	this.attached = false;
	this.disposed = false;
};
$hxClasses["hashagon.displayobject.Image"] = hashagon_displayobject_Image;
hashagon_displayobject_Image.__name__ = "hashagon.displayobject.Image";
hashagon_displayobject_Image.prototype = {
	dispose: function() {
		this.disposed = true;
		hashagon_Gfx.core.s2d.removeChild(this.bitmap);
		this.bitmap = null;
	}
	,__class__: hashagon_displayobject_Image
};
var hashagon_displayobject_Quad = function() {
	this.graphics = new h2d_Graphics();
	this.disposed = false;
	this.attached = false;
};
$hxClasses["hashagon.displayobject.Quad"] = hashagon_displayobject_Quad;
hashagon_displayobject_Quad.__name__ = "hashagon.displayobject.Quad";
hashagon_displayobject_Quad.prototype = {
	dispose: function() {
		this.disposed = true;
		hashagon_Gfx.core.s2d.removeChild(this.graphics);
	}
	,__class__: hashagon_displayobject_Quad
};
var hashagon_displayobject_TextField = function() {
	var font = hxd_res_DefaultFont.get();
	this.tf = new h2d_Text(font);
	this.disposed = false;
};
$hxClasses["hashagon.displayobject.TextField"] = hashagon_displayobject_TextField;
hashagon_displayobject_TextField.__name__ = "hashagon.displayobject.TextField";
hashagon_displayobject_TextField.prototype = {
	update: function(x,y,text,color,alpha) {
		if(alpha == null) {
			alpha = 1.0;
		}
		if(color == null) {
			color = 16777215;
		}
		if(this.disposed) {
			return;
		}
		if(((text) instanceof Array)) {
			text = text.toString();
		} else if(typeof(text) != "string") {
			text = Std.string(text);
		}
		var _this = this.tf;
		_this.posChanged = true;
		_this.x = x;
		var _this1 = this.tf;
		_this1.posChanged = true;
		_this1.y = y;
		this.tf.set_text(text);
		this.tf.set_textColor(color);
		this.tf.alpha = alpha;
		var _this2 = this.tf;
		var v = hashagon_Text.size;
		_this2.posChanged = true;
		_this2.scaleX = v;
		_this2.posChanged = true;
		_this2.scaleY = v;
		if(hashagon_Text.align == hashagon_Text.LEFT) {
			this.tf.set_textAlign(h2d_Align.Left);
		}
		if(hashagon_Text.align == hashagon_Text.CENTER) {
			this.tf.set_textAlign(h2d_Align.Center);
		}
		if(hashagon_Text.align == hashagon_Text.RIGHT) {
			this.tf.set_textAlign(h2d_Align.Right);
		}
	}
	,display: function() {
		if(this.disposed) {
			return;
		}
		hashagon_Text.core.s2d.addChild(this.tf);
	}
	,dispose: function() {
		this.disposed = true;
		hashagon_Text.core.s2d.removeChild(this.tf);
		this.tf = null;
	}
	,__class__: hashagon_displayobject_TextField
};
var hashagon_displayobject_Tile = function() {
	this.attached = false;
	this.tilesetattached = false;
	this.currenttileset = null;
	this.disposed = false;
};
$hxClasses["hashagon.displayobject.Tile"] = hashagon_displayobject_Tile;
hashagon_displayobject_Tile.__name__ = "hashagon.displayobject.Tile";
hashagon_displayobject_Tile.prototype = {
	drawtile: function(x,y,tilesetname,tilenum) {
		if(this.disposed) {
			return;
		}
		if(!this.tilesetattached) {
			var _this = hashagon_Gfx.tileindex;
			this.currenttileset = __map_reserved[tilesetname] != null ? _this.getReserved(tilesetname) : _this.h[tilesetname];
			this.currentanim = new h2d_Anim(this.currenttileset.tiles,0);
			this.tilesetattached = true;
		}
		var _this1 = this.currentanim;
		_this1.posChanged = true;
		_this1.x = x;
		var _this2 = this.currentanim;
		_this2.posChanged = true;
		_this2.y = y;
		this.currentanim.set_currentFrame(tilenum);
		if(!this.attached) {
			hashagon_Gfx.core.s2d.addChild(this.currentanim);
			this.attached = true;
		}
	}
	,dispose: function() {
		this.disposed = true;
		hashagon_Gfx.core.s2d.removeChild(this.currentanim);
		this.currentanim = null;
	}
	,__class__: hashagon_displayobject_Tile
};
var hashagon_displayobject_Tileset = function(tilesetname,w,h) {
	this.tiles = [];
	var tilesetdata = hxd_Res.load("graphics/" + tilesetname + ".png").toTile();
	this.tiles = tilesetdata.gridFlatten(w);
	this.name = tilesetname;
	this.width = w;
	this.height = h;
	this.numtiles = this.tiles.length;
};
$hxClasses["hashagon.displayobject.Tileset"] = hashagon_displayobject_Tileset;
hashagon_displayobject_Tileset.__name__ = "hashagon.displayobject.Tileset";
hashagon_displayobject_Tileset.prototype = {
	__class__: hashagon_displayobject_Tileset
};
var haxe_EntryPoint = function() { };
$hxClasses["haxe.EntryPoint"] = haxe_EntryPoint;
haxe_EntryPoint.__name__ = "haxe.EntryPoint";
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	var time = haxe_MainLoop.tick();
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return time;
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	var $window = window;
	var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
	rqf(haxe_EntryPoint.run);
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -Infinity;
};
$hxClasses["haxe.MainEvent"] = haxe_MainEvent;
haxe_MainEvent.__name__ = "haxe.MainEvent";
haxe_MainEvent.prototype = {
	__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
$hxClasses["haxe.MainLoop"] = haxe_MainLoop;
haxe_MainLoop.__name__ = "haxe.MainLoop";
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw new js__$Boot_HaxeError("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	return e;
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g = 0;
			var _g1 = insize;
			while(_g < _g1) {
				var i = _g++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = Date.now() / 1000;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c11 << 2 | c2 >> 4;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c12 << 2 | c21 >> 4;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = c21 << 4 | c31 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i1 = 0;
	var max = str1.length;
	var l = max * 8;
	while(i1 < max) {
		blks[i1 >> 2] |= str1.b[i1] << (l + i1) % 4 * 8;
		++i1;
	}
	blks[i1 >> 2] |= 128 << (l + i1) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			tmp = _this2 == null ? 0 : _this2._height;
		} else {
			var _this3 = this.right;
			tmp = _this3 == null ? 0 : _this3._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUntil: function(end) {
		var buf = new haxe_io_BytesBuffer();
		var last;
		while(true) {
			last = this.readByte();
			if(!(last != end)) {
				break;
			}
			buf.addByte(last);
		}
		return buf.getBytes().toString();
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readUInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		if(this.bigEndian) {
			return ch3 | ch2 << 8 | ch1 << 16;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	flush: function() {
	}
	,close: function() {
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.withExtension = function(path,ext) {
	var s = new haxe_io_Path(path);
	s.ext = ext;
	return s.toString();
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths1 = _g;
	if(paths1.length == 0) {
		return "";
	}
	var path = paths1[0];
	var _g3 = 1;
	var _g11 = paths1.length;
	while(_g3 < _g11) {
		var i = _g3++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths1[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g2_offset = 0;
	var _g2_s = tmp;
	while(_g2_offset < _g2_s.length) {
		var s = _g2_s;
		var index = _g2_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g2_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_macro_Binop = $hxEnums["haxe.macro.Binop"] = { __ename__ : true, __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow","OpIn"]
	,OpAdd: {_hx_index:0,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMult: {_hx_index:1,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpDiv: {_hx_index:2,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpSub: {_hx_index:3,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssign: {_hx_index:4,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpEq: {_hx_index:5,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNotEq: {_hx_index:6,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGt: {_hx_index:7,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGte: {_hx_index:8,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLt: {_hx_index:9,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLte: {_hx_index:10,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAnd: {_hx_index:11,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpOr: {_hx_index:12,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpXor: {_hx_index:13,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolAnd: {_hx_index:14,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolOr: {_hx_index:15,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShl: {_hx_index:16,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShr: {_hx_index:17,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpUShr: {_hx_index:18,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMod: {_hx_index:19,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssignOp: ($_=function(op) { return {_hx_index:20,op:op,__enum__:"haxe.macro.Binop",toString:$estr}; },$_.__params__ = ["op"],$_)
	,OpInterval: {_hx_index:21,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpArrow: {_hx_index:22,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpIn: {_hx_index:23,__enum__:"haxe.macro.Binop",toString:$estr}
};
haxe_macro_Binop.__empty_constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn];
var haxe_macro_Unop = $hxEnums["haxe.macro.Unop"] = { __ename__ : true, __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"]
	,OpIncrement: {_hx_index:0,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpDecrement: {_hx_index:1,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNot: {_hx_index:2,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNeg: {_hx_index:3,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNegBits: {_hx_index:4,__enum__:"haxe.macro.Unop",toString:$estr}
};
haxe_macro_Unop.__empty_constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits];
var haxe_xml__$Access_NodeAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Access.NodeAccess_Impl_"] = haxe_xml__$Access_NodeAccess_$Impl_$;
haxe_xml__$Access_NodeAccess_$Impl_$.__name__ = "haxe.xml._Access.NodeAccess_Impl_";
haxe_xml__$Access_NodeAccess_$Impl_$.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this1.nodeType));
			}
			xname = this1.nodeName;
		}
		throw new js__$Boot_HaxeError(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Invalid nodeType " + _$Xml_XmlType_$Impl_$.toString(x.nodeType));
	}
	var this2 = x;
	return this2;
};
var haxe_xml__$Access_AttribAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Access.AttribAccess_Impl_"] = haxe_xml__$Access_AttribAccess_$Impl_$;
haxe_xml__$Access_AttribAccess_$Impl_$.__name__ = "haxe.xml._Access.AttribAccess_Impl_";
haxe_xml__$Access_AttribAccess_$Impl_$.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this1.nodeType));
		}
		throw new js__$Boot_HaxeError(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasNodeAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Access.HasNodeAccess_Impl_"] = haxe_xml__$Access_HasNodeAccess_$Impl_$;
haxe_xml__$Access_HasNodeAccess_$Impl_$.__name__ = "haxe.xml._Access.HasNodeAccess_Impl_";
haxe_xml__$Access_HasNodeAccess_$Impl_$.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
			}
			throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input2 = StringTools.trim(commentContent);
			this.output.b += Std.string(input2);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			switch(child1.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(child1.nodeType));
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__empty_constructs__ = [];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var b = t.right;
			var a = t.left;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g2 = t.table;
			var _g1 = t.n;
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var b = t.right;
				var a = t.left;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var b = t.right;
			var a = t.left;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g2 = 0;
		var _g3 = nlengths;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g4 = 1;
		var _g5 = maxbits - 1;
		while(_g4 < _g5) {
			var i2 = _g4++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g6 = 0;
		var _g7 = nlengths;
		while(_g6 < _g7) {
			var i3 = _g6++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__empty_constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var b = h.right;
			var a = h.left;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h.table;
			var n1 = h.n;
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g2 = hclen;
				var _g3 = 19;
				while(_g2 < _g3) {
					var i1 = _g2++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g4 = 0;
				var _g5 = hlit + hdist;
				while(_g4 < _g5) {
					var i2 = _g4++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = "haxe.zip.Uncompress";
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var hxd_BitmapData = function(width,height) {
	if(!(width == -101 && height == -102)) {
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		this.ctx = canvas.getContext("2d",null);
	}
};
$hxClasses["hxd.BitmapData"] = hxd_BitmapData;
hxd_BitmapData.__name__ = "hxd.BitmapData";
hxd_BitmapData.prototype = {
	getPixels: function() {
		var w = this.ctx.canvas.width;
		var h = this.ctx.canvas.height;
		var data = this.ctx.getImageData(0,0,w,h).data;
		var pixels = data.buffer;
		return new hxd_Pixels(w,h,haxe_io_Bytes.ofData(pixels),hxd_PixelFormat.RGBA);
	}
	,__class__: hxd_BitmapData
};
var hxd_Charset = function() {
	var _gthis = this;
	this.map = new haxe_ds_IntMap();
	var _g = 0;
	while(_g < 94) {
		var i = _g++;
		_gthis.map.h[65281 + i] = 33 + i;
	}
	var _g1 = 192;
	var _g2 = 199;
	while(_g1 < _g2) {
		var i1 = _g1++;
		_gthis.map.h[i1] = 65;
	}
	var _g3 = 224;
	var _g4 = 231;
	while(_g3 < _g4) {
		var i2 = _g3++;
		_gthis.map.h[i2] = 97;
	}
	var _g5 = 200;
	var _g6 = 204;
	while(_g5 < _g6) {
		var i3 = _g5++;
		_gthis.map.h[i3] = 69;
	}
	var _g7 = 232;
	var _g8 = 236;
	while(_g7 < _g8) {
		var i4 = _g7++;
		_gthis.map.h[i4] = 101;
	}
	var _g9 = 204;
	var _g10 = 208;
	while(_g9 < _g10) {
		var i5 = _g9++;
		_gthis.map.h[i5] = 73;
	}
	var _g11 = 236;
	var _g12 = 240;
	while(_g11 < _g12) {
		var i6 = _g11++;
		_gthis.map.h[i6] = 105;
	}
	var _g13 = 210;
	var _g14 = 215;
	while(_g13 < _g14) {
		var i7 = _g13++;
		_gthis.map.h[i7] = 79;
	}
	var _g15 = 242;
	var _g16 = 247;
	while(_g15 < _g16) {
		var i8 = _g15++;
		_gthis.map.h[i8] = 111;
	}
	var _g17 = 217;
	var _g18 = 221;
	while(_g17 < _g18) {
		var i9 = _g17++;
		_gthis.map.h[i9] = 85;
	}
	var _g19 = 249;
	var _g20 = 253;
	while(_g19 < _g20) {
		var i10 = _g19++;
		_gthis.map.h[i10] = 117;
	}
	_gthis.map.h[199] = 67;
	_gthis.map.h[231] = 67;
	_gthis.map.h[208] = 68;
	_gthis.map.h[222] = 100;
	_gthis.map.h[209] = 78;
	_gthis.map.h[241] = 110;
	_gthis.map.h[221] = 89;
	_gthis.map.h[253] = 121;
	_gthis.map.h[255] = 121;
	_gthis.map.h[8364] = 69;
	_gthis.map.h[12288] = 32;
	_gthis.map.h[160] = 32;
	_gthis.map.h[171] = 34;
	_gthis.map.h[187] = 34;
	_gthis.map.h[8220] = 34;
	_gthis.map.h[8221] = 34;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8217] = 39;
	_gthis.map.h[180] = 39;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8249] = 60;
	_gthis.map.h[8250] = 62;
	_gthis.map.h[8211] = 45;
};
$hxClasses["hxd.Charset"] = hxd_Charset;
hxd_Charset.__name__ = "hxd.Charset";
hxd_Charset.getDefault = function() {
	if(hxd_Charset.inst == null) {
		hxd_Charset.inst = new hxd_Charset();
	}
	return hxd_Charset.inst;
};
hxd_Charset.prototype = {
	resolveChar: function(code,glyphs) {
		var c = code;
		while(c != null) {
			var g = glyphs.h[c];
			if(g != null) {
				return g;
			}
			c = this.map.h[c];
		}
		return null;
	}
	,isCJK: function(code) {
		if(!(code >= 11904 && code <= 42191 || code >= 63744 && code <= 64255)) {
			if(code >= 131072) {
				return code <= 262141;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isSpace: function(code) {
		if(code != 32) {
			return code == 12288;
		} else {
			return true;
		}
	}
	,isBreakChar: function(code) {
		if(!this.isSpace(code)) {
			return this.isCJK(code);
		} else {
			return true;
		}
	}
	,__class__: hxd_Charset
};
var hxd_Cursor = $hxEnums["hxd.Cursor"] = { __ename__ : true, __constructs__ : ["Default","Button","Move","TextInput","Hide","Custom","Callback"]
	,Default: {_hx_index:0,__enum__:"hxd.Cursor",toString:$estr}
	,Button: {_hx_index:1,__enum__:"hxd.Cursor",toString:$estr}
	,Move: {_hx_index:2,__enum__:"hxd.Cursor",toString:$estr}
	,TextInput: {_hx_index:3,__enum__:"hxd.Cursor",toString:$estr}
	,Hide: {_hx_index:4,__enum__:"hxd.Cursor",toString:$estr}
	,Custom: ($_=function(custom) { return {_hx_index:5,custom:custom,__enum__:"hxd.Cursor",toString:$estr}; },$_.__params__ = ["custom"],$_)
	,Callback: ($_=function(f) { return {_hx_index:6,f:f,__enum__:"hxd.Cursor",toString:$estr}; },$_.__params__ = ["f"],$_)
};
hxd_Cursor.__empty_constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide];
var hxd_CustomCursor = function(frames,speed,offsetX,offsetY) {
	this.frames = frames;
	this.speed = speed;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.frameDelay = 1 / speed;
	this.frameTime = 0;
	this.frameIndex = 0;
};
$hxClasses["hxd.CustomCursor"] = hxd_CustomCursor;
hxd_CustomCursor.__name__ = "hxd.CustomCursor";
hxd_CustomCursor.prototype = {
	reset: function() {
		this.frameTime = 0;
		this.frameIndex = 0;
	}
	,update: function(dt) {
		var newTime = this.frameTime + dt;
		var delay = this.frameDelay;
		var index = this.frameIndex;
		while(newTime >= delay) {
			newTime -= delay;
			++index;
		}
		this.frameTime = newTime;
		if(index >= this.frames.length) {
			index %= this.frames.length;
		}
		if(index != this.frameIndex) {
			this.frameIndex = index;
			return index;
		}
		return -1;
	}
	,__class__: hxd_CustomCursor
};
var hxd_EventKind = $hxEnums["hxd.EventKind"] = { __ename__ : true, __constructs__ : ["EPush","ERelease","EMove","EOver","EOut","EWheel","EFocus","EFocusLost","EKeyDown","EKeyUp","EReleaseOutside","ETextInput","ECheck"]
	,EPush: {_hx_index:0,__enum__:"hxd.EventKind",toString:$estr}
	,ERelease: {_hx_index:1,__enum__:"hxd.EventKind",toString:$estr}
	,EMove: {_hx_index:2,__enum__:"hxd.EventKind",toString:$estr}
	,EOver: {_hx_index:3,__enum__:"hxd.EventKind",toString:$estr}
	,EOut: {_hx_index:4,__enum__:"hxd.EventKind",toString:$estr}
	,EWheel: {_hx_index:5,__enum__:"hxd.EventKind",toString:$estr}
	,EFocus: {_hx_index:6,__enum__:"hxd.EventKind",toString:$estr}
	,EFocusLost: {_hx_index:7,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyDown: {_hx_index:8,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyUp: {_hx_index:9,__enum__:"hxd.EventKind",toString:$estr}
	,EReleaseOutside: {_hx_index:10,__enum__:"hxd.EventKind",toString:$estr}
	,ETextInput: {_hx_index:11,__enum__:"hxd.EventKind",toString:$estr}
	,ECheck: {_hx_index:12,__enum__:"hxd.EventKind",toString:$estr}
};
hxd_EventKind.__empty_constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
var hxd_Event = function(k,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.button = 0;
	this.kind = k;
	this.relX = x;
	this.relY = y;
};
$hxClasses["hxd.Event"] = hxd_Event;
hxd_Event.__name__ = "hxd.Event";
hxd_Event.prototype = {
	__class__: hxd_Event
};
var hxd__$FloatBuffer_Float32Expand_$Impl_$ = {};
$hxClasses["hxd._FloatBuffer.Float32Expand_Impl_"] = hxd__$FloatBuffer_Float32Expand_$Impl_$;
hxd__$FloatBuffer_Float32Expand_$Impl_$.__name__ = "hxd._FloatBuffer.Float32Expand_Impl_";
hxd__$FloatBuffer_Float32Expand_$Impl_$._new = function(length) {
	var this1 = { pos : 0, array : new Float32Array(new ArrayBuffer(length << 2))};
	return this1;
};
var hxd_Key = function() { };
$hxClasses["hxd.Key"] = hxd_Key;
hxd_Key.__name__ = "hxd.Key";
hxd_Key.isPressed = function(code) {
	return hxd_Key.keyPressed[code] == hxd_Timer.frameCount + 1 - 1;
};
hxd_Key.isReleased = function(code) {
	return hxd_Key.keyPressed[code] == -(hxd_Timer.frameCount + 1) + 1;
};
hxd_Key.initialize = function() {
	if(hxd_Key.initDone) {
		hxd_Key.dispose();
	}
	hxd_Key.initDone = true;
	hxd_Key.keyPressed = [];
	hxd_Window.getInstance().addEventTarget(hxd_Key.onEvent);
};
hxd_Key.dispose = function() {
	if(hxd_Key.initDone) {
		hxd_Window.getInstance().removeEventTarget(hxd_Key.onEvent);
		hxd_Key.initDone = false;
		hxd_Key.keyPressed = [];
	}
};
hxd_Key.onEvent = function(e) {
	switch(e.kind._hx_index) {
	case 0:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = hxd_Timer.frameCount + 1;
		}
		break;
	case 1:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = -(hxd_Timer.frameCount + 1);
		}
		break;
	case 5:
		hxd_Key.keyPressed[e.wheelDelta > 0 ? 6 : 5] = hxd_Timer.frameCount + 1;
		break;
	case 8:
		if(!hxd_Key.ALLOW_KEY_REPEAT && hxd_Key.keyPressed[e.keyCode] > 0) {
			return;
		}
		hxd_Key.keyPressed[e.keyCode] = hxd_Timer.frameCount + 1;
		break;
	case 9:
		hxd_Key.keyPressed[e.keyCode] = -(hxd_Timer.frameCount + 1);
		break;
	default:
	}
};
var hxd_Flags = $hxEnums["hxd.Flags"] = { __ename__ : true, __constructs__ : ["ReadOnly","AlphaPremultiplied","FlipY"]
	,ReadOnly: {_hx_index:0,__enum__:"hxd.Flags",toString:$estr}
	,AlphaPremultiplied: {_hx_index:1,__enum__:"hxd.Flags",toString:$estr}
	,FlipY: {_hx_index:2,__enum__:"hxd.Flags",toString:$estr}
};
hxd_Flags.__empty_constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied,hxd_Flags.FlipY];
var hxd__$Pixels_PixelsARGB_$Impl_$ = {};
$hxClasses["hxd._Pixels.PixelsARGB_Impl_"] = hxd__$Pixels_PixelsARGB_$Impl_$;
hxd__$Pixels_PixelsARGB_$Impl_$.__name__ = "hxd._Pixels.PixelsARGB_Impl_";
hxd__$Pixels_PixelsARGB_$Impl_$.fromPixels = function(p) {
	p.convert(hxd_PixelFormat.ARGB);
	p.setFlip(false);
	return p;
};
var hxd_Pixels = function(width,height,bytes,format,offset) {
	if(offset == null) {
		offset = 0;
	}
	this.width = width;
	this.height = height;
	this.bytes = bytes;
	this.set_innerFormat(format);
	this.offset = offset;
	var i = 0;
	if(i == null) {
		i = 0;
	}
	var this1 = i;
	this.flags = this1;
};
$hxClasses["hxd.Pixels"] = hxd_Pixels;
hxd_Pixels.__name__ = "hxd.Pixels";
hxd_Pixels.calcStride = function(width,format) {
	var tmp;
	switch(format._hx_index) {
	case 3:
		tmp = 8;
		break;
	case 4:
		tmp = 16;
		break;
	case 5:
		tmp = 1;
		break;
	case 6:
		tmp = 2;
		break;
	case 7:
		tmp = 4;
		break;
	case 8:
		tmp = 2;
		break;
	case 9:
		tmp = 4;
		break;
	case 10:
		tmp = 8;
		break;
	case 11:
		tmp = 3;
		break;
	case 12:
		tmp = 6;
		break;
	case 13:
		tmp = 12;
		break;
	case 0:case 1:case 2:case 14:case 15:
		tmp = 4;
		break;
	case 16:
		tmp = 4;
		break;
	case 17:
		tmp = 4;
		break;
	case 18:
		var n = format.v;
		if(n == 1 || n == 4) {
			return width >> 1;
		}
		tmp = 1;
		break;
	}
	return width * tmp;
};
hxd_Pixels.alloc = function(width,height,format) {
	return new hxd_Pixels(width,height,new haxe_io_Bytes(new ArrayBuffer(height * hxd_Pixels.calcStride(width,format))),format);
};
hxd_Pixels.prototype = {
	set_innerFormat: function(fmt) {
		this.innerFormat = fmt;
		this.stride = hxd_Pixels.calcStride(this.width,fmt);
		this.bytesPerPixel = hxd_Pixels.calcStride(1,fmt);
		return fmt;
	}
	,invalidFormat: function() {
		throw new js__$Boot_HaxeError("Unsupported format for this operation : " + Std.string(this.innerFormat));
	}
	,makeSquare: function(copy) {
		var w = this.width;
		var h = this.height;
		var tw = w == 0 ? 0 : 1;
		var th = h == 0 ? 0 : 1;
		while(tw < w) tw <<= 1;
		while(th < h) th <<= 1;
		if(w == tw && h == th) {
			return this;
		}
		var bpp = this.bytesPerPixel;
		var out = new haxe_io_Bytes(new ArrayBuffer(tw * th * bpp));
		var p = 0;
		var b = this.offset;
		var _g = 0;
		var _g1 = h;
		while(_g < _g1) {
			var y = _g++;
			out.blit(p,this.bytes,b,w * bpp);
			p += w * bpp;
			b += w * bpp;
			var _g2 = 0;
			var _g11 = (tw - w) * bpp >> 2;
			while(_g2 < _g11) {
				var i = _g2++;
				out.setInt32(p,0);
				p += 4;
			}
		}
		var _g21 = 0;
		var _g3 = (th - h) * tw * bpp >> 2;
		while(_g21 < _g3) {
			var i1 = _g21++;
			out.setInt32(p,0);
			p += 4;
		}
		if(copy) {
			return new hxd_Pixels(tw,th,out,this.innerFormat);
		}
		this.bytes = out;
		this.width = tw;
		this.height = th;
		return this;
	}
	,copyInner: function() {
		var old = this.bytes;
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.height * this.stride));
		this.bytes.blit(0,old,this.offset,this.height * this.stride);
		this.offset = 0;
		this.flags &= -1 - (1 << hxd_Flags.ReadOnly._hx_index);
	}
	,setFlip: function(b) {
		if(b == null) {
			b = false;
		}
		if((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 == b) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		if(b) {
			this.flags |= 1 << hxd_Flags.FlipY._hx_index;
		} else {
			this.flags &= -1 - (1 << hxd_Flags.FlipY._hx_index);
		}
		if(this.stride % 4 != 0) {
			this.invalidFormat();
		}
		var _g = 0;
		var _g1 = this.height >> 1;
		while(_g < _g1) {
			var y = _g++;
			var p1 = y * this.stride + this.offset;
			var p2 = (this.height - 1 - y) * this.stride + this.offset;
			var _g2 = 0;
			var _g11 = this.stride >> 2;
			while(_g2 < _g11) {
				var x = _g2++;
				var a = this.bytes.getInt32(p1);
				var b1 = this.bytes.getInt32(p2);
				this.bytes.setInt32(p1,b1);
				this.bytes.setInt32(p2,a);
				p1 += 4;
				p2 += 4;
			}
		}
	}
	,convert: function(target) {
		if(this.innerFormat == target) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		var this1 = this.bytes.b;
		var bytes = this1;
		var _g = this.innerFormat;
		switch(_g._hx_index) {
		case 0:
			switch(target._hx_index) {
			case 1:
				var _g1 = 0;
				var _g11 = this.width * this.height;
				while(_g1 < _g11) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g2 = 0;
				var _g12 = this.width * this.height;
				while(_g2 < _g12) {
					var i1 = _g2++;
					var p1 = (i1 << 2) + this.offset;
					var a1 = bytes[p1];
					var v = bytes[p1 + 1];
					bytes[p1] = v;
					var v1 = bytes[p1 + 2];
					bytes[p1 + 1] = v1;
					var v2 = bytes[p1 + 3];
					bytes[p1 + 2] = v2;
					bytes[p1 + 3] = a1;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 1:
			switch(target._hx_index) {
			case 0:
				var _g3 = 0;
				var _g13 = this.width * this.height;
				while(_g3 < _g13) {
					var i2 = _g3++;
					var p2 = (i2 << 2) + this.offset;
					var a2 = bytes[p2];
					var r1 = bytes[p2 + 1];
					var g1 = bytes[p2 + 2];
					var b1 = bytes[p2 + 3];
					bytes[p2++] = b1;
					bytes[p2++] = g1;
					bytes[p2++] = r1;
					bytes[p2] = a2;
				}
				break;
			case 2:
				var _g4 = 0;
				var _g14 = this.width * this.height;
				while(_g4 < _g14) {
					var i3 = _g4++;
					var p3 = (i3 << 2) + this.offset;
					var b2 = bytes[p3];
					var r2 = bytes[p3 + 2];
					bytes[p3] = r2;
					bytes[p3 + 2] = b2;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 2:
			switch(target._hx_index) {
			case 0:
				var _g5 = 0;
				var _g15 = this.width * this.height;
				while(_g5 < _g15) {
					var i4 = _g5++;
					var p4 = (i4 << 2) + this.offset;
					var a3 = bytes[p4 + 3];
					var v3 = bytes[p4 + 2];
					bytes[p4 + 3] = v3;
					var v4 = bytes[p4 + 1];
					bytes[p4 + 2] = v4;
					var v5 = bytes[p4];
					bytes[p4 + 1] = v5;
					bytes[p4] = a3;
				}
				break;
			case 1:
				var _g6 = 0;
				var _g16 = this.width * this.height;
				while(_g6 < _g16) {
					var i5 = _g6++;
					var p5 = (i5 << 2) + this.offset;
					var b3 = bytes[p5];
					var r3 = bytes[p5 + 2];
					bytes[p5] = r3;
					bytes[p5 + 2] = b3;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 18:
			if(target._hx_index == 18) {
				var a4 = _g.v;
				var b4 = target.v;
				if(a4 != b4) {
					throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
				}
			} else {
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
		}
		this.set_innerFormat(target);
	}
	,dispose: function() {
		this.bytes = null;
	}
	,__class__: hxd_Pixels
};
var hxd_Res = function() { };
$hxClasses["hxd.Res"] = hxd_Res;
hxd_Res.__name__ = "hxd.Res";
hxd_Res.load = function(name) {
	return hxd_Res.get_loader().load(name);
};
hxd_Res.get_loader = function() {
	var l = hxd_res_Loader.currentInstance;
	if(l == null) {
		throw new js__$Boot_HaxeError("Resource loader not initialized: call to hxd.Res.initXXX() required");
	}
	return l;
};
hxd_Res.set_loader = function(l) {
	return hxd_res_Loader.currentInstance = l;
};
var hxd_SceneEvents = function($window) {
	this.defaultCursor = hxd_Cursor.Default;
	this.mouseCheckMove = true;
	this.enablePhysicalMouse = true;
	this.isOut = false;
	this.onOver = new hxd_Event(hxd_EventKind.EOver);
	this.onOut = new hxd_Event(hxd_EventKind.EOut);
	this.checkPos = new hxd_Event(hxd_EventKind.ECheck);
	this.focusLost = new hxd_Event(hxd_EventKind.EFocusLost);
	this.lastTouch = 0;
	this.mouseY = -1.;
	this.mouseX = -1.;
	this.overIndex = -1;
	this.scenes = [];
	this.pendingEvents = [];
	this.pushList = [];
	this.overList = [];
	this.overCandidates = [];
	if($window == null) {
		$window = hxd_Window.getInstance();
	}
	this.window = $window;
	$window.addEventTarget($bind(this,this.onEvent));
};
$hxClasses["hxd.SceneEvents"] = hxd_SceneEvents;
hxd_SceneEvents.__name__ = "hxd.SceneEvents";
hxd_SceneEvents.prototype = {
	onRemove: function(i) {
		if(i == this.currentFocus) {
			this.currentFocus = null;
		}
		if(this.overIndex >= 0) {
			var index = this.overList.indexOf(i);
			if(index >= 0) {
				HxOverrides.remove(this.overList,i);
				if(index < this.overIndex) {
					this.overIndex--;
				}
			}
		} else {
			HxOverrides.remove(this.overList,i);
			this.selectCursor();
		}
		HxOverrides.remove(this.pushList,i);
	}
	,addScene: function(s,index) {
		s.setEvents(this);
		if(index == null) {
			this.scenes.push(s);
		} else {
			this.scenes.splice(index,0,s);
		}
	}
	,blur: function() {
		if(this.currentFocus == null) {
			return;
		}
		this.focusLost.cancel = false;
		this.currentFocus.handleEvent(this.focusLost);
		if(!this.focusLost.cancel) {
			this.currentFocus = null;
		}
	}
	,checkFocus: function() {
		if(this.currentFocus == null) {
			return;
		}
		var s = this.currentFocus.getInteractiveScene();
		if(s == null) {
			this.currentFocus = null;
			return;
		}
		if(!s.isInteractiveVisible(this.currentFocus)) {
			this.blur();
		}
	}
	,emitEvent: function(event) {
		var oldX = event.relX;
		var oldY = event.relY;
		var overCandidateCount = 0;
		var handled = false;
		var checkOver = false;
		var fillOver = false;
		var checkPush = false;
		var cancelFocus = false;
		var updateCursor = false;
		this.overIndex = 0;
		switch(event.kind._hx_index) {
		case 0:
			cancelFocus = true;
			checkPush = true;
			break;
		case 1:
			checkPush = true;
			break;
		case 5:case 8:case 9:case 11:
			if(this.currentFocus != null) {
				event.relX = event.relY = 0;
				this.currentFocus.handleEvent(event);
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					return;
				}
			}
			break;
		case 2:case 12:
			checkOver = true;
			fillOver = true;
			break;
		default:
		}
		var _g1 = 0;
		var _g2 = this.scenes;
		while(_g1 < _g2.length) {
			var s = _g2[_g1];
			++_g1;
			var last = null;
			while(true) {
				var i = s.handleEvent(event,last);
				if(i == null) {
					event.relX = oldX;
					event.relY = oldY;
					break;
				}
				if(checkOver) {
					if(fillOver) {
						var idx = this.overList.indexOf(i);
						if(idx == -1) {
							if(this.overCandidates.length == overCandidateCount) {
								this.overCandidates[overCandidateCount] = { i : i, s : s, x : event.relX, y : event.relY, z : event.relZ};
							} else {
								var info = this.overCandidates[overCandidateCount];
								info.i = i;
								info.s = s;
								info.x = event.relX;
								info.y = event.relY;
								info.z = event.relZ;
							}
							++overCandidateCount;
							this.overList.splice(this.overIndex++,0,i);
							updateCursor = true;
						} else {
							if(idx < this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx + 1];
									++idx;
									if(!(idx < this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							} else if(idx > this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx - 1];
									--idx;
									if(!(idx > this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							}
							this.overIndex++;
						}
						fillOver = event.propagate;
					}
				} else {
					if(checkPush) {
						if(event.kind == hxd_EventKind.EPush) {
							this.pushList.push(i);
						} else {
							HxOverrides.remove(this.pushList,i);
						}
					}
					if(cancelFocus && i == this.currentFocus) {
						cancelFocus = false;
					}
				}
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					handled = true;
					break;
				}
				last = i;
				event.propagate = false;
			}
			if(handled) {
				break;
			}
		}
		if(cancelFocus && this.currentFocus != null) {
			this.blur();
		}
		if(checkOver) {
			if(this.overIndex < this.overList.length) {
				while(this.overIndex < this.overList.length) {
					var e = this.overList.pop();
					e.handleEvent(this.onOut);
				}
				updateCursor = true;
			}
			if(overCandidateCount != 0) {
				var i1 = 0;
				var ev = this.onOver;
				while(true) {
					var info1 = this.overCandidates[i1++];
					ev.relX = info1.x;
					ev.relY = info1.y;
					ev.relZ = info1.z;
					if(info1.s.isInteractiveVisible(info1.i)) {
						info1.i.handleEvent(ev);
					} else {
						HxOverrides.remove(this.overList,info1.i);
					}
					info1.i = null;
					info1.s = null;
					if(!(i1 < overCandidateCount)) {
						break;
					}
				}
			}
		}
		this.overIndex = -1;
		if(updateCursor) {
			this.selectCursor();
		}
		if(!handled && event != this.checkPos) {
			if(event.kind == hxd_EventKind.EPush) {
				this.pushList.push(null);
			} else if(event.kind == hxd_EventKind.ERelease) {
				HxOverrides.remove(this.pushList,null);
			}
			this.dispatchListeners(event);
		}
		if(event.kind == hxd_EventKind.ERelease && this.pushList.length > 0) {
			var _g3 = 0;
			var _g4 = this.pushList;
			while(_g3 < _g4.length) {
				var i2 = _g4[_g3];
				++_g3;
				if(i2 == null) {
					event.kind = hxd_EventKind.EReleaseOutside;
					this.dispatchListeners(event);
					event.kind = hxd_EventKind.ERelease;
				} else {
					var s1 = i2.getInteractiveScene();
					if(s1 == null) {
						continue;
					}
					event.kind = hxd_EventKind.EReleaseOutside;
					s1.dispatchEvent(event,i2);
					event.kind = hxd_EventKind.ERelease;
					event.relX = oldX;
					event.relY = oldY;
				}
			}
			this.pushList = [];
		}
	}
	,checkEvents: function() {
		var old = this.pendingEvents;
		var checkMoved = !this.mouseCheckMove;
		var checkFocused = this.currentFocus == null;
		if(old.length > 0) {
			this.pendingEvents = [];
			var _g = 0;
			while(_g < old.length) {
				var e = old[_g];
				++_g;
				var ox = e.relX;
				var oy = e.relY;
				switch(e.kind._hx_index) {
				case 0:case 1:
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 2:
					checkMoved = true;
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 3:
					this.isOut = false;
					this.selectCursor();
					continue;
				case 4:
					this.isOut = true;
					if(this.overList.length > 0) {
						var i = this.overList.length - 1;
						while(i >= 0) {
							this.onOut.cancel = false;
							this.overList[i].handleEvent(this.onOut);
							HxOverrides.remove(this.overList,this.overList[i]);
							--i;
						}
						this.selectCursor();
					}
					continue;
				case 5:case 8:case 9:case 11:
					if(!checkFocused) {
						checkFocused = true;
						this.checkFocus();
					}
					break;
				default:
				}
				if(this.currentDrag != null && (this.currentDrag.ref == null || this.currentDrag.ref == e.touchId)) {
					e.propagate = true;
					e.cancel = false;
					this.currentDrag.f(e);
					e.relX = ox;
					e.relY = oy;
					if(!e.propagate) {
						continue;
					}
				}
				this.emitEvent(e);
			}
		}
		if(!checkFocused) {
			this.checkFocus();
		}
		if(!checkMoved && !this.isOut && this.currentDrag == null) {
			this.checkPos.relX = this.mouseX;
			this.checkPos.relY = this.mouseY;
			this.checkPos.touchId = this.lastTouch;
			this.checkPos.cancel = false;
			this.checkPos.propagate = false;
			this.emitEvent(this.checkPos);
		}
	}
	,updateCursor: function(i) {
		if(this.overList.indexOf(i) != -1) {
			this.selectCursor();
		}
	}
	,selectCursor: function() {
		var cur = this.defaultCursor;
		var _g = 0;
		var _g1 = this.overList;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.cursor != null) {
				cur = o.cursor;
				break;
			}
		}
		if(cur._hx_index == 6) {
			var f = cur.f;
			f();
		} else {
			hxd_System.setCursor(cur);
		}
	}
	,onEvent: function(e) {
		if(!this.enablePhysicalMouse && e.kind == hxd_EventKind.EMove) {
			return;
		}
		this.pendingEvents.push(e);
	}
	,dispatchListeners: function(event) {
		var ox = event.relX;
		var oy = event.relY;
		event.propagate = true;
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			event.cancel = false;
			s.dispatchListeners(event);
			event.relX = ox;
			event.relY = oy;
			if(!event.propagate) {
				break;
			}
		}
	}
	,__class__: hxd_SceneEvents
};
var hxd_Platform = $hxEnums["hxd.Platform"] = { __ename__ : true, __constructs__ : ["IOS","Android","WebGL","PC","Console","FlashPlayer"]
	,IOS: {_hx_index:0,__enum__:"hxd.Platform",toString:$estr}
	,Android: {_hx_index:1,__enum__:"hxd.Platform",toString:$estr}
	,WebGL: {_hx_index:2,__enum__:"hxd.Platform",toString:$estr}
	,PC: {_hx_index:3,__enum__:"hxd.Platform",toString:$estr}
	,Console: {_hx_index:4,__enum__:"hxd.Platform",toString:$estr}
	,FlashPlayer: {_hx_index:5,__enum__:"hxd.Platform",toString:$estr}
};
hxd_Platform.__empty_constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
var hxd_SystemValue = $hxEnums["hxd.SystemValue"] = { __ename__ : true, __constructs__ : ["IsTouch","IsWindowed","IsMobile"]
	,IsTouch: {_hx_index:0,__enum__:"hxd.SystemValue",toString:$estr}
	,IsWindowed: {_hx_index:1,__enum__:"hxd.SystemValue",toString:$estr}
	,IsMobile: {_hx_index:2,__enum__:"hxd.SystemValue",toString:$estr}
};
hxd_SystemValue.__empty_constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var hxd_Timer = function() { };
$hxClasses["hxd.Timer"] = hxd_Timer;
hxd_Timer.__name__ = "hxd.Timer";
hxd_Timer.update = function() {
	hxd_Timer.frameCount++;
	var newTime = Date.now() / 1000;
	hxd_Timer.elapsedTime = newTime - hxd_Timer.lastTimeStamp;
	hxd_Timer.lastTimeStamp = newTime;
	if(hxd_Timer.elapsedTime < hxd_Timer.maxDeltaTime) {
		var a = hxd_Timer.elapsedTime;
		hxd_Timer.currentDT = a + hxd_Timer.smoothFactor * (hxd_Timer.currentDT - a);
	} else {
		hxd_Timer.elapsedTime = 1 / hxd_Timer.wantedFPS;
	}
	hxd_Timer.dt = hxd_Timer.currentDT;
};
hxd_Timer.skip = function() {
	hxd_Timer.lastTimeStamp = Date.now() / 1000;
};
var hxd_Window = function(canvas,globalEvents) {
	this.useScreenPixels = true;
	this.curMouseY = 0.;
	this.curMouseX = 0.;
	var _gthis = this;
	var customCanvas = canvas != null;
	this.eventTargets = new haxe_ds_List();
	this.resizeEvents = new haxe_ds_List();
	if(canvas == null) {
		canvas = window.document.getElementById("webgl");
		if(canvas == null) {
			throw new js__$Boot_HaxeError("Missing canvas #webgl");
		}
		if(canvas.getAttribute("globalEvents") == "1") {
			globalEvents = true;
		}
	}
	this.canvas = canvas;
	this.propagateKeyEvents = globalEvents;
	var propagate = canvas.getAttribute("propagateKeyEvents");
	if(propagate != null) {
		this.propagateKeyEvents = propagate != "0" && propagate != "false";
	}
	this.focused = globalEvents;
	this.element = globalEvents ? window : canvas;
	this.canvasPos = canvas.getBoundingClientRect();
	if(customCanvas) {
		canvas.addEventListener("mousemove",$bind(this,this.onMouseMove));
	} else {
		window.addEventListener("mousemove",$bind(this,this.onMouseMove));
	}
	this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
	this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
	this.element.addEventListener("wheel",$bind(this,this.onMouseWheel));
	this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
	this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
	this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
	this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
	this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
	var f = $bind(this,this.onFocus);
	var tmp = function() {
		f(false);
	};
	this.element.addEventListener("blur",tmp);
	var f1 = $bind(this,this.onFocus);
	var tmp1 = function() {
		f1(true);
	};
	this.element.addEventListener("focus",tmp1);
	canvas.oncontextmenu = function(e) {
		e.stopPropagation();
		e.preventDefault();
		return false;
	};
	if(globalEvents) {
		canvas.addEventListener("mousedown",function(e1) {
			_gthis.onMouseDown(e1);
			e1.stopPropagation();
			e1.preventDefault();
		});
		this.element.addEventListener("contextmenu",function(e2) {
			e2.stopPropagation();
			e2.preventDefault();
			return false;
		});
	} else {
		if(canvas.getAttribute("tabindex") == null) {
			canvas.setAttribute("tabindex","1");
		}
		canvas.style.outline = "none";
	}
	this.curW = this.get_width();
	this.curH = this.get_height();
	this.timer = new haxe_Timer(100);
	this.timer.run = $bind(this,this.checkResize);
};
$hxClasses["hxd.Window"] = hxd_Window;
hxd_Window.__name__ = "hxd.Window";
hxd_Window.getInstance = function() {
	if(hxd_Window.inst == null) {
		hxd_Window.inst = new hxd_Window();
	}
	return hxd_Window.inst;
};
hxd_Window.prototype = {
	checkResize: function() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		var cw = this.get_width();
		var ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	,event: function(e) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var et = val;
			et(e);
		}
	}
	,addEventTarget: function(et) {
		this.eventTargets.add(et);
	}
	,removeEventTarget: function(et) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,et)) {
				this.eventTargets.remove(e);
				break;
			}
		}
	}
	,addResizeEvent: function(f) {
		this.resizeEvents.push(f);
	}
	,removeResizeEvent: function(f) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,f)) {
				this.resizeEvents.remove(f);
				break;
			}
		}
	}
	,onResize: function(e) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var r = val;
			r();
		}
	}
	,getPixelRatio: function() {
		if(this.useScreenPixels) {
			return window.devicePixelRatio;
		} else {
			return 1;
		}
	}
	,get_width: function() {
		return Math.round(this.canvasPos.width * this.getPixelRatio());
	}
	,get_height: function() {
		return Math.round(this.canvasPos.height * this.getPixelRatio());
	}
	,get_mouseX: function() {
		return Math.round((this.curMouseX - this.canvasPos.left) * this.getPixelRatio());
	}
	,get_mouseY: function() {
		return Math.round((this.curMouseY - this.canvasPos.top) * this.getPixelRatio());
	}
	,onMouseDown: function(e) {
		if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseUp: function(e) {
		if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseMove: function(e) {
		this.curMouseX = e.clientX;
		this.curMouseY = e.clientY;
		this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
	}
	,onMouseWheel: function(e) {
		e.preventDefault();
		var ev = new hxd_Event(hxd_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = e.deltaY / 120;
		this.event(ev);
	}
	,onTouchStart: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchMove: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchEnd: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onKeyUp: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onKeyDown: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			switch(ev.keyCode) {
			case 8:case 9:case 16:case 17:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:
				e.preventDefault();
				break;
			default:
			}
			e.stopPropagation();
		}
	}
	,onKeyPress: function(e) {
		var ev = new hxd_Event(hxd_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onFocus: function(b) {
		this.event(new hxd_Event(b ? hxd_EventKind.EFocus : hxd_EventKind.EFocusLost));
		this.focused = b;
	}
	,set_displayMode: function(m) {
		var doc = window.document;
		var elt = doc.documentElement;
		var fullscreen = m != hxd_DisplayMode.Windowed;
		if(doc.fullscreenElement == elt == fullscreen) {
			return hxd_DisplayMode.Windowed;
		}
		if(m != hxd_DisplayMode.Windowed) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
		return m;
	}
	,__class__: hxd_Window
};
var hxd_System = function() { };
$hxClasses["hxd.System"] = hxd_System;
hxd_System.__name__ = "hxd.System";
hxd_System.setLoop = function(f) {
	if(!hxd_System.loopInit) {
		hxd_System.loopInit = true;
		hxd_System.browserLoop();
	}
	hxd_System.loopFunc = f;
};
hxd_System.browserLoop = function() {
	var $window = window;
	var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
	rqf(hxd_System.browserLoop);
	if(hxd_System.loopFunc != null) {
		hxd_System.loopFunc();
	}
};
hxd_System.start = function(callb) {
	callb();
};
hxd_System.setNativeCursor = function(c) {
	if(hxd_System.currentNativeCursor != null && Type.enumEq(c,hxd_System.currentNativeCursor)) {
		return;
	}
	hxd_System.currentNativeCursor = c;
	hxd_System.currentCustomCursor = null;
	var canvas = hxd_Window.getInstance().canvas;
	if(canvas != null) {
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "move";
			break;
		case 3:
			tmp = "text";
			break;
		case 4:
			tmp = "none";
			break;
		case 5:
			var cur = c.custom;
			if(cur.alloc == null) {
				cur.alloc = [];
				var _g = 0;
				var _g1 = cur.frames;
				while(_g < _g1.length) {
					var frame = _g1[_g];
					++_g;
					cur.alloc.push("url(\"" + frame.ctx.canvas.toDataURL("image/png") + "\") " + cur.offsetX + " " + cur.offsetY + ", default");
				}
			}
			if(cur.frames.length > 1) {
				hxd_System.currentCustomCursor = cur;
				cur.reset();
			}
			tmp = cur.alloc[cur.frameIndex];
			break;
		case 6:
			var _g11 = c.f;
			throw new js__$Boot_HaxeError("assert");
		}
		canvas.style.cursor = tmp;
	}
};
hxd_System.getDefaultFrameRate = function() {
	return 60.;
};
hxd_System.getValue = function(s) {
	switch(s._hx_index) {
	case 0:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	case 1:
		return true;
	case 2:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	}
};
hxd_System.updateCursor = function() {
	if(hxd_System.currentCustomCursor != null) {
		var change = hxd_System.currentCustomCursor.update(hxd_Timer.elapsedTime);
		if(change != -1) {
			var canvas = hxd_Window.getInstance().canvas;
			if(canvas != null) {
				canvas.style.cursor = hxd_System.currentCustomCursor.alloc[change];
			}
		}
	}
};
hxd_System.get_platform = function() {
	var ua = window.navigator.userAgent.toLowerCase();
	if(ua.indexOf("android") >= 0) {
		return hxd_Platform.Android;
	} else if(ua.indexOf("ipad") >= 0 || ua.indexOf("iphone") >= 0 || ua.indexOf("ipod") >= 0) {
		return hxd_Platform.IOS;
	} else {
		return hxd_Platform.PC;
	}
};
var hxd_DisplayMode = $hxEnums["hxd.DisplayMode"] = { __ename__ : true, __constructs__ : ["Windowed","Borderless","Fullscreen","FullscreenResize"]
	,Windowed: {_hx_index:0,__enum__:"hxd.DisplayMode",toString:$estr}
	,Borderless: {_hx_index:1,__enum__:"hxd.DisplayMode",toString:$estr}
	,Fullscreen: {_hx_index:2,__enum__:"hxd.DisplayMode",toString:$estr}
	,FullscreenResize: {_hx_index:3,__enum__:"hxd.DisplayMode",toString:$estr}
};
hxd_DisplayMode.__empty_constructs__ = [hxd_DisplayMode.Windowed,hxd_DisplayMode.Borderless,hxd_DisplayMode.Fullscreen,hxd_DisplayMode.FullscreenResize];
var hxd_earcut_EarNode = function() {
};
$hxClasses["hxd.earcut.EarNode"] = hxd_earcut_EarNode;
hxd_earcut_EarNode.__name__ = "hxd.earcut.EarNode";
hxd_earcut_EarNode.prototype = {
	__class__: hxd_earcut_EarNode
};
var hxd_earcut_Earcut = function() {
};
$hxClasses["hxd.earcut.Earcut"] = hxd_earcut_Earcut;
hxd_earcut_Earcut.__name__ = "hxd.earcut.Earcut";
hxd_earcut_Earcut.prototype = {
	triangulate_h2d_GPoint: function(points,holes) {
		var hasHoles = holes != null && holes.length > 0;
		var outerLen = hasHoles ? holes[0] : points.length;
		if(outerLen < 3) {
			return [];
		}
		var root = this.setLinkedList_triangulate_T(points,0,outerLen,true);
		if(holes != null) {
			root = this.eliminateHoles_triangulate_T(points,holes,root);
		}
		return this.triangulateNode(root,points.length > 80);
	}
	,eliminateHoles_triangulate_T: function(points,holes,root) {
		var queue = [];
		var _g = 0;
		var _g1 = holes.length;
		while(_g < _g1) {
			var i = _g++;
			var s = holes[i];
			var e = i == holes.length - 1 ? points.length : holes[i + 1];
			var node = this.setLinkedList_eliminateHoles_T(points,s,e,false);
			if(node == node.next) {
				node.steiner = true;
			}
			queue.push(this.getLeftmost(node));
		}
		queue.sort($bind(this,this.compareX));
		var _g2 = 0;
		while(_g2 < queue.length) {
			var q = queue[_g2];
			++_g2;
			this.eliminateHole(q,root);
			root = this.filterPoints(root,root.next);
		}
		return root;
	}
	,setLinkedList_eliminateHoles_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g2 = start;
			var _g3 = end;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var p = points[i1];
				var x = p.x;
				var y = p.y;
				var n1 = this.cache;
				if(n1 == null) {
					n1 = new hxd_earcut_EarNode();
					n1.allocNext = this.allocated;
					this.allocated = n1;
				} else {
					this.cache = n1.next;
				}
				n1.i = i1;
				n1.z = -1;
				n1.x = x;
				n1.y = y;
				n1.next = null;
				n1.prev = node;
				n1.steiner = false;
				n1.prevZ = null;
				n1.nextZ = null;
				if(node != null) {
					node.next = n1;
				}
				node = n1;
			}
		} else {
			var i2 = end - 1;
			while(i2 >= start) {
				var p1 = points[i2];
				var x1 = p1.x;
				var y1 = p1.y;
				var n2 = this.cache;
				if(n2 == null) {
					n2 = new hxd_earcut_EarNode();
					n2.allocNext = this.allocated;
					this.allocated = n2;
				} else {
					this.cache = n2.next;
				}
				n2.i = i2;
				n2.z = -1;
				n2.x = x1;
				n2.y = y1;
				n2.next = null;
				n2.prev = node;
				n2.steiner = false;
				n2.prevZ = null;
				n2.nextZ = null;
				if(node != null) {
					node.next = n2;
				}
				node = n2;
				--i2;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,setLinkedList_triangulate_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g2 = start;
			var _g3 = end;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var p = points[i1];
				var x = p.x;
				var y = p.y;
				var n1 = this.cache;
				if(n1 == null) {
					n1 = new hxd_earcut_EarNode();
					n1.allocNext = this.allocated;
					this.allocated = n1;
				} else {
					this.cache = n1.next;
				}
				n1.i = i1;
				n1.z = -1;
				n1.x = x;
				n1.y = y;
				n1.next = null;
				n1.prev = node;
				n1.steiner = false;
				n1.prevZ = null;
				n1.nextZ = null;
				if(node != null) {
					node.next = n1;
				}
				node = n1;
			}
		} else {
			var i2 = end - 1;
			while(i2 >= start) {
				var p1 = points[i2];
				var x1 = p1.x;
				var y1 = p1.y;
				var n2 = this.cache;
				if(n2 == null) {
					n2 = new hxd_earcut_EarNode();
					n2.allocNext = this.allocated;
					this.allocated = n2;
				} else {
					this.cache = n2.next;
				}
				n2.i = i2;
				n2.z = -1;
				n2.x = x1;
				n2.y = y1;
				n2.next = null;
				n2.prev = node;
				n2.steiner = false;
				n2.prevZ = null;
				n2.nextZ = null;
				if(node != null) {
					node.next = n2;
				}
				node = n2;
				--i2;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,triangulateNode: function(root,useZOrder) {
		this.triangles = [];
		root = this.filterPoints(root);
		if(useZOrder && root != null) {
			var maxX = root.x;
			this.minX = maxX;
			var maxY = root.y;
			this.minY = maxY;
			var p = root.next;
			while(p != root) {
				var x = p.x;
				var y = p.y;
				if(x < this.minX) {
					this.minX = x;
				}
				if(y < this.minY) {
					this.minY = y;
				}
				if(x > maxX) {
					maxX = x;
				}
				if(y > maxY) {
					maxY = y;
				}
				p = p.next;
			}
			var a = maxX - this.minX;
			var b = maxY - this.minY;
			this.size = a < b ? b : a;
			this.hasSize = true;
		} else {
			this.hasSize = false;
		}
		this.earcutLinked(root);
		var result = this.triangles;
		this.triangles = null;
		var n = this.allocated;
		if(this.cache != null) {
			while(n != this.cache) n = n.allocNext;
			n = n.allocNext;
		}
		while(n != null) {
			n.next = this.cache;
			this.cache = n;
			n = n.allocNext;
		}
		return result;
	}
	,eliminateHole: function(hole,root) {
		root = this.findHoleBridge(hole,root);
		if(root != null) {
			var b = this.splitPolygon(root,hole);
			this.filterPoints(b,b.next);
		}
	}
	,findHoleBridge: function(hole,root) {
		var p = root;
		var hx = hole.x;
		var hy = hole.y;
		var qx = -Infinity;
		var m = null;
		while(true) {
			if(hy <= p.y && hy >= p.next.y) {
				var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
				if(x <= hx && x > qx) {
					qx = x;
					m = p.x < p.next.x ? p : p.next;
				}
			}
			p = p.next;
			if(!(p != root)) {
				break;
			}
		}
		if(m == null) {
			return null;
		}
		var stop = m;
		var tanMin = Infinity;
		var tan;
		p = m.next;
		while(p != stop) {
			var tmp;
			if(hx >= p.x && p.x >= m.x) {
				var ax = hy < m.y ? hx : qx;
				var bx = m.x;
				var by = m.y;
				var cx = hy < m.y ? qx : hx;
				var px = p.x;
				var py = p.y;
				tmp = (cx - px) * (hy - py) - (ax - px) * (hy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (hy - py) >= 0 && (bx - px) * (hy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				var f = hy - p.y;
				tan = (f < 0 ? -f : f) / (hx - p.x);
				var tmp1;
				if(tan < tanMin || tan == tanMin && p.x > m.x) {
					var p1 = p.prev;
					var r = p.next;
					if((p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) < 0) {
						var r1 = p.next;
						if((hole.y - p.y) * (r1.x - hole.x) - (hole.x - p.x) * (r1.y - hole.y) >= 0) {
							var q = p.prev;
							tmp1 = (q.y - p.y) * (hole.x - q.x) - (q.x - p.x) * (hole.y - q.y) >= 0;
						} else {
							tmp1 = false;
						}
					} else {
						var r2 = p.prev;
						if(!((hole.y - p.y) * (r2.x - hole.x) - (hole.x - p.x) * (r2.y - hole.y) < 0)) {
							var q1 = p.next;
							tmp1 = (q1.y - p.y) * (hole.x - q1.x) - (q1.x - p.x) * (hole.y - q1.y) < 0;
						} else {
							tmp1 = true;
						}
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					m = p;
					tanMin = tan;
				}
			}
			p = p.next;
		}
		return m;
	}
	,getLeftmost: function(node) {
		var p = node;
		var leftmost = node;
		while(true) {
			if(p.x < leftmost.x) {
				leftmost = p;
			}
			p = p.next;
			if(!(p != node)) {
				break;
			}
		}
		return leftmost;
	}
	,compareX: function(a,b) {
		if(a.x - b.x > 0) {
			return 1;
		} else {
			return -1;
		}
	}
	,filterPoints: function(start,end) {
		if(start == null) {
			return start;
		}
		if(end == null) {
			end = start;
		}
		var p = start;
		var again;
		while(true) {
			again = false;
			var tmp;
			if(!p.steiner) {
				var p2 = p.next;
				if(!(p.x == p2.x && p.y == p2.y)) {
					var p1 = p.prev;
					var r = p.next;
					tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) == 0;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				end = p.prev;
				p = end;
				if(p == p.next) {
					return null;
				}
				again = true;
			} else {
				p = p.next;
			}
			if(!(again || p != end)) {
				break;
			}
		}
		return end;
	}
	,earcutLinked: function(ear,pass) {
		if(pass == null) {
			pass = 0;
		}
		if(ear == null) {
			return;
		}
		if(pass == 0 && this.hasSize) {
			this.indexCurve(ear);
		}
		var stop = ear;
		var prev;
		var next;
		while(ear.prev != ear.next) {
			prev = ear.prev;
			next = ear.next;
			if(this.hasSize ? this.isEarHashed(ear) : this.isEar(ear)) {
				this.triangles.push(prev.i);
				this.triangles.push(ear.i);
				this.triangles.push(next.i);
				ear.next.prev = ear.prev;
				ear.prev.next = ear.next;
				if(ear.prevZ != null) {
					ear.prevZ.nextZ = ear.nextZ;
				}
				if(ear.nextZ != null) {
					ear.nextZ.prevZ = ear.prevZ;
				}
				ear = next.next;
				stop = next.next;
				continue;
			}
			ear = next;
			if(ear == stop) {
				switch(pass) {
				case 0:
					this.earcutLinked(this.filterPoints(ear),1);
					break;
				case 1:
					ear = this.cureLocalIntersections(ear);
					this.earcutLinked(ear,2);
					break;
				case 2:
					this.splitEarcut(ear);
					break;
				}
				break;
			}
		}
	}
	,isEar: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var p = ear.next.next;
		while(p != ear.prev) {
			var tmp;
			var ax = a.x;
			var ay = a.y;
			var bx = b.x;
			var by = b.y;
			var cx = c.x;
			var cy = c.y;
			var px = p.x;
			var py = p.y;
			if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.next;
		}
		return true;
	}
	,isEarHashed: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x;
		var minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y;
		var maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x;
		var maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
		var x = 32767 * (minTX - this.minX) / this.size | 0;
		var y = 32767 * (minTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		var minZ = x | y << 1;
		var x1 = 32767 * (maxTX - this.minX) / this.size | 0;
		var y1 = 32767 * (maxTY - this.minY) / this.size | 0;
		x1 = (x1 | x1 << 8) & 16711935;
		x1 = (x1 | x1 << 4) & 252645135;
		x1 = (x1 | x1 << 2) & 858993459;
		x1 = (x1 | x1 << 1) & 1431655765;
		y1 = (y1 | y1 << 8) & 16711935;
		y1 = (y1 | y1 << 4) & 252645135;
		y1 = (y1 | y1 << 2) & 858993459;
		y1 = (y1 | y1 << 1) & 1431655765;
		var maxZ = x1 | y1 << 1;
		var p = ear.nextZ;
		while(p != null && p.z <= maxZ) {
			var tmp;
			var tmp1;
			if(p != ear.prev && p != ear.next) {
				var ax = a.x;
				var ay = a.y;
				var bx = b.x;
				var by = b.y;
				var cx = c.x;
				var cy = c.y;
				var px = p.x;
				var py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.nextZ;
		}
		p = ear.prevZ;
		while(p != null && p.z >= minZ) {
			var tmp2;
			var tmp3;
			if(p != ear.prev && p != ear.next) {
				var ax1 = a.x;
				var ay1 = a.y;
				var bx1 = b.x;
				var by1 = b.y;
				var cx1 = c.x;
				var cy1 = c.y;
				var px1 = p.x;
				var py1 = p.y;
				tmp3 = (cx1 - px1) * (ay1 - py1) - (ax1 - px1) * (cy1 - py1) >= 0 && (ax1 - px1) * (by1 - py1) - (bx1 - px1) * (ay1 - py1) >= 0 && (bx1 - px1) * (cy1 - py1) - (cx1 - px1) * (by1 - py1) >= 0;
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				var p2 = p.prev;
				var r1 = p.next;
				tmp2 = (p.y - p2.y) * (r1.x - p.x) - (p.x - p2.x) * (r1.y - p.y) >= 0;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				return false;
			}
			p = p.prevZ;
		}
		return true;
	}
	,cureLocalIntersections: function(start) {
		var p = start;
		while(true) {
			var a = p.prev;
			var b = p.next.next;
			var tmp;
			var tmp1;
			var p2 = p.next;
			if((p.y - a.y) * (p2.x - p.x) - (p.x - a.x) * (p2.y - p.y) > 0 != (p.y - a.y) * (b.x - p.x) - (p.x - a.x) * (b.y - p.y) > 0 && (b.y - p2.y) * (a.x - b.x) - (b.x - p2.x) * (a.y - b.y) > 0 != (b.y - p2.y) * (p.x - b.x) - (b.x - p2.x) * (p.y - b.y) > 0) {
				var p1 = a.prev;
				var r = a.next;
				if((a.y - p1.y) * (r.x - a.x) - (a.x - p1.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p3 = b.prev;
				var r3 = b.next;
				if((b.y - p3.y) * (r3.x - b.x) - (b.x - p3.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				this.triangles.push(a.i);
				this.triangles.push(p.i);
				this.triangles.push(b.i);
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				var p4 = p.next;
				p4.next.prev = p4.prev;
				p4.prev.next = p4.next;
				if(p4.prevZ != null) {
					p4.prevZ.nextZ = p4.nextZ;
				}
				if(p4.nextZ != null) {
					p4.nextZ.prevZ = p4.prevZ;
				}
				start = b;
				p = start;
			}
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		return p;
	}
	,splitEarcut: function(start) {
		var a = start;
		while(true) {
			var b = a.next.next;
			while(b != a.prev) {
				if(a.i != b.i && this.isValidDiagonal(a,b)) {
					var c = this.splitPolygon(a,b);
					a = this.filterPoints(a,a.next);
					c = this.filterPoints(c,c.next);
					this.earcutLinked(a);
					this.earcutLinked(c);
					return;
				}
				b = b.next;
			}
			a = a.next;
			if(!(a != start)) {
				break;
			}
		}
	}
	,splitPolygon: function(a,b) {
		var i = a.i;
		var x = a.x;
		var y = a.y;
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var a2 = n;
		var i1 = b.i;
		var x1 = b.x;
		var y1 = b.y;
		var last1 = null;
		var n1 = this.cache;
		if(n1 == null) {
			n1 = new hxd_earcut_EarNode();
			n1.allocNext = this.allocated;
			this.allocated = n1;
		} else {
			this.cache = n1.next;
		}
		n1.i = i1;
		n1.z = -1;
		n1.x = x1;
		n1.y = y1;
		n1.next = null;
		n1.prev = last1;
		n1.steiner = false;
		n1.prevZ = null;
		n1.nextZ = null;
		if(last1 != null) {
			last1.next = n1;
		}
		var b2 = n1;
		var an = a.next;
		var bp = b.prev;
		a.next = b;
		b.prev = a;
		a2.next = an;
		an.prev = a2;
		b2.next = a2;
		a2.prev = b2;
		bp.next = b2;
		b2.prev = bp;
		return b2;
	}
	,isValidDiagonal: function(a,b) {
		if(!(a.x == b.x && a.y == b.y)) {
			var tmp;
			var tmp1;
			if(a.next.i != b.i && a.prev.i != b.i && !this.intersectsPolygon(a,b)) {
				var p = a.prev;
				var r = a.next;
				if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = b.prev;
				var r3 = b.next;
				if((b.y - p1.y) * (r3.x - b.x) - (b.x - p1.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				return this.middleInside(a,b);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,middleInside: function(a,b) {
		var p = a;
		var inside = false;
		var px = (a.x + b.x) / 2;
		var py = (a.y + b.y) / 2;
		while(true) {
			if(p.y > py != p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
				inside = !inside;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return inside;
	}
	,intersectsPolygon: function(a,b) {
		var p = a;
		while(true) {
			var tmp;
			if(p.i != a.i && p.next.i != a.i && p.i != b.i && p.next.i != b.i) {
				var q1 = p.next;
				tmp = (q1.y - p.y) * (a.x - q1.x) - (q1.x - p.x) * (a.y - q1.y) > 0 != (q1.y - p.y) * (b.x - q1.x) - (q1.x - p.x) * (b.y - q1.y) > 0 && (b.y - a.y) * (p.x - b.x) - (b.x - a.x) * (p.y - b.y) > 0 != (b.y - a.y) * (q1.x - b.x) - (b.x - a.x) * (q1.y - b.y) > 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return false;
	}
	,indexCurve: function(start) {
		var p = start;
		while(true) {
			if(p.z < 0) {
				var x = 32767 * (p.x - this.minX) / this.size | 0;
				var y = 32767 * (p.y - this.minY) / this.size | 0;
				x = (x | x << 8) & 16711935;
				x = (x | x << 4) & 252645135;
				x = (x | x << 2) & 858993459;
				x = (x | x << 1) & 1431655765;
				y = (y | y << 8) & 16711935;
				y = (y | y << 4) & 252645135;
				y = (y | y << 2) & 858993459;
				y = (y | y << 1) & 1431655765;
				p.z = x | y << 1;
			}
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		p.prevZ.nextZ = null;
		p.prevZ = null;
		this.sortLinked(p);
	}
	,sortLinked: function(list) {
		var p;
		var q;
		var e;
		var tail;
		var numMerges;
		var pSize;
		var qSize;
		var inSize = 1;
		while(true) {
			p = list;
			list = null;
			tail = null;
			numMerges = 0;
			while(p != null) {
				++numMerges;
				q = p;
				pSize = 0;
				var _g = 0;
				var _g1 = inSize;
				while(_g < _g1) {
					var i = _g++;
					++pSize;
					q = q.nextZ;
					if(q == null) {
						break;
					}
				}
				qSize = inSize;
				while(pSize > 0 || qSize > 0 && q != null) {
					if(pSize == 0) {
						e = q;
						q = q.nextZ;
						--qSize;
					} else if(qSize == 0 || q == null) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else if(p.z <= q.z) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else {
						e = q;
						q = q.nextZ;
						--qSize;
					}
					if(tail != null) {
						tail.nextZ = e;
					} else {
						list = e;
					}
					e.prevZ = tail;
					tail = e;
				}
				p = q;
			}
			tail.nextZ = null;
			inSize *= 2;
			if(!(numMerges > 1)) {
				break;
			}
		}
		return list;
	}
	,__class__: hxd_earcut_Earcut
};
var hxd_fmt_bfnt_FontParser = function() { };
$hxClasses["hxd.fmt.bfnt.FontParser"] = hxd_fmt_bfnt_FontParser;
hxd_fmt_bfnt_FontParser.__name__ = "hxd.fmt.bfnt.FontParser";
hxd_fmt_bfnt_FontParser.parse = function(bytes,path,resolveTile) {
	var tile = null;
	var font = new h2d_Font(null,0);
	var glyphs = font.glyphs;
	font.baseLine = 0;
	var _g = bytes.getInt32(0);
	switch(_g) {
	case 54938946:
		var bytes1 = new haxe_io_BytesInput(bytes);
		var _g1 = bytes1;
		_g1.set_position(_g1.pos + 4);
		var pageCount = 0;
		while(bytes1.pos < bytes1.totlen) {
			var id = bytes1.readByte();
			var length = bytes1.readInt32();
			var pos = bytes1.pos;
			switch(id) {
			case 1:
				font.size = font.initSize = bytes1.readInt16();
				var _g2 = bytes1;
				_g2.set_position(_g2.pos + 12);
				font.name = bytes1.readUntil(0);
				break;
			case 2:
				font.lineHeight = bytes1.readUInt16();
				font.baseLine = bytes1.readUInt16();
				var _g3 = bytes1;
				_g3.set_position(_g3.pos + 4);
				pageCount = bytes1.readUInt16();
				if(pageCount != 1) {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 224, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
				break;
			case 3:
				var name = bytes1.readUntil(0);
				try {
					font.tilePath = name;
					var tile1 = haxe_io_Path.join([haxe_io_Path.directory(path),name]);
					tile = resolveTile(tile1);
				} catch( e ) {
					var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
					haxe_Log.trace("Warning: Could not find referenced font texture at \"" + name + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
					font.tilePath = new haxe_io_Path(path).file + ".png";
					var tile2 = haxe_io_Path.withExtension(path,"png");
					tile = resolveTile(tile2);
				}
				break;
			case 4:
				var count = length / 20 | 0;
				while(count > 0) {
					var cid = bytes1.readInt32();
					var t = bytes1.readUInt16();
					var t1 = bytes1.readUInt16();
					var t2 = bytes1.readUInt16();
					var t3 = bytes1.readUInt16();
					var t4 = bytes1.readInt16();
					var t5 = bytes1.readInt16();
					var t6 = tile.sub(t,t1,t2,t3,t4,t5);
					var fc = new h2d_FontChar(t6,bytes1.readInt16());
					glyphs.h[cid] = fc;
					var _g4 = bytes1;
					_g4.set_position(_g4.pos + 2);
					--count;
				}
				break;
			case 5:
				var count1 = length / 10 | 0;
				while(count1 > 0) {
					var first = bytes1.readInt32();
					var key = bytes1.readInt32();
					var fc1 = glyphs.h[key];
					if(fc1 != null) {
						fc1.addKerning(first,bytes1.readInt16());
					} else {
						var _g5 = bytes1;
						_g5.set_position(_g5.pos + 2);
					}
					--count1;
				}
				break;
			}
			bytes1.set_position(pos + length);
		}
		break;
	case 1414415938:
		return new hxd_fmt_bfnt_Reader(new haxe_io_BytesInput(bytes)).read(function(tp) {
			try {
				font.tilePath = tp;
				var tile3 = haxe_io_Path.join([haxe_io_Path.directory(path),tp]);
				tile = resolveTile(tile3);
			} catch( e2 ) {
				var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
				haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tp + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				font.tilePath = new haxe_io_Path(path).file + ".png";
				var tile4 = haxe_io_Path.withExtension(path,"png");
				tile = resolveTile(tile4);
			}
			return tile;
		});
	case 1836597052:case 1852794428:
		var xml = Xml.parse(bytes.toString());
		var x = xml.firstElement();
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Invalid nodeType " + _$Xml_XmlType_$Impl_$.toString(x.nodeType));
		}
		var this1 = x;
		var xml1 = this1;
		if(haxe_xml__$Access_HasNodeAccess_$Impl_$.resolve(xml1,"info")) {
			var tmp = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"info");
			font.name = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(tmp,"face");
			var tmp1 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"info"),"size");
			font.size = font.initSize = Std.parseInt(tmp1);
			var tmp2 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"common"),"lineHeight");
			font.lineHeight = Std.parseInt(tmp2);
			var tmp3 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"common"),"base");
			font.baseLine = Std.parseInt(tmp3);
			var p = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"pages").elements();
			while(p.hasNext()) {
				var p1 = p.next();
				if(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(p1,"id") == "0") {
					var tilePath = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(p1,"file");
					try {
						font.tilePath = tilePath;
						var tile5 = haxe_io_Path.join([haxe_io_Path.directory(path),tilePath]);
						tile = resolveTile(tile5);
					} catch( e4 ) {
						var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
						haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						font.tilePath = new haxe_io_Path(path).file + ".png";
						var tile6 = haxe_io_Path.withExtension(path,"png");
						tile = resolveTile(tile6);
					}
				} else {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 66, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
			}
			var chars = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"chars").elements();
			var c = chars;
			while(c.hasNext()) {
				var c1 = c.next();
				var t7 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"x"));
				var t8 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"y"));
				var t9 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"width"));
				var t10 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"height"));
				var t11 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"xoffset"));
				var t12 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"yoffset"));
				var t13 = tile.sub(t7,t8,t9,t10,t11,t12);
				var fc2 = new h2d_FontChar(t13,Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"xadvance")));
				var kerns = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"kernings").elements();
				var k = kerns;
				while(k.hasNext()) {
					var k1 = k.next();
					if(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k1,"second") == haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"id")) {
						fc2.addKerning(Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k1,"first")),Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k1,"amount")));
					}
				}
				var key1 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"id"));
				glyphs.h[key1] = fc2;
			}
		} else {
			font.tilePath = new haxe_io_Path(path).file + ".png";
			var tile7 = haxe_io_Path.withExtension(path,"png");
			tile = resolveTile(tile7);
			font.name = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(xml1,"family");
			var tmp4 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(xml1,"size");
			font.size = font.initSize = Std.parseInt(tmp4);
			var tmp5 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(xml1,"height");
			font.lineHeight = Std.parseInt(tmp5);
			var kernings = [];
			var c2 = xml1.elements();
			while(c2.hasNext()) {
				var c3 = c2.next();
				var r = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"rect").split(" ");
				var o = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"offset").split(" ");
				var t14 = tile.sub(Std.parseInt(r[0]),Std.parseInt(r[1]),Std.parseInt(r[2]),Std.parseInt(r[3]),Std.parseInt(o[0]),Std.parseInt(o[1]));
				var fc3 = new h2d_FontChar(t14,Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"width")) - 1);
				var code = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"code");
				var code1 = StringTools.startsWith(code,"&#") ? Std.parseInt(HxOverrides.substr(code,2,code.length - 3)) : HxOverrides.cca(code,0);
				var k2 = c3.elements();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var code2 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k3,"id");
					var next = StringTools.startsWith(code2,"&#") ? Std.parseInt(HxOverrides.substr(code2,2,code2.length - 3)) : HxOverrides.cca(code2,0);
					var adv = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k3,"advance"));
					if(glyphs.h.hasOwnProperty(next)) {
						glyphs.h[next].addKerning(code1,adv);
					} else {
						kernings.push({ prev : code1, next : next, adv : adv});
					}
				}
				glyphs.h[code1] = fc3;
			}
			var _g6 = 0;
			while(_g6 < kernings.length) {
				var k4 = kernings[_g6];
				++_g6;
				var g = glyphs.h[k4.next];
				if(g == null) {
					continue;
				}
				g.addKerning(k4.prev,k4.adv);
			}
		}
		break;
	case 1868983913:
		var lines = bytes.toString().split("\n");
		var reg = new EReg(" *?([0-9a-zA-Z]+)=(\"[^\"]+\"|.+?)(?:[ \r]|$)","");
		var idx;
		var pageCount1 = 0;
		var _g7 = 0;
		while(_g7 < lines.length) {
			var line = lines[_g7];
			++_g7;
			idx = line.indexOf(" ");
			switch(HxOverrides.substr(line,0,idx)) {
			case "char":
				var id1 = 0;
				var x1 = 0;
				var y = 0;
				var width = 0;
				var height = 0;
				var xoffset = 0;
				var yoffset = 0;
				var xadvance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "height":
						var v = reg.matched(2);
						height = Std.parseInt(HxOverrides.cca(v,0) == 34 ? v.substring(1,v.length - 1) : v);
						break;
					case "id":
						var v1 = reg.matched(2);
						id1 = Std.parseInt(HxOverrides.cca(v1,0) == 34 ? v1.substring(1,v1.length - 1) : v1);
						break;
					case "width":
						var v2 = reg.matched(2);
						width = Std.parseInt(HxOverrides.cca(v2,0) == 34 ? v2.substring(1,v2.length - 1) : v2);
						break;
					case "x":
						var v3 = reg.matched(2);
						x1 = Std.parseInt(HxOverrides.cca(v3,0) == 34 ? v3.substring(1,v3.length - 1) : v3);
						break;
					case "xadvance":
						var v4 = reg.matched(2);
						xadvance = Std.parseInt(HxOverrides.cca(v4,0) == 34 ? v4.substring(1,v4.length - 1) : v4);
						break;
					case "xoffset":
						var v5 = reg.matched(2);
						xoffset = Std.parseInt(HxOverrides.cca(v5,0) == 34 ? v5.substring(1,v5.length - 1) : v5);
						break;
					case "y":
						var v6 = reg.matched(2);
						y = Std.parseInt(HxOverrides.cca(v6,0) == 34 ? v6.substring(1,v6.length - 1) : v6);
						break;
					case "yoffset":
						var v7 = reg.matched(2);
						yoffset = Std.parseInt(HxOverrides.cca(v7,0) == 34 ? v7.substring(1,v7.length - 1) : v7);
						break;
					}
					var pos1 = reg.matchedPos();
					idx = pos1.pos + pos1.len;
				}
				var t15 = tile.sub(x1,y,width,height,xoffset,yoffset);
				var fc4 = new h2d_FontChar(t15,xadvance);
				glyphs.h[id1] = fc4;
				break;
			case "common":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "base":
						var v8 = reg.matched(2);
						font.baseLine = Std.parseInt(HxOverrides.cca(v8,0) == 34 ? v8.substring(1,v8.length - 1) : v8);
						break;
					case "lineHeight":
						var v9 = reg.matched(2);
						font.lineHeight = Std.parseInt(HxOverrides.cca(v9,0) == 34 ? v9.substring(1,v9.length - 1) : v9);
						break;
					case "pages":
						var v10 = reg.matched(2);
						pageCount1 = Std.parseInt(HxOverrides.cca(v10,0) == 34 ? v10.substring(1,v10.length - 1) : v10);
						if(pageCount1 != 1) {
							haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 157, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						}
						break;
					}
					var pos2 = reg.matchedPos();
					idx = pos2.pos + pos2.len;
				}
				break;
			case "info":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "face":
						var v11 = reg.matched(2);
						font.name = HxOverrides.cca(v11,0) == 34 ? v11.substring(1,v11.length - 1) : v11;
						break;
					case "size":
						var v12 = reg.matched(2);
						font.size = font.initSize = Std.parseInt(HxOverrides.cca(v12,0) == 34 ? v12.substring(1,v12.length - 1) : v12);
						break;
					}
					var pos3 = reg.matchedPos();
					idx = pos3.pos + pos3.len;
				}
				break;
			case "kerning":
				var first1 = 0;
				var second = 0;
				var advance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "amount":
						var v13 = reg.matched(2);
						advance = Std.parseInt(HxOverrides.cca(v13,0) == 34 ? v13.substring(1,v13.length - 1) : v13);
						break;
					case "first":
						var v14 = reg.matched(2);
						first1 = Std.parseInt(HxOverrides.cca(v14,0) == 34 ? v14.substring(1,v14.length - 1) : v14);
						break;
					case "second":
						var v15 = reg.matched(2);
						second = Std.parseInt(HxOverrides.cca(v15,0) == 34 ? v15.substring(1,v15.length - 1) : v15);
						break;
					}
					var pos4 = reg.matchedPos();
					idx = pos4.pos + pos4.len;
				}
				var fc5 = glyphs.h[second];
				if(fc5 != null) {
					fc5.addKerning(first1,advance);
				}
				break;
			case "page":
				while(idx < line.length && reg.matchSub(line,idx)) {
					if(reg.matched(1) == "file") {
						var v16 = reg.matched(2);
						var tilePath1 = HxOverrides.cca(v16,0) == 34 ? v16.substring(1,v16.length - 1) : v16;
						try {
							font.tilePath = tilePath1;
							var tile8 = haxe_io_Path.join([haxe_io_Path.directory(path),tilePath1]);
							tile = resolveTile(tile8);
						} catch( e6 ) {
							var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
							haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath1 + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
							font.tilePath = new haxe_io_Path(path).file + ".png";
							var tile9 = haxe_io_Path.withExtension(path,"png");
							tile = resolveTile(tile9);
						}
					}
					var pos5 = reg.matchedPos();
					idx = pos5.pos + pos5.len;
				}
				break;
			}
		}
		break;
	default:
		var sign = _g;
		throw new js__$Boot_HaxeError("Unknown font signature " + StringTools.hex(sign,8));
	}
	if(glyphs.h[32] == null) {
		var value = new h2d_FontChar(tile.sub(0,0,0,0),font.size >> 1);
		glyphs.h[32] = value;
	}
	font.tile = tile;
	if(font.baseLine == 0) {
		var padding = 0;
		var space = glyphs.h[32];
		if(space != null) {
			padding = space.t.height * .5;
		}
		var a = glyphs.h[65];
		if(a == null) {
			a = glyphs.h[97];
		}
		if(a == null) {
			a = glyphs.h[48];
		}
		if(a == null) {
			font.baseLine = font.lineHeight - 2 - padding;
		} else {
			font.baseLine = a.t.dy + a.t.height - padding;
		}
	}
	var fallback = glyphs.h[65533];
	if(fallback == null) {
		fallback = glyphs.h[9633];
	}
	if(fallback == null) {
		fallback = glyphs.h[63];
	}
	if(fallback != null) {
		font.defaultChar = fallback;
	}
	return font;
};
var hxd_fmt_bfnt_Reader = function(i) {
	this.i = i;
};
$hxClasses["hxd.fmt.bfnt.Reader"] = hxd_fmt_bfnt_Reader;
hxd_fmt_bfnt_Reader.__name__ = "hxd.fmt.bfnt.Reader";
hxd_fmt_bfnt_Reader.prototype = {
	read: function(resolveTile) {
		if(this.i.readString(4) != "BFNT" || this.i.readByte() != 0) {
			throw new js__$Boot_HaxeError("Not a BFNT file!");
		}
		var font = null;
		var _g = this.i.readByte();
		if(_g == 1) {
			font = new h2d_Font(this.i.readString(this.i.readUInt16()),this.i.readInt16());
			font.tilePath = this.i.readString(this.i.readUInt16());
			var tile = font.tile = resolveTile(font.tilePath);
			font.lineHeight = this.i.readInt16();
			font.baseLine = this.i.readInt16();
			var defaultChar = this.i.readInt32();
			var id;
			while(true) {
				id = this.i.readInt32();
				if(!(id != 0)) {
					break;
				}
				var t = tile.sub(this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readInt16(),this.i.readInt16());
				var glyph = new h2d_FontChar(t,this.i.readInt16());
				font.glyphs.h[id] = glyph;
				if(id == defaultChar) {
					font.defaultChar = glyph;
				}
				var prevChar;
				while(true) {
					prevChar = this.i.readInt32();
					if(!(prevChar != 0)) {
						break;
					}
					glyph.addKerning(prevChar,this.i.readInt16());
				}
			}
		} else {
			var ver = _g;
			throw new js__$Boot_HaxeError("Unknown BFNT version: " + ver);
		}
		return font;
	}
	,__class__: hxd_fmt_bfnt_Reader
};
var hxd_fs_FileEntry = function() { };
$hxClasses["hxd.fs.FileEntry"] = hxd_fs_FileEntry;
hxd_fs_FileEntry.__name__ = "hxd.fs.FileEntry";
hxd_fs_FileEntry.prototype = {
	getBytes: function() {
		return null;
	}
	,open: function() {
	}
	,skip: function(nbytes) {
	}
	,readByte: function() {
		return 0;
	}
	,read: function(out,pos,size) {
	}
	,close: function() {
	}
	,load: function(onReady) {
		if(!this.get_isAvailable()) {
			throw new js__$Boot_HaxeError("load() not implemented");
		} else if(onReady != null) {
			onReady();
		}
	}
	,loadBitmap: function(onLoaded) {
		throw new js__$Boot_HaxeError("loadBitmap() not implemented");
	}
	,watch: function(onChanged) {
	}
	,get_isAvailable: function() {
		return true;
	}
	,get_path: function() {
		throw new js__$Boot_HaxeError("path() not implemented");
	}
	,get_extension: function() {
		var np = this.name.split(".");
		if(np.length == 1) {
			return "";
		} else {
			return np.pop().toLowerCase();
		}
	}
	,__class__: hxd_fs_FileEntry
};
var hxd_fs_BytesFileEntry = function(path,bytes) {
	this.fullPath = path;
	this.name = path.split("/").pop();
	this.bytes = bytes;
};
$hxClasses["hxd.fs.BytesFileEntry"] = hxd_fs_BytesFileEntry;
hxd_fs_BytesFileEntry.__name__ = "hxd.fs.BytesFileEntry";
hxd_fs_BytesFileEntry.__super__ = hxd_fs_FileEntry;
hxd_fs_BytesFileEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	get_path: function() {
		return this.fullPath;
	}
	,getBytes: function() {
		return this.bytes;
	}
	,open: function() {
		this.pos = 0;
	}
	,skip: function(nbytes) {
		this.pos += nbytes;
	}
	,readByte: function() {
		return this.bytes.b[this.pos++];
	}
	,read: function(out,pos,size) {
		out.blit(pos,this.bytes,this.pos,size);
		this.pos += size;
	}
	,close: function() {
	}
	,load: function(onReady) {
		haxe_Timer.delay(onReady,1);
	}
	,loadBitmap: function(onLoaded) {
		var mime;
		switch(haxe_io_Path.extension(this.fullPath).toLowerCase()) {
		case "gif":
			mime = "image/gif";
			break;
		case "jpeg":case "jpg":
			mime = "image/jpeg";
			break;
		case "png":
			mime = "image/png";
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot determine image encoding, try adding an extension to the resource path");
		}
		var img = new Image();
		img.onload = function() {
			var this1 = img;
			onLoaded(this1);
		};
		var tmp = haxe_crypto_Base64.encode(this.bytes);
		img.src = "data:" + mime + ";base64," + tmp;
	}
	,__class__: hxd_fs_BytesFileEntry
});
var hxd_fs_FileSystem = function() { };
$hxClasses["hxd.fs.FileSystem"] = hxd_fs_FileSystem;
hxd_fs_FileSystem.__name__ = "hxd.fs.FileSystem";
hxd_fs_FileSystem.__isInterface__ = true;
hxd_fs_FileSystem.prototype = {
	__class__: hxd_fs_FileSystem
};
var hxd_fs_BytesFileSystem = function() {
};
$hxClasses["hxd.fs.BytesFileSystem"] = hxd_fs_BytesFileSystem;
hxd_fs_BytesFileSystem.__name__ = "hxd.fs.BytesFileSystem";
hxd_fs_BytesFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_BytesFileSystem.prototype = {
	getBytes: function(path) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,get: function(path) {
		var bytes = this.getBytes(path);
		if(bytes == null) {
			throw new js__$Boot_HaxeError("Resource not found '" + path + "'");
		}
		return new hxd_fs_BytesFileEntry(path,bytes);
	}
	,__class__: hxd_fs_BytesFileSystem
};
var hxd_fs__$EmbedFileSystem_EmbedEntry = function(fs,name,relPath,data) {
	this.fs = fs;
	this.name = name;
	this.relPath = relPath;
	this.data = data;
};
$hxClasses["hxd.fs._EmbedFileSystem.EmbedEntry"] = hxd_fs__$EmbedFileSystem_EmbedEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.__name__ = "hxd.fs._EmbedFileSystem.EmbedEntry";
hxd_fs__$EmbedFileSystem_EmbedEntry.__super__ = hxd_fs_FileEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	getBytes: function() {
		if(this.bytes == null) {
			this.open();
		}
		return this.bytes;
	}
	,open: function() {
		if(this.bytes == null) {
			this.bytes = haxe_Resource.getBytes(this.data);
			if(this.bytes == null) {
				throw new js__$Boot_HaxeError("Missing resource " + this.data);
			}
		}
		this.readPos = 0;
	}
	,skip: function(nbytes) {
		this.readPos += nbytes;
	}
	,readByte: function() {
		return this.bytes.b[this.readPos++];
	}
	,read: function(out,pos,size) {
		out.blit(pos,this.bytes,this.readPos,size);
		this.readPos += size;
	}
	,close: function() {
		this.bytes = null;
		this.readPos = 0;
	}
	,load: function(onReady) {
		if(onReady != null) {
			haxe_Timer.delay(onReady,1);
		}
	}
	,loadBitmap: function(onLoaded) {
		var rawData = null;
		var _g = 0;
		var _g1 = haxe_Resource.content;
		while(_g < _g1.length) {
			var res = _g1[_g];
			++_g;
			if(res.name == this.data) {
				rawData = res.data;
				break;
			}
		}
		if(rawData == null) {
			throw new js__$Boot_HaxeError("Missing resource " + this.data);
		}
		var image = new Image();
		image.onload = function(_) {
			var this1 = image;
			onLoaded(this1);
		};
		var extra = "";
		var bytes = rawData.length * 6 >> 3;
		var _g2 = 0;
		var _g3 = (3 - bytes * 4 % 3) % 3;
		while(_g2 < _g3) {
			var i = _g2++;
			extra += "=";
		}
		var tmp = "data:image/" + this.get_extension() + ";base64," + rawData;
		image.src = tmp + extra;
	}
	,get_path: function() {
		if(this.relPath == ".") {
			return "<root>";
		} else {
			return this.relPath;
		}
	}
	,__class__: hxd_fs__$EmbedFileSystem_EmbedEntry
});
var hxd_fs_EmbedFileSystem = function(root) {
	this.root = root;
};
$hxClasses["hxd.fs.EmbedFileSystem"] = hxd_fs_EmbedFileSystem;
hxd_fs_EmbedFileSystem.__name__ = "hxd.fs.EmbedFileSystem";
hxd_fs_EmbedFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_EmbedFileSystem.resolve = function(path) {
	return "R_" + path.replace(hxd_fs_EmbedFileSystem.invalidChars.r,"_");
};
hxd_fs_EmbedFileSystem.prototype = {
	splitPath: function(path) {
		if(path == ".") {
			return [];
		} else {
			return path.split("/");
		}
	}
	,exists: function(path) {
		var r = this.root;
		var _g = 0;
		var _g1 = this.splitPath(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			r = Reflect.field(r,p);
			if(r == null) {
				return false;
			}
		}
		return true;
	}
	,get: function(path) {
		if(!this.exists(path)) {
			throw new js__$Boot_HaxeError(new hxd_fs_NotFound(path));
		}
		var id = hxd_fs_EmbedFileSystem.resolve(path);
		return new hxd_fs__$EmbedFileSystem_EmbedEntry(this,path.split("/").pop(),path,id);
	}
	,__class__: hxd_fs_EmbedFileSystem
};
var hxd_fs_FileInput = function(f) {
	this.f = f;
	f.open();
};
$hxClasses["hxd.fs.FileInput"] = hxd_fs_FileInput;
hxd_fs_FileInput.__name__ = "hxd.fs.FileInput";
hxd_fs_FileInput.__super__ = haxe_io_Input;
hxd_fs_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	skip: function(nbytes) {
		this.f.skip(nbytes);
	}
	,readByte: function() {
		return this.f.readByte();
	}
	,readBytes: function(b,pos,len) {
		this.f.read(b,pos,len);
		return len;
	}
	,close: function() {
		this.f.close();
	}
	,__class__: hxd_fs_FileInput
});
var hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$ = {};
$hxClasses["hxd.fs._LoadedBitmap.LoadedBitmap_Impl_"] = hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$;
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.__name__ = "hxd.fs._LoadedBitmap.LoadedBitmap_Impl_";
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.toBitmap = function(this1) {
	var bmp = new hxd_BitmapData(this1.width,this1.height);
	bmp.ctx.drawImage(this1,0,0);
	return bmp;
};
var hxd_fs_NotFound = function(path) {
	this.path = path;
};
$hxClasses["hxd.fs.NotFound"] = hxd_fs_NotFound;
hxd_fs_NotFound.__name__ = "hxd.fs.NotFound";
hxd_fs_NotFound.prototype = {
	toString: function() {
		return "Resource file not found '" + this.path + "'";
	}
	,__class__: hxd_fs_NotFound
};
var hxd_impl_Allocator = function() {
};
$hxClasses["hxd.impl.Allocator"] = hxd_impl_Allocator;
hxd_impl_Allocator.__name__ = "hxd.impl.Allocator";
hxd_impl_Allocator.get = function() {
	if(hxd_impl_Allocator.inst == null) {
		hxd_impl_Allocator.inst = new hxd_impl_Allocator();
	}
	return hxd_impl_Allocator.inst;
};
hxd_impl_Allocator.prototype = {
	onContextLost: function() {
	}
	,__class__: hxd_impl_Allocator
};
var hxd_impl_ArrayIterator_$hxd_$snd_$Channel = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_hxd_snd_Channel"] = hxd_impl_ArrayIterator_$hxd_$snd_$Channel;
hxd_impl_ArrayIterator_$hxd_$snd_$Channel.__name__ = "hxd.impl.ArrayIterator_hxd_snd_Channel";
hxd_impl_ArrayIterator_$hxd_$snd_$Channel.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$snd_$Channel
};
var hxd_res__$Any_SingleFileSystem = function(path,bytes) {
	hxd_fs_BytesFileSystem.call(this);
	this.path = path;
	this.bytes = bytes;
};
$hxClasses["hxd.res._Any.SingleFileSystem"] = hxd_res__$Any_SingleFileSystem;
hxd_res__$Any_SingleFileSystem.__name__ = "hxd.res._Any.SingleFileSystem";
hxd_res__$Any_SingleFileSystem.__super__ = hxd_fs_BytesFileSystem;
hxd_res__$Any_SingleFileSystem.prototype = $extend(hxd_fs_BytesFileSystem.prototype,{
	getBytes: function(p) {
		if(p == this.path) {
			return this.bytes;
		} else {
			return null;
		}
	}
	,__class__: hxd_res__$Any_SingleFileSystem
});
var hxd_res_Resource = function(entry) {
	this.entry = entry;
};
$hxClasses["hxd.res.Resource"] = hxd_res_Resource;
hxd_res_Resource.__name__ = "hxd.res.Resource";
hxd_res_Resource.prototype = {
	toString: function() {
		return this.entry.get_path();
	}
	,watch: function(onChanged) {
		if(hxd_res_Resource.LIVE_UPDATE) {
			this.entry.watch(onChanged);
		}
	}
	,__class__: hxd_res_Resource
};
var hxd_res_Any = function(loader,entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = loader;
};
$hxClasses["hxd.res.Any"] = hxd_res_Any;
hxd_res_Any.__name__ = "hxd.res.Any";
hxd_res_Any.fromBytes = function(path,bytes) {
	var fs = new hxd_res__$Any_SingleFileSystem(path,bytes);
	return new hxd_res_Loader(fs).load(path);
};
hxd_res_Any.__super__ = hxd_res_Resource;
hxd_res_Any.prototype = $extend(hxd_res_Resource.prototype,{
	toTile: function() {
		return this.toImage().toTile();
	}
	,toImage: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Image);
	}
	,toSound: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Sound);
	}
	,__class__: hxd_res_Any
});
var hxd_res_BitmapFont = function(entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = hxd_res_Loader.currentInstance;
};
$hxClasses["hxd.res.BitmapFont"] = hxd_res_BitmapFont;
hxd_res_BitmapFont.__name__ = "hxd.res.BitmapFont";
hxd_res_BitmapFont.__super__ = hxd_res_Resource;
hxd_res_BitmapFont.prototype = $extend(hxd_res_Resource.prototype,{
	toFont: function() {
		if(this.font == null) {
			this.font = hxd_fmt_bfnt_FontParser.parse(this.entry.getBytes(),this.entry.get_path(),$bind(this,this.resolveTile));
		}
		return this.font;
	}
	,resolveTile: function(path) {
		return this.loader.load(path).toTile();
	}
	,__class__: hxd_res_BitmapFont
});
var hxd_res_DefaultFont = function() { };
$hxClasses["hxd.res.DefaultFont"] = hxd_res_DefaultFont;
hxd_res_DefaultFont.__name__ = "hxd.res.DefaultFont";
hxd_res_DefaultFont.get = function() {
	var engine = h3d_Engine.CURRENT;
	var fnt = engine.resCache.h[hxd_res_DefaultFont.__id__];
	if(fnt == null) {
		var BYTES = hxd_res_Any.fromBytes("hxd/res/defaultFont.png",haxe_Unserializer.run("s3176:iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAACPBJREFUeJztnelypDoMRp2p%:6v3PNjhrlCLX1aLIPBPlWppI03bCG0QOfn8:m0zbr8KupnS9FDqRKAzUOhAvBRfqO:tfrSZ86H:ET79o6Rhc%JzzNSD7Xn:XyEH9RPtP4X:6GDDj6ttR:Hb62d9pmX8b487StA4:DFlup5z5MSWS%tL:f6eG4BXDppGQdtApJEtPm0zkf427Oo1fAxtfO2hDIruGXCLgnAD:jNyzSsKxa18yBphyqQ1jqwBN1zHmgcU3V3jHui9xaArkS0%XzTohOX%jvGauzvjMrlUJXuqSeV07G0ekgTovWS1t61vr0CQAez7nkj7uFIELJqmdN7RWvzil7hnnXV5qLOzSMAmlcQub9ZRuEsaNoq0w5RZbN0rye1ASzplWyAiGEXQVK3kZOdRcgy9:FLoRogI02WNc7rRQw3jzsZAfWB7skR44%3jdo6Wv2qfr4rFuUCZlftrT1jjpezSih4b75ClQDMvrizz%82uA1wMCqsKvUv3YO045rxma2vjY3mpPUvuV1WKDzbLtqfNu9:AjA6tl69QM3Zn1Wfl1M8G:CUW4s6b%sWIEXWtM:omNeXrnaDRm:OyIsE1UOfQ1gCwMOLdFCqWnj8Grl5nsjVakRjHMj1DgnEcQvw%OV0AE0wGisfqTKrbBYrZ4BiB:T4ldE8dPsMxU2oEWgZZtoAyMCq2GxtLlWCFbEB%PGIYWv1kxECq0%TbDKITjpirVr9SW2zC:skqqKdUp%QwwbILKwlgZk2mkBlmUVgPPOI3IbL0GwASY2PiMdbPrfVF6:vVctIq5SoVqNdxtrvWXt1:EguYHVL:ZV4Q8F781%KVwD25r8UagTyYE4TjkllmfrU4udtI%XZdrRcm5c1T%3cPXjq9RqEYTewIrau1a%ODVSBomgeL4cLudedG%H2pah4KBQx8gSnWMC:8AvDKwS0fXU5n59Uf7gAXA1dfG1TtM1Bm2ZtKi%PCGaVlpXKrf67ngeI%uFXoW1WdvNH0ztuV3vNBvAOrC30wR0LG7kX0:p3MjoCqPYfiQNI3BK%BEhq31vfYtS5UkN5lCD%NGWMSBxAWyyeyKkAJYc2Z6JrfqpvGYF0IzxqNWoDoPrSeNJ8POMgtJg76rtSEyDNErGzUF5F3ZOq9wI2D%VtbuBsaFfkNGwBGMtUmy3BjUAtxs3x3LOk8mi7zWB6Xw7leCNlb%LRXkrk%wEOpESIlezxlvM%uSWuzQXNx1Ofjqd5Aah:qW5PGDfbjpZzRCGlbwZ5T0TqMHMVoLgCP56Nj0fqo7mhLOeMGoDPx4wE0sW64mRmXLSDaCZvxPjSeNnAGKx:hxcw8%a3Zkc7tTqjyWgbs:4d3w8wW:7AC42l3zF:dH9H9SGedwO9rmEEz4nMpCXuznFoSS5tf9x9e24ByFjqodKAQio6EjfP9C8duzLHoZ0r8oD%LzRyAZY1XN2umux8n0L3OkeygcdnDzMYTSvQvc47G7g4q3xL2EqE8jhbAN6H9YDJ6TaxBeCduJNy3AjkrghySay8QXOU84lZSQ8plj:ioYuIG%axvLUrcoRxHHGHXelgKzkTWSxtLK:7whM8UaGLzs3qJ7P5IxNI0axh%hbAgxhWMGJ01M%KVKIASXQcipVR7MEz524XboQNoKVwPZPNhkpRjD5yRdM53B0c0qKDvE4X9PVw78JYWPc7usEo9cm1TAa0%R:hh44n1UXz1sjaB0dbJATdGoB:R1Dv:c4DGktSez33TNqW96MZtVo:R53sPLQxvGseCWu7y2d7Kji70MgQRUIwM5nNb%1bc8HyK%MAHiMtq2q5ypaOS39rdTz9jMaac4kg87eDpSsp4%bx:iS3UZLOqMQPM44Y3jGuSoCVabERyaCsj:90qs7TG1soWePZbICViWharvnSgrfTwYsz0gjckvUApHcDOdwa9waDvIGjCFZ:2vwzfVeGj7W%qs4ns0ettbMASJvG:WfJ%JAGHOVvI6GSxtMEUfNENK%FH%NtNaz1qzif7B79mcC2AdbG8zVxyNqMtrGkTQqZWmHUqvJjDJg%BZ9Rf552I8qtY%a:jUMnEG3j9V1RvWgUryfqFyXql1etX2aP:vGER8JWCCLdxhME4OlMbWTdLQCRhA%qX1WegVrZEbtjCjQjsDnKM200Y8nLjDaAx%WdVgg8:zfQY%1620Q8grcxpRDcfQvwMN2ivYm7s4GSRkGZLuRvV5T3AP1tAe08q8qtY38KJo4Ejgglbxh3awCJQyL35l:AjAKwN:5CKozAqpRm7zibBBUCMDJFi:p5GlMKcJUbGAm4aIkdlPCpttK9xz1RxMhzAdVCkDmnE5H:GURPXLta7ypHcz248%GLWR6Q%cL7ZdHRVOddWHPt1VRWX6O1mERXuNt6HmBmooGXnlB178MX3vIr5nhCejkUbf7VhgyalyWwngcjqsorxxg5xy%oDeDZ:Du0Qub%2aP6M%XVfSFK90D6ihjranoC2pUgUVVe0VdUw2bmeEKyASx1OwvWfQ7dPqi1XlFe1Vd0nbu1C:%HEeEObuSH:LyRKzSW6QZKvjDXDNKxqvIsR19a:624vKKvW9Zy5nTw5swQO2zGbODmDNdmpWwBmJ%hNo7n7WAJ5L703FN4DD:Sr3RcK6uar0XVnHvHUbHeDqadawaLFA3jbTwW6tH2aC%5oqgfLXYRGcOab5SKOVvz8sY75AneZATyQd:qyt1ByFjkGoCrR6u8gXLtc2tn:51qD22s7Pwi5Z5jEryNtS6jy6U5qfS8HZwFTWp0ogWdj3Wu0nmPWJ8K3HO62gvoul:dhKbBPPWmp:fdwBXwXNGa8TY92ruBzVG%GpoqnUXtp9CeCdza4JvZLhDqyqb3hT8RRDtH5VmyavKKREn0XCW1f3WiDKWmpTpf7GTQc:F6OpCdC3guJdp5C8CzkTY9JAg8Ekh:bxaAPxVMf28WgP7XMMrWAovwhO8I2gxkC8DibAFYnC0Ai6OFgjeL4Pmm0M2L0dzAzSJY2cDNy:E8ELJ5MdsLWJwtAIuzBWBxtgAszhaAxdkCsDi:AYnqZwd25SoPAAAAAElFTkSuQmCC"));
		var DESC = hxd_res_Any.fromBytes("hxd/res/defaultFont.fnt",haxe_Unserializer.run("s14270:PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxGb250IHNpemU9IjEyIiBmYW1pbHk9IlBpeGVsIE9wZXJhdG9yIiBoZWlnaHQ9IjE2IiBzdHlsZT0iUmVndWxhciI%DQogPENoYXIgd2lkdGg9IjQiIG9mZnNldD0iMCAxMyIgcmVjdD0iMSAxMiAwIDAiIGNvZGU9IiAiLz4NCiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjIgMyAxIDkiIGNvZGU9IiEiLz4NCiA8Q2hhciB3aWR0aD0iNSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjQgMyAzIDMiIGNvZGU9IiZxdW90OyIvPg0KIDxDaGFyIHdpZHRoPSI4IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOCAzIDYgOSIgY29kZT0iIyIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMiIgcmVjdD0iMTUgMSA1IDEzIiBjb2RlPSIkIi8%DQogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA0IiByZWN0PSIyMSAzIDcgOSIgY29kZT0iJSIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjkgMyA1IDkiIGNvZGU9IiZhbXA7Ii8%DQogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSA0IiByZWN0PSIzNSAzIDEgMyIgY29kZT0iJyIvPg0KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMzcgMyAzIDkiIGNvZGU9IigiLz4NCiA8Q2hhciB3aWR0aD0iNSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjQxIDMgMyA5IiBjb2RlPSIpIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI0NSAzIDUgNSIgY29kZT0iKiIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNTEgNSA1IDUiIGNvZGU9IisiLz4NCiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIwIDEyIiByZWN0PSI1NyAxMSAyIDMiIGNvZGU9IiwiLz4NCiA8Q2hhciB3aWR0aD0iNiIgb2Zmc2V0PSIxIDgiIHJlY3Q9IjYwIDcgNCAxIiBjb2RlPSItIi8%DQogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSAxMiIgcmVjdD0iNjUgMTEgMSAxIiBjb2RlPSIuIi8%DQogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA0IiByZWN0PSI2NyAzIDMgOSIgY29kZT0iLyIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNzEgMyA1IDkiIGNvZGU9IjAiLz4NCiA8Q2hhciB3aWR0aD0iNSIgb2Zmc2V0PSIxIDQiIHJlY3Q9Ijc3IDMgMyA5IiBjb2RlPSIxIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI4MSAzIDUgOSIgY29kZT0iMiIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODcgMyA1IDkiIGNvZGU9IjMiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjkzIDMgNSA5IiBjb2RlPSI0Ii8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI5OSAzIDUgOSIgY29kZT0iNSIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTA1IDMgNSA5IiBjb2RlPSI2Ii8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMTEgMyA1IDkiIGNvZGU9IjciLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjExNyAzIDUgOSIgY29kZT0iOCIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMSAxNSA1IDkiIGNvZGU9IjkiLz4NCiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjcgMTcgMSA3IiBjb2RlPSI6Ii8%DQogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCA2IiByZWN0PSI5IDE3IDIgOSIgY29kZT0iOyIvPg0KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNiIgcmVjdD0iMTIgMTcgMyA1IiBjb2RlPSImbHQ7Ii8%DQogPENoYXIgd2lkdGg9IjYiIG9mZnNldD0iMSA3IiByZWN0PSIxNiAxOCA0IDMiIGNvZGU9Ij0iLz4NCiA8Q2hhciB3aWR0aD0iNSIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjIxIDE3IDMgNSIgY29kZT0iPiIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjUgMTUgNSA5IiBjb2RlPSI:Ii8%DQogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA0IiByZWN0PSIzMSAxNSA3IDkiIGNvZGU9IkAiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjM5IDE1IDUgOSIgY29kZT0iQSIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNDUgMTUgNSA5IiBjb2RlPSJCIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI1MSAxNSA1IDkiIGNvZGU9IkMiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjU3IDE1IDUgOSIgY29kZT0iRCIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNjMgMTUgNSA5IiBjb2RlPSJFIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI2OSAxNSA1IDkiIGNvZGU9IkYiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9Ijc1IDE1IDUgOSIgY29kZT0iRyIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODEgMTUgNSA5IiBjb2RlPSJIIi8%DQogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSA0IiByZWN0PSI4NyAxNSAxIDkiIGNvZGU9IkkiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9Ijg5IDE1IDUgOSIgY29kZT0iSiIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOTUgMTUgNSA5IiBjb2RlPSJLIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMDEgMTUgNSA5IiBjb2RlPSJMIi8%DQogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA0IiByZWN0PSIxMDcgMTUgNyA5IiBjb2RlPSJNIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMTUgMTUgNSA5IiBjb2RlPSJOIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMjEgMTUgNSA5IiBjb2RlPSJPIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxIDI3IDUgOSIgY29kZT0iUCIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNyAyNyA1IDkiIGNvZGU9IlEiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEzIDI3IDUgOSIgY29kZT0iUiIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTkgMjcgNSA5IiBjb2RlPSJTIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIyNSAyNyA1IDkiIGNvZGU9IlQiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjMxIDI3IDUgOSIgY29kZT0iVSIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMzcgMjcgNSA5IiBjb2RlPSJWIi8%DQogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA0IiByZWN0PSI0MyAyNyA3IDkiIGNvZGU9IlciLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjUxIDI3IDUgOSIgY29kZT0iWCIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNTcgMjcgNSA5IiBjb2RlPSJZIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI2MyAyNyA1IDkiIGNvZGU9IloiLz4NCiA8Q2hhciB3aWR0aD0iNSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjY5IDI3IDMgOSIgY29kZT0iWyIvPg0KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNzMgMjcgMyA5IiBjb2RlPSJcIi8%DQogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA0IiByZWN0PSI3NyAyNyAzIDkiIGNvZGU9Il0iLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjgxIDI3IDUgMyIgY29kZT0iXiIvPg0KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjAgMTQiIHJlY3Q9Ijg3IDM3IDUgMSIgY29kZT0iXyIvPg0KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgNCIgcmVjdD0iOTMgMjcgMiAyIiBjb2RlPSJgIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI5NiAyOSA1IDciIGNvZGU9ImEiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEwMiAyNyA1IDkiIGNvZGU9ImIiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjEwOCAyOSA1IDciIGNvZGU9ImMiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjExNCAyNyA1IDkiIGNvZGU9ImQiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjEyMCAyOSA1IDciIGNvZGU9ImUiLz4NCiA8Q2hhciB3aWR0aD0iNiIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEgMzkgNSA5IiBjb2RlPSJmIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI3IDQxIDUgOSIgY29kZT0iZyIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTMgMzkgNSA5IiBjb2RlPSJoIi8%DQogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSA0IiByZWN0PSIxOSAzOSAxIDkiIGNvZGU9ImkiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjIxIDM5IDUgMTEiIGNvZGU9ImoiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjI3IDM5IDUgOSIgY29kZT0iayIvPg0KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNCIgcmVjdD0iMzMgMzkgMSA5IiBjb2RlPSJsIi8%DQogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA2IiByZWN0PSIzNSA0MSA3IDciIGNvZGU9Im0iLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjQzIDQxIDUgNyIgY29kZT0ibiIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNDkgNDEgNSA3IiBjb2RlPSJvIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI1NSA0MSA1IDkiIGNvZGU9InAiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjYxIDQxIDUgOSIgY29kZT0icSIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNjcgNDEgNSA3IiBjb2RlPSJyIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI3MyA0MSA1IDciIGNvZGU9InMiLz4NCiA8Q2hhciB3aWR0aD0iNiIgb2Zmc2V0PSIxIDUiIHJlY3Q9Ijc5IDQwIDUgOCIgY29kZT0idCIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iODUgNDEgNSA3IiBjb2RlPSJ1Ii8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI5MSA0MSA1IDciIGNvZGU9InYiLz4NCiA8Q2hhciB3aWR0aD0iOSIgb2Zmc2V0PSIxIDYiIHJlY3Q9Ijk3IDQxIDcgNyIgY29kZT0idyIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iMTA1IDQxIDUgNyIgY29kZT0ieCIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iMTExIDQxIDUgOSIgY29kZT0ieSIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iMTE3IDQxIDUgNyIgY29kZT0ieiIvPg0KIDxDaGFyIHdpZHRoPSI2IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMSA1NCA0IDkiIGNvZGU9InsiLz4NCiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjYgNTQgMSA5IiBjb2RlPSJ8Ii8%DQogPENoYXIgd2lkdGg9IjYiIG9mZnNldD0iMSA0IiByZWN0PSI4IDU0IDQgOSIgY29kZT0ifSIvPg0KIDxDaGFyIHdpZHRoPSI4IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTMgNTQgNiAyIiBjb2RlPSJ%Ii8%DQogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSA2IiByZWN0PSIyMCA1NiAxIDkiIGNvZGU9IsKhIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIyMiA1NCA1IDExIiBjb2RlPSLCoiIvPg0KIDxDaGFyIHdpZHRoPSI4IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjggNTQgNiA5IiBjb2RlPSLCoyIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMzUgNTQgNSA5IiBjb2RlPSLCpSIvPg0KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNCIgcmVjdD0iNDEgNTQgMSA5IiBjb2RlPSLCpiIvPg0KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNDMgNTQgMyAxIiBjb2RlPSLCqCIvPg0KIDxDaGFyIHdpZHRoPSI5IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNDcgNTQgNyA5IiBjb2RlPSLCqSIvPg0KIDxDaGFyIHdpZHRoPSI4IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNTUgNTYgNiA1IiBjb2RlPSLCqyIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgOCIgcmVjdD0iNjIgNTggNSAzIiBjb2RlPSLCrCIvPg0KIDxDaGFyIHdpZHRoPSI2IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNjggNTQgNCA0IiBjb2RlPSLCsCIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNzMgNTYgNSA3IiBjb2RlPSLCsSIvPg0KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNCIgcmVjdD0iNzkgNTQgMiAyIiBjb2RlPSLCtCIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iODIgNTYgNSA5IiBjb2RlPSLCtSIvPg0KIDxDaGFyIHdpZHRoPSI4IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODggNTQgNyA5IiBjb2RlPSLCtiIvPg0KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgOCIgcmVjdD0iOTYgNTggMSAxIiBjb2RlPSLCtyIvPg0KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjAgMTMiIHJlY3Q9Ijk4IDYzIDMgMiIgY29kZT0iwrgiLz4NCiA8Q2hhciB3aWR0aD0iOCIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjEwMiA1NiA2IDUiIGNvZGU9IsK7Ii8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxMDkgNTYgNSA5IiBjb2RlPSLCvyIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iMTE1IDUxIDUgMTIiIGNvZGU9IsOAIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSIxMjEgNTEgNSAxMiIgY29kZT0iw4EiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjEgNjcgNSAxMiIgY29kZT0iw4IiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjcgNjcgNiAxMiIgY29kZT0iw4MiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDIiIHJlY3Q9IjE0IDY4IDUgMTEiIGNvZGU9IsOEIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAwIiByZWN0PSIyMCA2NiA1IDEzIiBjb2RlPSLDhSIvPg0KIDxDaGFyIHdpZHRoPSIxMSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjI2IDcwIDkgOSIgY29kZT0iw4YiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjM2IDcwIDUgMTEiIGNvZGU9IsOHIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSI0MiA2NyA1IDEyIiBjb2RlPSLDiCIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iNDggNjcgNSAxMiIgY29kZT0iw4kiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjU0IDY3IDUgMTIiIGNvZGU9IsOKIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAyIiByZWN0PSI2MCA2OCA1IDExIiBjb2RlPSLDiyIvPg0KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgMSIgcmVjdD0iNjYgNjcgMiAxMiIgY29kZT0iw4wiLz4NCiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjY5IDY3IDIgMTIiIGNvZGU9IsONIi8%DQogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAxIiByZWN0PSI3MiA2NyAzIDEyIiBjb2RlPSLDjiIvPg0KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgMiIgcmVjdD0iNzYgNjggMyAxMSIgY29kZT0iw48iLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIwIDQiIHJlY3Q9IjgwIDcwIDYgOSIgY29kZT0iw5AiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9Ijg3IDY3IDYgMTIiIGNvZGU9IsORIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSI5NCA2NyA1IDEyIiBjb2RlPSLDkiIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iMTAwIDY3IDUgMTIiIGNvZGU9IsOTIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSIxMDYgNjcgNSAxMiIgY29kZT0iw5QiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjExMiA2NyA2IDEyIiBjb2RlPSLDlSIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMiIgcmVjdD0iMTE5IDY4IDUgMTEiIGNvZGU9IsOWIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxIDg3IDUgNSIgY29kZT0iw5ciLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIwIDQiIHJlY3Q9IjcgODUgNyA5IiBjb2RlPSLDmCIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iMTUgODIgNSAxMiIgY29kZT0iw5kiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjIxIDgyIDUgMTIiIGNvZGU9IsOaIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSIyNyA4MiA1IDEyIiBjb2RlPSLDmyIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMiIgcmVjdD0iMzMgODMgNSAxMSIgY29kZT0iw5wiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjM5IDgyIDUgMTIiIGNvZGU9IsOdIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI0NSA4NSA1IDkiIGNvZGU9IsOeIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI1MSA4NSA1IDkiIGNvZGU9IsOfIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI1NyA4NCA1IDEwIiBjb2RlPSLDoCIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iNjMgODQgNSAxMCIgY29kZT0iw6EiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjY5IDg0IDUgMTAiIGNvZGU9IsOiIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI3NSA4NCA2IDEwIiBjb2RlPSLDoyIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODIgODUgNSA5IiBjb2RlPSLDpCIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMiIgcmVjdD0iODggODMgNSAxMSIgY29kZT0iw6UiLz4NCiA8Q2hhciB3aWR0aD0iMTEiIG9mZnNldD0iMSA2IiByZWN0PSI5NCA4NyA5IDciIGNvZGU9IsOmIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxMDQgODcgNSA5IiBjb2RlPSLDpyIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iMTEwIDg0IDUgMTAiIGNvZGU9IsOoIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSIxMTYgODQgNSAxMCIgY29kZT0iw6kiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjEgOTcgNSAxMCIgY29kZT0iw6oiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjcgOTggNSA5IiBjb2RlPSLDqyIvPg0KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgMyIgcmVjdD0iMTMgOTcgMiAxMCIgY29kZT0iw6wiLz4NCiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjE2IDk3IDIgMTAiIGNvZGU9IsOtIi8%DQogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAzIiByZWN0PSIxOSA5NyAzIDEwIiBjb2RlPSLDriIvPg0KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgNCIgcmVjdD0iMjMgOTggMyA5IiBjb2RlPSLDryIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjcgOTggNiA5IiBjb2RlPSLDsCIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iMzQgOTcgNiAxMCIgY29kZT0iw7EiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjQxIDk3IDUgMTAiIGNvZGU9IsOyIi8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI0NyA5NyA1IDEwIiBjb2RlPSLDsyIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iNTMgOTcgNSAxMCIgY29kZT0iw7QiLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjU5IDk3IDYgMTAiIGNvZGU9IsO1Ii8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI2NiA5OCA1IDkiIGNvZGU9IsO2Ii8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI3MiAxMDAgNSA1IiBjb2RlPSLDtyIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjAgNiIgcmVjdD0iNzggMTAwIDcgNyIgY29kZT0iw7giLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9Ijg2IDk3IDUgMTAiIGNvZGU9IsO5Ii8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI5MiA5NyA1IDEwIiBjb2RlPSLDuiIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iOTggOTcgNSAxMCIgY29kZT0iw7siLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEwNCA5OCA1IDkiIGNvZGU9IsO8Ii8%DQogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSIxMTAgOTcgNSAxMiIgY29kZT0iw70iLz4NCiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjExNiA5OCA1IDExIiBjb2RlPSLDviIvPg0KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMSAxMTAgNSAxMSIgY29kZT0iw78iLz4NCjwvRm9udD4NCg"));
		var bmp = new hxd_res_BitmapFont(DESC.entry);
		bmp.loader = BYTES.loader;
		fnt = bmp.toFont();
		engine.resCache.set(hxd_res_DefaultFont,fnt);
	}
	return fnt;
};
var hxd_res_Embed = function() { };
$hxClasses["hxd.res.Embed"] = hxd_res_Embed;
hxd_res_Embed.__name__ = "hxd.res.Embed";
var hxd_res_Image = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Image"] = hxd_res_Image;
hxd_res_Image.__name__ = "hxd.res.Image";
hxd_res_Image.__super__ = hxd_res_Resource;
hxd_res_Image.prototype = $extend(hxd_res_Resource.prototype,{
	getFormat: function() {
		this.getSize();
		return this.inf.format;
	}
	,getSize: function() {
		if(this.inf != null) {
			return this.inf;
		}
		var f = new hxd_fs_FileInput(this.entry);
		var width = 0;
		var height = 0;
		var format;
		var bc = 0;
		var head;
		try {
			head = f.readUInt16();
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof haxe_io_Eof)) {
				var e2 = e1;
				head = 0;
			} else {
				throw e;
			}
		}
		switch(head) {
		case 17476:
			format = 4;
			f.skip(10);
			height = f.readInt32();
			width = f.readInt32();
			f.skip(64);
			var fourCC = f.readInt32();
			switch(fourCC & 16777215) {
			case 4805697:
				var v = (fourCC >>> 24) - 48;
				switch(v) {
				case 1:
					bc = 4;
					break;
				case 2:
					bc = 5;
					break;
				default:
					bc = 0;
				}
				break;
			case 5527620:
				var dxt = (fourCC >>> 24) - 48;
				switch(dxt) {
				case 1:
					bc = 1;
					break;
				case 2:case 3:
					bc = 2;
					break;
				case 4:case 5:
					bc = 3;
					break;
				default:
					bc = 0;
				}
				break;
			default:
				if(fourCC == 808540228) {
					f.skip(40);
					var dxgi = f.readInt32();
					switch(dxgi) {
					case 95:
						bc = 6;
						break;
					case 98:
						bc = 7;
						break;
					default:
						throw new js__$Boot_HaxeError(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
				}
			}
			if(bc == 0) {
				throw new js__$Boot_HaxeError(this.entry.get_path() + " has unsupported 4CC " + String.fromCodePoint((fourCC & 255)) + String.fromCodePoint((fourCC >> 8 & 255)) + String.fromCodePoint((fourCC >> 16 & 255)) + String.fromCodePoint((fourCC >>> 24)));
			}
			break;
		case 18759:
			format = 2;
			f.readInt32();
			width = f.readUInt16();
			height = f.readUInt16();
			break;
		case 20617:
			format = 1;
			f.set_bigEndian(true);
			f.skip(6);
			while(true) {
				var dataLen = f.readInt32();
				if(f.readInt32() == 1229472850) {
					width = f.readInt32();
					height = f.readInt32();
					break;
				}
				f.skip(dataLen + 4);
			}
			break;
		case 55551:
			format = 0;
			f.set_bigEndian(true);
			_hx_loop2: while(true) switch(f.readUInt16()) {
			case 65472:case 65473:case 65474:
				var len = f.readUInt16();
				var prec = f.readByte();
				height = f.readUInt16();
				width = f.readUInt16();
				break _hx_loop2;
			default:
				f.skip(f.readUInt16() - 2);
			}
			break;
		default:
			if(this.entry.get_extension() == "tga") {
				format = 3;
				f.skip(10);
				width = f.readUInt16();
				height = f.readUInt16();
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + this.entry.get_path());
			}
		}
		f.close();
		this.inf = { width : width, height : height, format : format, bc : bc};
		return this.inf;
	}
	,getPixels: function(fmt,flipY) {
		this.getSize();
		var pixels;
		switch(this.inf.format) {
		case 0:
			var bytes = this.entry.getBytes();
			var p;
			try {
				p = hxd_res_NanoJpeg.decode(bytes);
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				throw new js__$Boot_HaxeError("Failed to decode JPG " + this.entry.get_path() + " (" + Std.string(e1) + ")");
			}
			pixels = new hxd_Pixels(p.width,p.height,p.pixels,hxd_PixelFormat.BGRA);
			break;
		case 1:
			var bytes1 = this.entry.getBytes();
			var png = new format_png_Reader(new haxe_io_BytesInput(bytes1));
			png.checkCRC = false;
			pixels = hxd_Pixels.alloc(this.inf.width,this.inf.height,hxd_PixelFormat.BGRA);
			var pdata = png.read();
			format_png_Tools.extract32(pdata,pixels.bytes,flipY);
			if(flipY) {
				pixels.flags |= 1 << hxd_Flags.FlipY._hx_index;
			}
			break;
		case 2:
			var bytes2 = this.entry.getBytes();
			var gif = new format_gif_Reader(new haxe_io_BytesInput(bytes2)).read();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullBGRA(gif,0),hxd_PixelFormat.BGRA);
			break;
		case 3:
			var bytes3 = this.entry.getBytes();
			var r = new format_tga_Reader(new haxe_io_BytesInput(bytes3)).read();
			if(r.header.imageType != format_tga_ImageType.UncompressedTrueColor || r.header.bitsPerPixel != 32) {
				throw new js__$Boot_HaxeError("Not supported " + Std.string(r.header.imageType) + "/" + r.header.bitsPerPixel);
			}
			var w = r.header.width;
			var h = r.header.height;
			pixels = hxd_Pixels.alloc(w,h,hxd_PixelFormat.ARGB);
			var access = hxd__$Pixels_PixelsARGB_$Impl_$.fromPixels(pixels);
			var p1 = 0;
			var _g = 0;
			var _g1 = h;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g11 = w;
				while(_g2 < _g11) {
					var x = _g2++;
					var c = r.imageData[x + y * w];
					access.bytes.setInt32((x + y * access.width << 2) + access.offset,c >>> 24 | c >> 8 & 65280 | c << 8 & 16711680 | c << 24);
				}
			}
			switch(r.header.imageOrigin._hx_index) {
			case 0:
				pixels.flags |= 1 << hxd_Flags.FlipY._hx_index;
				break;
			case 2:
				break;
			default:
				throw new js__$Boot_HaxeError("Not supported " + Std.string(r.header.imageOrigin));
			}
			break;
		case 4:
			var bytes4 = this.entry.getBytes();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,bytes4,hxd_PixelFormat.S3TC(this.inf.bc),128 + (this.inf.bc >= 6 ? 20 : 0));
			break;
		}
		if(fmt != null) {
			pixels.convert(fmt);
		}
		if(flipY != null) {
			pixels.setFlip(flipY);
		}
		return pixels;
	}
	,watchCallb: function() {
		var w = this.inf.width;
		var h = this.inf.height;
		this.inf = null;
		var s = this.getSize();
		if(w != s.width || h != s.height) {
			this.tex.resize(w,h);
		}
		this.tex.realloc = null;
		this.loadTexture();
	}
	,loadTexture: function() {
		var _gthis = this;
		if(this.getFormat() != 0 && !hxd_res_Image.DEFAULT_ASYNC) {
			var load = function() {
				_gthis.tex.alloc();
				var pixels = _gthis.getPixels(_gthis.tex.format);
				if(pixels.width != _gthis.tex.width || pixels.height != _gthis.tex.height) {
					pixels.makeSquare();
				}
				_gthis.tex.uploadPixels(pixels);
				pixels.dispose();
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			};
			if(this.entry.get_isAvailable()) {
				load();
			} else {
				this.entry.load(load);
			}
		} else {
			this.tex.flags |= 1 << h3d_mat_TextureFlags.Loading._hx_index;
			this.entry.loadBitmap(function(bmp) {
				var bmp1 = hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.toBitmap(bmp);
				_gthis.tex.alloc();
				if(bmp1.ctx.canvas.width != _gthis.tex.width || bmp1.ctx.canvas.height != _gthis.tex.height) {
					var pixels1 = bmp1.getPixels();
					pixels1.makeSquare();
					_gthis.tex.uploadPixels(pixels1);
					pixels1.dispose();
				} else {
					_gthis.tex.uploadBitmap(bmp1);
				}
				bmp1.ctx = null;
				bmp1.pixel = null;
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				_gthis.tex.flags &= -1 - (1 << h3d_mat_TextureFlags.Loading._hx_index);
				if(_gthis.tex.waitLoads != null) {
					var arr = _gthis.tex.waitLoads;
					_gthis.tex.waitLoads = null;
					var _g = 0;
					while(_g < arr.length) {
						var f = arr[_g];
						++_g;
						f();
					}
				}
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			});
		}
	}
	,toTexture: function() {
		if(this.tex != null) {
			return this.tex;
		}
		this.getSize();
		var width = this.inf.width;
		var height = this.inf.height;
		if(!hxd_res_Image.ALLOW_NPOT) {
			var tw = 1;
			var th = 1;
			while(tw < width) tw <<= 1;
			while(th < height) th <<= 1;
			width = tw;
			height = th;
		}
		var format = h3d_mat_Texture.nativeFormat;
		if(this.inf.format == 4) {
			format = hxd_PixelFormat.S3TC(this.inf.bc);
		}
		this.tex = new h3d_mat_Texture(width,height,[h3d_mat_TextureFlags.NoAlloc],format);
		if(hxd_res_Image.DEFAULT_FILTER != h3d_mat_Filter.Linear) {
			this.tex.set_filter(hxd_res_Image.DEFAULT_FILTER);
		}
		this.tex.setName(this.entry.get_path());
		this.loadTexture();
		return this.tex;
	}
	,toTile: function() {
		var size = this.getSize();
		return h2d_Tile.fromTexture(this.toTexture()).sub(0,0,size.width,size.height);
	}
	,__class__: hxd_res_Image
});
var hxd_res_Loader = function(fs) {
	this.fs = fs;
	this.cache = new haxe_ds_StringMap();
};
$hxClasses["hxd.res.Loader"] = hxd_res_Loader;
hxd_res_Loader.__name__ = "hxd.res.Loader";
hxd_res_Loader.prototype = {
	load: function(path) {
		return new hxd_res_Any(this,this.fs.get(path));
	}
	,loadCache: function(path,c) {
		var _this = this.cache;
		var res = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
		if(res == null) {
			var entry = this.fs.get(path);
			var old = hxd_res_Loader.currentInstance;
			hxd_res_Loader.currentInstance = this;
			res = Type.createInstance(c,[entry]);
			hxd_res_Loader.currentInstance = old;
			var _this1 = this.cache;
			if(__map_reserved[path] != null) {
				_this1.setReserved(path,res);
			} else {
				_this1.h[path] = res;
			}
		} else if((js_Boot.__downcastCheck(res,c) ? res : null) == null) {
			throw new js__$Boot_HaxeError(path + " has been reintrepreted from " + Std.string(js_Boot.getClass(res)) + " to " + Std.string(c));
		}
		return res;
	}
	,__class__: hxd_res_Loader
};
var hxd_res_Filter = $hxEnums["hxd.res.Filter"] = { __ename__ : true, __constructs__ : ["Fast","Chromatic"]
	,Fast: {_hx_index:0,__enum__:"hxd.res.Filter",toString:$estr}
	,Chromatic: {_hx_index:1,__enum__:"hxd.res.Filter",toString:$estr}
};
hxd_res_Filter.__empty_constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
var hxd_res__$NanoJpeg_Component = function() {
};
$hxClasses["hxd.res._NanoJpeg.Component"] = hxd_res__$NanoJpeg_Component;
hxd_res__$NanoJpeg_Component.__name__ = "hxd.res._NanoJpeg.Component";
hxd_res__$NanoJpeg_Component.prototype = {
	__class__: hxd_res__$NanoJpeg_Component
};
var hxd_res_NanoJpeg = function() {
	this.comps = [new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component()].slice(0);
	var this1 = new Array(64);
	var this2 = new Array(64);
	var this3 = new Array(64);
	var this4 = new Array(64);
	this.qtab = [this1,this2,this3,this4].slice(0);
	var this5 = new Array(16);
	this.counts = this5;
	var this6 = new Array(64);
	this.block = this6;
	this.njZZ = [0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63].slice(0);
	this.vlctab = [null,null,null,null,null,null,null,null].slice(0);
};
$hxClasses["hxd.res.NanoJpeg"] = hxd_res_NanoJpeg;
hxd_res_NanoJpeg.__name__ = "hxd.res.NanoJpeg";
hxd_res_NanoJpeg.decode = function(bytes,filter,position,size) {
	if(size == null) {
		size = -1;
	}
	if(position == null) {
		position = 0;
	}
	if(hxd_res_NanoJpeg.inst == null) {
		hxd_res_NanoJpeg.inst = new hxd_res_NanoJpeg();
	}
	hxd_res_NanoJpeg.inst.njInit(bytes,position,size,filter);
	return hxd_res_NanoJpeg.inst.njDecode();
};
hxd_res_NanoJpeg.prototype = {
	njInit: function(bytes,pos,size,filter) {
		this.bytes = bytes;
		this.pos = pos;
		this.filter = filter == null ? hxd_res_Filter.Chromatic : filter;
		if(size < 0) {
			size = bytes.length - pos;
		}
		if(this.vlctab[0] == null) {
			this.vlctab[0] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[1] == null) {
			this.vlctab[1] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[2] == null) {
			this.vlctab[2] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[3] == null) {
			this.vlctab[3] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		this.size = size;
		this.qtused = 0;
		this.qtavail = 0;
		this.rstinterval = 0;
		this.length = 0;
		this.buf = 0;
		this.bufbits = 0;
		this.progressive = false;
		this.comps[0].dcpred = 0;
		this.comps[1].dcpred = 0;
		this.comps[2].dcpred = 0;
	}
	,cleanup: function() {
		this.bytes = null;
		var _g = 0;
		var _g1 = this.comps;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.pixels != null) {
				c.pixels = null;
			}
		}
		if(this.vlctab[0] != null) {
			this.vlctab[0] = null;
		}
		if(this.vlctab[1] != null) {
			this.vlctab[1] = null;
		}
		if(this.vlctab[2] != null) {
			this.vlctab[2] = null;
		}
		if(this.vlctab[3] != null) {
			this.vlctab[3] = null;
		}
		if(this.vlctab[4] != null) {
			this.vlctab[4] = null;
		}
		if(this.vlctab[5] != null) {
			this.vlctab[5] = null;
		}
		if(this.vlctab[6] != null) {
			this.vlctab[6] = null;
		}
		if(this.vlctab[7] != null) {
			this.vlctab[7] = null;
		}
	}
	,njShowBits: function(bits) {
		if(bits == 0) {
			return 0;
		}
		while(this.bufbits < bits) {
			if(this.size <= 0) {
				this.buf = this.buf << 8 | 255;
				this.bufbits += 8;
				continue;
			}
			var newbyte = this.bytes.b[this.pos];
			this.pos++;
			this.size--;
			this.bufbits += 8;
			this.buf = this.buf << 8 | newbyte;
			if(newbyte == 255) {
				var marker = this.bytes.b[this.pos];
				this.pos++;
				this.size--;
				switch(marker) {
				case 217:
					this.size = 0;
					break;
				case 0:case 255:
					break;
				default:
					this.buf = this.buf << 8 | marker;
					this.bufbits += 8;
				}
			}
		}
		return this.buf >> this.bufbits - bits & (1 << bits) - 1;
	}
	,njDecodeSOF: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != 8) {
			this.notSupported();
		}
		this.height = this.bytes.b[this.pos + 1] << 8 | this.bytes.b[this.pos + 2];
		this.width = this.bytes.b[this.pos + 3] << 8 | this.bytes.b[this.pos + 4];
		this.ncomp = this.bytes.b[this.pos + 5];
		this.pos += 6;
		this.size -= 6;
		this.length -= 6;
		switch(this.ncomp) {
		case 1:case 3:
			break;
		default:
			this.notSupported();
		}
		var ssxmax = 0;
		var ssymax = 0;
		var _g1 = 0;
		var _g2 = this.ncomp;
		while(_g1 < _g2) {
			var i = _g1++;
			var c = this.comps[i];
			c.cid = this.bytes.b[this.pos];
			c.ssx = this.bytes.b[this.pos + 1] >> 4;
			if((c.ssx & c.ssx - 1) != 0) {
				this.notSupported();
			}
			c.ssy = this.bytes.b[this.pos + 1] & 15;
			if((c.ssy & c.ssy - 1) != 0) {
				this.notSupported();
			}
			c.qtsel = this.bytes.b[this.pos + 2];
			this.pos += 3;
			this.size -= 3;
			this.length -= 3;
			this.qtused |= 1 << c.qtsel;
			if(c.ssx > ssxmax) {
				ssxmax = c.ssx;
			}
			if(c.ssy > ssymax) {
				ssymax = c.ssy;
			}
		}
		if(this.ncomp == 1) {
			var c1 = this.comps[0];
			ssymax = 1;
			ssxmax = ssymax;
			c1.ssx = c1.ssy = ssxmax;
		}
		this.mbsizex = ssxmax << 3;
		this.mbsizey = ssymax << 3;
		this.mbwidth = (this.width + this.mbsizex - 1) / this.mbsizex | 0;
		this.mbheight = (this.height + this.mbsizey - 1) / this.mbsizey | 0;
		var _g3 = 0;
		var _g4 = this.ncomp;
		while(_g3 < _g4) {
			var i1 = _g3++;
			var c2 = this.comps[i1];
			c2.width = (this.width * c2.ssx + ssxmax - 1) / ssxmax | 0;
			c2.stride = c2.width + 7 & 2147483640;
			c2.height = (this.height * c2.ssy + ssymax - 1) / ssymax | 0;
			c2.stride = this.mbwidth * this.mbsizex * c2.ssx / ssxmax | 0;
			if(c2.width < 3 && c2.ssx != ssxmax || c2.height < 3 && c2.ssy != ssymax) {
				this.notSupported();
			}
			c2.pixels = new haxe_io_Bytes(new ArrayBuffer(c2.stride * (this.mbheight * this.mbsizey * c2.ssy / ssymax | 0)));
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	,njDecodeDQT: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 65) {
			var i = this.bytes.b[this.pos];
			this.qtavail |= 1 << i;
			var t = this.qtab[i];
			var _g = 0;
			while(_g < 64) {
				var k = _g++;
				t[k] = this.bytes.b[this.pos + (k + 1)];
			}
			this.pos += 65;
			this.size -= 65;
			this.length -= 65;
		}
	}
	,njDecodeDHT: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 17) {
			var i = this.bytes.b[this.pos];
			i = i >> 4 & 1 | (i & 3) << 1;
			this.counts[0] = this.bytes.b[this.pos + 1];
			this.counts[1] = this.bytes.b[this.pos + 2];
			this.counts[2] = this.bytes.b[this.pos + 3];
			this.counts[3] = this.bytes.b[this.pos + 4];
			this.counts[4] = this.bytes.b[this.pos + 5];
			this.counts[5] = this.bytes.b[this.pos + 6];
			this.counts[6] = this.bytes.b[this.pos + 7];
			this.counts[7] = this.bytes.b[this.pos + 8];
			this.counts[8] = this.bytes.b[this.pos + 9];
			this.counts[9] = this.bytes.b[this.pos + 10];
			this.counts[10] = this.bytes.b[this.pos + 11];
			this.counts[11] = this.bytes.b[this.pos + 12];
			this.counts[12] = this.bytes.b[this.pos + 13];
			this.counts[13] = this.bytes.b[this.pos + 14];
			this.counts[14] = this.bytes.b[this.pos + 15];
			this.counts[15] = this.bytes.b[this.pos + 16];
			this.pos += 17;
			this.size -= 17;
			this.length -= 17;
			var vlc = this.vlctab[i];
			var vpos = 0;
			var remain = 65536;
			var spread = 65536;
			var _g = 1;
			while(_g < 17) {
				var codelen = _g++;
				spread >>= 1;
				var currcnt = this.counts[codelen - 1];
				if(currcnt == 0) {
					continue;
				}
				remain -= currcnt << 16 - codelen;
				var _g1 = 0;
				var _g11 = currcnt;
				while(_g1 < _g11) {
					var i1 = _g1++;
					var code = this.bytes.b[this.pos + i1];
					var _g2 = 0;
					var _g12 = spread;
					while(_g2 < _g12) {
						var j = _g2++;
						vlc.b[vpos++] = codelen;
						vlc.b[vpos++] = code;
					}
				}
				this.pos += currcnt;
				this.size -= currcnt;
				this.length -= currcnt;
			}
			while(remain-- != 0) {
				vlc.b[vpos] = 0;
				vpos += 2;
			}
		}
	}
	,njDecodeDRI: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		this.rstinterval = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	,njDecodeBlock: function(c,po) {
		var this1 = c.pixels;
		var out = this1;
		var value;
		var coef = 0;
		var _g = 0;
		while(_g < 64) {
			var i = _g++;
			this.block[i] = 0;
		}
		var c1 = c;
		var c2 = c1.dcpred;
		var vlc = this.vlctab[c.dctabsel];
		var value1 = this.njShowBits(16);
		var bits = vlc.b[value1 << 1];
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value1 = vlc.b[value1 << 1 | 1];
		this.vlcCode = value1;
		bits = value1 & 15;
		var tmp;
		if(bits == 0) {
			tmp = 0;
		} else {
			var r = this.njShowBits(bits);
			this.bufbits -= bits;
			value1 = r;
			if(value1 < 1 << bits - 1) {
				value1 += (-1 << bits) + 1;
			}
			tmp = value1;
		}
		c1.dcpred = c2 + tmp;
		var qt = this.qtab[c.qtsel];
		var at = this.vlctab[c.actabsel];
		this.block[0] = c.dcpred * qt[0];
		while(true) {
			var value2 = this.njShowBits(16);
			var bits1 = at.b[value2 << 1];
			if(this.bufbits < bits1) {
				this.njShowBits(bits1);
			}
			this.bufbits -= bits1;
			value2 = at.b[value2 << 1 | 1];
			this.vlcCode = value2;
			bits1 = value2 & 15;
			if(bits1 == 0) {
				value = 0;
			} else {
				var r1 = this.njShowBits(bits1);
				this.bufbits -= bits1;
				value2 = r1;
				if(value2 < 1 << bits1 - 1) {
					value2 += (-1 << bits1) + 1;
				}
				value = value2;
			}
			if(this.vlcCode == 0) {
				break;
			}
			coef += (this.vlcCode >> 4) + 1;
			this.block[this.njZZ[coef]] = value * qt[coef];
			if(!(coef < 63)) {
				break;
			}
		}
		var bp = 0;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val2 = this.block[bp + 5] = val1;
			var val3 = this.block[bp + 4] = val2;
			var val4 = this.block[bp + 3] = val3;
			var val5 = this.block[bp + 2] = val4;
			var val6 = this.block[bp + 1] = val5;
			this.block[bp] = val6;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp1 = 8;
		var x01;
		var x81;
		var x11 = this.block[bp1 + 4] << 11;
		var x21 = this.block[bp1 + 6];
		var x31 = this.block[bp1 + 2];
		var x41 = this.block[bp1 + 1];
		var x51 = this.block[bp1 + 7];
		var x61 = this.block[bp1 + 5];
		var x71 = this.block[bp1 + 3];
		if((x11 | x21 | x31 | x41 | x51 | x61 | x71) == 0) {
			var val7 = this.block[bp1 + 7] = this.block[bp1] << 3;
			var val8 = this.block[bp1 + 6] = val7;
			var val9 = this.block[bp1 + 5] = val8;
			var val10 = this.block[bp1 + 4] = val9;
			var val11 = this.block[bp1 + 3] = val10;
			var val12 = this.block[bp1 + 2] = val11;
			var val13 = this.block[bp1 + 1] = val12;
			this.block[bp1] = val13;
		} else {
			x01 = (this.block[bp1] << 11) + 128;
			x81 = 565 * (x41 + x51);
			x41 = x81 + 2276 * x41;
			x51 = x81 - 3406 * x51;
			x81 = 2408 * (x61 + x71);
			x61 = x81 - 799 * x61;
			x71 = x81 - 4017 * x71;
			x81 = x01 + x11;
			x01 -= x11;
			x11 = 1108 * (x31 + x21);
			x21 = x11 - 3784 * x21;
			x31 = x11 + 1568 * x31;
			x11 = x41 + x61;
			x41 -= x61;
			x61 = x51 + x71;
			x51 -= x71;
			x71 = x81 + x31;
			x81 -= x31;
			x31 = x01 + x21;
			x01 -= x21;
			x21 = 181 * (x41 + x51) + 128 >> 8;
			x41 = 181 * (x41 - x51) + 128 >> 8;
			this.block[bp1] = x71 + x11 >> 8;
			this.block[bp1 + 1] = x31 + x21 >> 8;
			this.block[bp1 + 2] = x01 + x41 >> 8;
			this.block[bp1 + 3] = x81 + x61 >> 8;
			this.block[bp1 + 4] = x81 - x61 >> 8;
			this.block[bp1 + 5] = x01 - x41 >> 8;
			this.block[bp1 + 6] = x31 - x21 >> 8;
			this.block[bp1 + 7] = x71 - x11 >> 8;
		}
		var bp2 = 16;
		var x02;
		var x82;
		var x12 = this.block[bp2 + 4] << 11;
		var x22 = this.block[bp2 + 6];
		var x32 = this.block[bp2 + 2];
		var x42 = this.block[bp2 + 1];
		var x52 = this.block[bp2 + 7];
		var x62 = this.block[bp2 + 5];
		var x72 = this.block[bp2 + 3];
		if((x12 | x22 | x32 | x42 | x52 | x62 | x72) == 0) {
			var val14 = this.block[bp2 + 7] = this.block[bp2] << 3;
			var val15 = this.block[bp2 + 6] = val14;
			var val16 = this.block[bp2 + 5] = val15;
			var val17 = this.block[bp2 + 4] = val16;
			var val18 = this.block[bp2 + 3] = val17;
			var val19 = this.block[bp2 + 2] = val18;
			var val20 = this.block[bp2 + 1] = val19;
			this.block[bp2] = val20;
		} else {
			x02 = (this.block[bp2] << 11) + 128;
			x82 = 565 * (x42 + x52);
			x42 = x82 + 2276 * x42;
			x52 = x82 - 3406 * x52;
			x82 = 2408 * (x62 + x72);
			x62 = x82 - 799 * x62;
			x72 = x82 - 4017 * x72;
			x82 = x02 + x12;
			x02 -= x12;
			x12 = 1108 * (x32 + x22);
			x22 = x12 - 3784 * x22;
			x32 = x12 + 1568 * x32;
			x12 = x42 + x62;
			x42 -= x62;
			x62 = x52 + x72;
			x52 -= x72;
			x72 = x82 + x32;
			x82 -= x32;
			x32 = x02 + x22;
			x02 -= x22;
			x22 = 181 * (x42 + x52) + 128 >> 8;
			x42 = 181 * (x42 - x52) + 128 >> 8;
			this.block[bp2] = x72 + x12 >> 8;
			this.block[bp2 + 1] = x32 + x22 >> 8;
			this.block[bp2 + 2] = x02 + x42 >> 8;
			this.block[bp2 + 3] = x82 + x62 >> 8;
			this.block[bp2 + 4] = x82 - x62 >> 8;
			this.block[bp2 + 5] = x02 - x42 >> 8;
			this.block[bp2 + 6] = x32 - x22 >> 8;
			this.block[bp2 + 7] = x72 - x12 >> 8;
		}
		var bp3 = 24;
		var x03;
		var x83;
		var x13 = this.block[bp3 + 4] << 11;
		var x23 = this.block[bp3 + 6];
		var x33 = this.block[bp3 + 2];
		var x43 = this.block[bp3 + 1];
		var x53 = this.block[bp3 + 7];
		var x63 = this.block[bp3 + 5];
		var x73 = this.block[bp3 + 3];
		if((x13 | x23 | x33 | x43 | x53 | x63 | x73) == 0) {
			var val21 = this.block[bp3 + 7] = this.block[bp3] << 3;
			var val22 = this.block[bp3 + 6] = val21;
			var val23 = this.block[bp3 + 5] = val22;
			var val24 = this.block[bp3 + 4] = val23;
			var val25 = this.block[bp3 + 3] = val24;
			var val26 = this.block[bp3 + 2] = val25;
			var val27 = this.block[bp3 + 1] = val26;
			this.block[bp3] = val27;
		} else {
			x03 = (this.block[bp3] << 11) + 128;
			x83 = 565 * (x43 + x53);
			x43 = x83 + 2276 * x43;
			x53 = x83 - 3406 * x53;
			x83 = 2408 * (x63 + x73);
			x63 = x83 - 799 * x63;
			x73 = x83 - 4017 * x73;
			x83 = x03 + x13;
			x03 -= x13;
			x13 = 1108 * (x33 + x23);
			x23 = x13 - 3784 * x23;
			x33 = x13 + 1568 * x33;
			x13 = x43 + x63;
			x43 -= x63;
			x63 = x53 + x73;
			x53 -= x73;
			x73 = x83 + x33;
			x83 -= x33;
			x33 = x03 + x23;
			x03 -= x23;
			x23 = 181 * (x43 + x53) + 128 >> 8;
			x43 = 181 * (x43 - x53) + 128 >> 8;
			this.block[bp3] = x73 + x13 >> 8;
			this.block[bp3 + 1] = x33 + x23 >> 8;
			this.block[bp3 + 2] = x03 + x43 >> 8;
			this.block[bp3 + 3] = x83 + x63 >> 8;
			this.block[bp3 + 4] = x83 - x63 >> 8;
			this.block[bp3 + 5] = x03 - x43 >> 8;
			this.block[bp3 + 6] = x33 - x23 >> 8;
			this.block[bp3 + 7] = x73 - x13 >> 8;
		}
		var bp4 = 32;
		var x04;
		var x84;
		var x14 = this.block[bp4 + 4] << 11;
		var x24 = this.block[bp4 + 6];
		var x34 = this.block[bp4 + 2];
		var x44 = this.block[bp4 + 1];
		var x54 = this.block[bp4 + 7];
		var x64 = this.block[bp4 + 5];
		var x74 = this.block[bp4 + 3];
		if((x14 | x24 | x34 | x44 | x54 | x64 | x74) == 0) {
			var val28 = this.block[bp4 + 7] = this.block[bp4] << 3;
			var val29 = this.block[bp4 + 6] = val28;
			var val30 = this.block[bp4 + 5] = val29;
			var val31 = this.block[bp4 + 4] = val30;
			var val32 = this.block[bp4 + 3] = val31;
			var val33 = this.block[bp4 + 2] = val32;
			var val34 = this.block[bp4 + 1] = val33;
			this.block[bp4] = val34;
		} else {
			x04 = (this.block[bp4] << 11) + 128;
			x84 = 565 * (x44 + x54);
			x44 = x84 + 2276 * x44;
			x54 = x84 - 3406 * x54;
			x84 = 2408 * (x64 + x74);
			x64 = x84 - 799 * x64;
			x74 = x84 - 4017 * x74;
			x84 = x04 + x14;
			x04 -= x14;
			x14 = 1108 * (x34 + x24);
			x24 = x14 - 3784 * x24;
			x34 = x14 + 1568 * x34;
			x14 = x44 + x64;
			x44 -= x64;
			x64 = x54 + x74;
			x54 -= x74;
			x74 = x84 + x34;
			x84 -= x34;
			x34 = x04 + x24;
			x04 -= x24;
			x24 = 181 * (x44 + x54) + 128 >> 8;
			x44 = 181 * (x44 - x54) + 128 >> 8;
			this.block[bp4] = x74 + x14 >> 8;
			this.block[bp4 + 1] = x34 + x24 >> 8;
			this.block[bp4 + 2] = x04 + x44 >> 8;
			this.block[bp4 + 3] = x84 + x64 >> 8;
			this.block[bp4 + 4] = x84 - x64 >> 8;
			this.block[bp4 + 5] = x04 - x44 >> 8;
			this.block[bp4 + 6] = x34 - x24 >> 8;
			this.block[bp4 + 7] = x74 - x14 >> 8;
		}
		var bp5 = 40;
		var x05;
		var x85;
		var x15 = this.block[bp5 + 4] << 11;
		var x25 = this.block[bp5 + 6];
		var x35 = this.block[bp5 + 2];
		var x45 = this.block[bp5 + 1];
		var x55 = this.block[bp5 + 7];
		var x65 = this.block[bp5 + 5];
		var x75 = this.block[bp5 + 3];
		if((x15 | x25 | x35 | x45 | x55 | x65 | x75) == 0) {
			var val35 = this.block[bp5 + 7] = this.block[bp5] << 3;
			var val36 = this.block[bp5 + 6] = val35;
			var val37 = this.block[bp5 + 5] = val36;
			var val38 = this.block[bp5 + 4] = val37;
			var val39 = this.block[bp5 + 3] = val38;
			var val40 = this.block[bp5 + 2] = val39;
			var val41 = this.block[bp5 + 1] = val40;
			this.block[bp5] = val41;
		} else {
			x05 = (this.block[bp5] << 11) + 128;
			x85 = 565 * (x45 + x55);
			x45 = x85 + 2276 * x45;
			x55 = x85 - 3406 * x55;
			x85 = 2408 * (x65 + x75);
			x65 = x85 - 799 * x65;
			x75 = x85 - 4017 * x75;
			x85 = x05 + x15;
			x05 -= x15;
			x15 = 1108 * (x35 + x25);
			x25 = x15 - 3784 * x25;
			x35 = x15 + 1568 * x35;
			x15 = x45 + x65;
			x45 -= x65;
			x65 = x55 + x75;
			x55 -= x75;
			x75 = x85 + x35;
			x85 -= x35;
			x35 = x05 + x25;
			x05 -= x25;
			x25 = 181 * (x45 + x55) + 128 >> 8;
			x45 = 181 * (x45 - x55) + 128 >> 8;
			this.block[bp5] = x75 + x15 >> 8;
			this.block[bp5 + 1] = x35 + x25 >> 8;
			this.block[bp5 + 2] = x05 + x45 >> 8;
			this.block[bp5 + 3] = x85 + x65 >> 8;
			this.block[bp5 + 4] = x85 - x65 >> 8;
			this.block[bp5 + 5] = x05 - x45 >> 8;
			this.block[bp5 + 6] = x35 - x25 >> 8;
			this.block[bp5 + 7] = x75 - x15 >> 8;
		}
		var bp6 = 48;
		var x06;
		var x86;
		var x16 = this.block[bp6 + 4] << 11;
		var x26 = this.block[bp6 + 6];
		var x36 = this.block[bp6 + 2];
		var x46 = this.block[bp6 + 1];
		var x56 = this.block[bp6 + 7];
		var x66 = this.block[bp6 + 5];
		var x76 = this.block[bp6 + 3];
		if((x16 | x26 | x36 | x46 | x56 | x66 | x76) == 0) {
			var val42 = this.block[bp6 + 7] = this.block[bp6] << 3;
			var val43 = this.block[bp6 + 6] = val42;
			var val44 = this.block[bp6 + 5] = val43;
			var val45 = this.block[bp6 + 4] = val44;
			var val46 = this.block[bp6 + 3] = val45;
			var val47 = this.block[bp6 + 2] = val46;
			var val48 = this.block[bp6 + 1] = val47;
			this.block[bp6] = val48;
		} else {
			x06 = (this.block[bp6] << 11) + 128;
			x86 = 565 * (x46 + x56);
			x46 = x86 + 2276 * x46;
			x56 = x86 - 3406 * x56;
			x86 = 2408 * (x66 + x76);
			x66 = x86 - 799 * x66;
			x76 = x86 - 4017 * x76;
			x86 = x06 + x16;
			x06 -= x16;
			x16 = 1108 * (x36 + x26);
			x26 = x16 - 3784 * x26;
			x36 = x16 + 1568 * x36;
			x16 = x46 + x66;
			x46 -= x66;
			x66 = x56 + x76;
			x56 -= x76;
			x76 = x86 + x36;
			x86 -= x36;
			x36 = x06 + x26;
			x06 -= x26;
			x26 = 181 * (x46 + x56) + 128 >> 8;
			x46 = 181 * (x46 - x56) + 128 >> 8;
			this.block[bp6] = x76 + x16 >> 8;
			this.block[bp6 + 1] = x36 + x26 >> 8;
			this.block[bp6 + 2] = x06 + x46 >> 8;
			this.block[bp6 + 3] = x86 + x66 >> 8;
			this.block[bp6 + 4] = x86 - x66 >> 8;
			this.block[bp6 + 5] = x06 - x46 >> 8;
			this.block[bp6 + 6] = x36 - x26 >> 8;
			this.block[bp6 + 7] = x76 - x16 >> 8;
		}
		var bp7 = 56;
		var x07;
		var x87;
		var x17 = this.block[bp7 + 4] << 11;
		var x27 = this.block[bp7 + 6];
		var x37 = this.block[bp7 + 2];
		var x47 = this.block[bp7 + 1];
		var x57 = this.block[bp7 + 7];
		var x67 = this.block[bp7 + 5];
		var x77 = this.block[bp7 + 3];
		if((x17 | x27 | x37 | x47 | x57 | x67 | x77) == 0) {
			var val49 = this.block[bp7 + 7] = this.block[bp7] << 3;
			var val50 = this.block[bp7 + 6] = val49;
			var val51 = this.block[bp7 + 5] = val50;
			var val52 = this.block[bp7 + 4] = val51;
			var val53 = this.block[bp7 + 3] = val52;
			var val54 = this.block[bp7 + 2] = val53;
			var val55 = this.block[bp7 + 1] = val54;
			this.block[bp7] = val55;
		} else {
			x07 = (this.block[bp7] << 11) + 128;
			x87 = 565 * (x47 + x57);
			x47 = x87 + 2276 * x47;
			x57 = x87 - 3406 * x57;
			x87 = 2408 * (x67 + x77);
			x67 = x87 - 799 * x67;
			x77 = x87 - 4017 * x77;
			x87 = x07 + x17;
			x07 -= x17;
			x17 = 1108 * (x37 + x27);
			x27 = x17 - 3784 * x27;
			x37 = x17 + 1568 * x37;
			x17 = x47 + x67;
			x47 -= x67;
			x67 = x57 + x77;
			x57 -= x77;
			x77 = x87 + x37;
			x87 -= x37;
			x37 = x07 + x27;
			x07 -= x27;
			x27 = 181 * (x47 + x57) + 128 >> 8;
			x47 = 181 * (x47 - x57) + 128 >> 8;
			this.block[bp7] = x77 + x17 >> 8;
			this.block[bp7 + 1] = x37 + x27 >> 8;
			this.block[bp7 + 2] = x07 + x47 >> 8;
			this.block[bp7 + 3] = x87 + x67 >> 8;
			this.block[bp7 + 4] = x87 - x67 >> 8;
			this.block[bp7 + 5] = x07 - x47 >> 8;
			this.block[bp7 + 6] = x37 - x27 >> 8;
			this.block[bp7 + 7] = x77 - x17 >> 8;
		}
		var po1 = po;
		var stride = c.stride;
		var x08;
		var x88;
		var x18 = this.block[32] << 8;
		var x28 = this.block[48];
		var x38 = this.block[16];
		var x48 = this.block[8];
		var x58 = this.block[56];
		var x68 = this.block[40];
		var x78 = this.block[24];
		if((x18 | x28 | x38 | x48 | x58 | x68 | x78) == 0) {
			var x = (this.block[0] + 32 >> 6) + 128;
			x18 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
		} else {
			x08 = (this.block[0] << 8) + 8192;
			x88 = 565 * (x48 + x58) + 4;
			x48 = x88 + 2276 * x48 >> 3;
			x58 = x88 - 3406 * x58 >> 3;
			x88 = 2408 * (x68 + x78) + 4;
			x68 = x88 - 799 * x68 >> 3;
			x78 = x88 - 4017 * x78 >> 3;
			x88 = x08 + x18;
			x08 -= x18;
			x18 = 1108 * (x38 + x28) + 4;
			x28 = x18 - 3784 * x28 >> 3;
			x38 = x18 + 1568 * x38 >> 3;
			x18 = x48 + x68;
			x48 -= x68;
			x68 = x58 + x78;
			x58 -= x78;
			x78 = x88 + x38;
			x88 -= x38;
			x38 = x08 + x28;
			x08 -= x28;
			x28 = 181 * (x48 + x58) + 128 >> 8;
			x48 = 181 * (x48 - x58) + 128 >> 8;
			var x9 = (x78 + x18 >> 14) + 128;
			out.b[po1] = x9 < 0 ? 0 : x9 > 255 ? 255 : x9;
			po1 += stride;
			var x10 = (x38 + x28 >> 14) + 128;
			out.b[po1] = x10 < 0 ? 0 : x10 > 255 ? 255 : x10;
			po1 += stride;
			var x19 = (x08 + x48 >> 14) + 128;
			out.b[po1] = x19 < 0 ? 0 : x19 > 255 ? 255 : x19;
			po1 += stride;
			var x20 = (x88 + x68 >> 14) + 128;
			out.b[po1] = x20 < 0 ? 0 : x20 > 255 ? 255 : x20;
			po1 += stride;
			var x29 = (x88 - x68 >> 14) + 128;
			out.b[po1] = x29 < 0 ? 0 : x29 > 255 ? 255 : x29;
			po1 += stride;
			var x30 = (x08 - x48 >> 14) + 128;
			out.b[po1] = x30 < 0 ? 0 : x30 > 255 ? 255 : x30;
			po1 += stride;
			var x39 = (x38 - x28 >> 14) + 128;
			out.b[po1] = x39 < 0 ? 0 : x39 > 255 ? 255 : x39;
			po1 += stride;
			var x40 = (x78 - x18 >> 14) + 128;
			out.b[po1] = x40 < 0 ? 0 : x40 > 255 ? 255 : x40;
		}
		var po2 = 1 + po;
		var stride1 = c.stride;
		var x09;
		var x89;
		var x110 = this.block[33] << 8;
		var x210 = this.block[49];
		var x310 = this.block[17];
		var x49 = this.block[9];
		var x59 = this.block[57];
		var x69 = this.block[41];
		var x79 = this.block[25];
		if((x110 | x210 | x310 | x49 | x59 | x69 | x79) == 0) {
			var x50 = (this.block[1] + 32 >> 6) + 128;
			x110 = x50 < 0 ? 0 : x50 > 255 ? 255 : x50;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
		} else {
			x09 = (this.block[1] << 8) + 8192;
			x89 = 565 * (x49 + x59) + 4;
			x49 = x89 + 2276 * x49 >> 3;
			x59 = x89 - 3406 * x59 >> 3;
			x89 = 2408 * (x69 + x79) + 4;
			x69 = x89 - 799 * x69 >> 3;
			x79 = x89 - 4017 * x79 >> 3;
			x89 = x09 + x110;
			x09 -= x110;
			x110 = 1108 * (x310 + x210) + 4;
			x210 = x110 - 3784 * x210 >> 3;
			x310 = x110 + 1568 * x310 >> 3;
			x110 = x49 + x69;
			x49 -= x69;
			x69 = x59 + x79;
			x59 -= x79;
			x79 = x89 + x310;
			x89 -= x310;
			x310 = x09 + x210;
			x09 -= x210;
			x210 = 181 * (x49 + x59) + 128 >> 8;
			x49 = 181 * (x49 - x59) + 128 >> 8;
			var x60 = (x79 + x110 >> 14) + 128;
			out.b[po2] = x60 < 0 ? 0 : x60 > 255 ? 255 : x60;
			po2 += stride1;
			var x70 = (x310 + x210 >> 14) + 128;
			out.b[po2] = x70 < 0 ? 0 : x70 > 255 ? 255 : x70;
			po2 += stride1;
			var x80 = (x09 + x49 >> 14) + 128;
			out.b[po2] = x80 < 0 ? 0 : x80 > 255 ? 255 : x80;
			po2 += stride1;
			var x90 = (x89 + x69 >> 14) + 128;
			out.b[po2] = x90 < 0 ? 0 : x90 > 255 ? 255 : x90;
			po2 += stride1;
			var x91 = (x89 - x69 >> 14) + 128;
			out.b[po2] = x91 < 0 ? 0 : x91 > 255 ? 255 : x91;
			po2 += stride1;
			var x92 = (x09 - x49 >> 14) + 128;
			out.b[po2] = x92 < 0 ? 0 : x92 > 255 ? 255 : x92;
			po2 += stride1;
			var x93 = (x310 - x210 >> 14) + 128;
			out.b[po2] = x93 < 0 ? 0 : x93 > 255 ? 255 : x93;
			po2 += stride1;
			var x94 = (x79 - x110 >> 14) + 128;
			out.b[po2] = x94 < 0 ? 0 : x94 > 255 ? 255 : x94;
		}
		var po3 = 2 + po;
		var stride2 = c.stride;
		var x010;
		var x810;
		var x111 = this.block[34] << 8;
		var x211 = this.block[50];
		var x311 = this.block[18];
		var x410 = this.block[10];
		var x510 = this.block[58];
		var x610 = this.block[42];
		var x710 = this.block[26];
		if((x111 | x211 | x311 | x410 | x510 | x610 | x710) == 0) {
			var x95 = (this.block[2] + 32 >> 6) + 128;
			x111 = x95 < 0 ? 0 : x95 > 255 ? 255 : x95;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
		} else {
			x010 = (this.block[2] << 8) + 8192;
			x810 = 565 * (x410 + x510) + 4;
			x410 = x810 + 2276 * x410 >> 3;
			x510 = x810 - 3406 * x510 >> 3;
			x810 = 2408 * (x610 + x710) + 4;
			x610 = x810 - 799 * x610 >> 3;
			x710 = x810 - 4017 * x710 >> 3;
			x810 = x010 + x111;
			x010 -= x111;
			x111 = 1108 * (x311 + x211) + 4;
			x211 = x111 - 3784 * x211 >> 3;
			x311 = x111 + 1568 * x311 >> 3;
			x111 = x410 + x610;
			x410 -= x610;
			x610 = x510 + x710;
			x510 -= x710;
			x710 = x810 + x311;
			x810 -= x311;
			x311 = x010 + x211;
			x010 -= x211;
			x211 = 181 * (x410 + x510) + 128 >> 8;
			x410 = 181 * (x410 - x510) + 128 >> 8;
			var x96 = (x710 + x111 >> 14) + 128;
			out.b[po3] = x96 < 0 ? 0 : x96 > 255 ? 255 : x96;
			po3 += stride2;
			var x97 = (x311 + x211 >> 14) + 128;
			out.b[po3] = x97 < 0 ? 0 : x97 > 255 ? 255 : x97;
			po3 += stride2;
			var x98 = (x010 + x410 >> 14) + 128;
			out.b[po3] = x98 < 0 ? 0 : x98 > 255 ? 255 : x98;
			po3 += stride2;
			var x99 = (x810 + x610 >> 14) + 128;
			out.b[po3] = x99 < 0 ? 0 : x99 > 255 ? 255 : x99;
			po3 += stride2;
			var x100 = (x810 - x610 >> 14) + 128;
			out.b[po3] = x100 < 0 ? 0 : x100 > 255 ? 255 : x100;
			po3 += stride2;
			var x101 = (x010 - x410 >> 14) + 128;
			out.b[po3] = x101 < 0 ? 0 : x101 > 255 ? 255 : x101;
			po3 += stride2;
			var x102 = (x311 - x211 >> 14) + 128;
			out.b[po3] = x102 < 0 ? 0 : x102 > 255 ? 255 : x102;
			po3 += stride2;
			var x103 = (x710 - x111 >> 14) + 128;
			out.b[po3] = x103 < 0 ? 0 : x103 > 255 ? 255 : x103;
		}
		var po4 = 3 + po;
		var stride3 = c.stride;
		var x011;
		var x811;
		var x112 = this.block[35] << 8;
		var x212 = this.block[51];
		var x312 = this.block[19];
		var x411 = this.block[11];
		var x511 = this.block[59];
		var x611 = this.block[43];
		var x711 = this.block[27];
		if((x112 | x212 | x312 | x411 | x511 | x611 | x711) == 0) {
			var x104 = (this.block[3] + 32 >> 6) + 128;
			x112 = x104 < 0 ? 0 : x104 > 255 ? 255 : x104;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
		} else {
			x011 = (this.block[3] << 8) + 8192;
			x811 = 565 * (x411 + x511) + 4;
			x411 = x811 + 2276 * x411 >> 3;
			x511 = x811 - 3406 * x511 >> 3;
			x811 = 2408 * (x611 + x711) + 4;
			x611 = x811 - 799 * x611 >> 3;
			x711 = x811 - 4017 * x711 >> 3;
			x811 = x011 + x112;
			x011 -= x112;
			x112 = 1108 * (x312 + x212) + 4;
			x212 = x112 - 3784 * x212 >> 3;
			x312 = x112 + 1568 * x312 >> 3;
			x112 = x411 + x611;
			x411 -= x611;
			x611 = x511 + x711;
			x511 -= x711;
			x711 = x811 + x312;
			x811 -= x312;
			x312 = x011 + x212;
			x011 -= x212;
			x212 = 181 * (x411 + x511) + 128 >> 8;
			x411 = 181 * (x411 - x511) + 128 >> 8;
			var x105 = (x711 + x112 >> 14) + 128;
			out.b[po4] = x105 < 0 ? 0 : x105 > 255 ? 255 : x105;
			po4 += stride3;
			var x106 = (x312 + x212 >> 14) + 128;
			out.b[po4] = x106 < 0 ? 0 : x106 > 255 ? 255 : x106;
			po4 += stride3;
			var x107 = (x011 + x411 >> 14) + 128;
			out.b[po4] = x107 < 0 ? 0 : x107 > 255 ? 255 : x107;
			po4 += stride3;
			var x108 = (x811 + x611 >> 14) + 128;
			out.b[po4] = x108 < 0 ? 0 : x108 > 255 ? 255 : x108;
			po4 += stride3;
			var x109 = (x811 - x611 >> 14) + 128;
			out.b[po4] = x109 < 0 ? 0 : x109 > 255 ? 255 : x109;
			po4 += stride3;
			var x113 = (x011 - x411 >> 14) + 128;
			out.b[po4] = x113 < 0 ? 0 : x113 > 255 ? 255 : x113;
			po4 += stride3;
			var x114 = (x312 - x212 >> 14) + 128;
			out.b[po4] = x114 < 0 ? 0 : x114 > 255 ? 255 : x114;
			po4 += stride3;
			var x115 = (x711 - x112 >> 14) + 128;
			out.b[po4] = x115 < 0 ? 0 : x115 > 255 ? 255 : x115;
		}
		var po5 = 4 + po;
		var stride4 = c.stride;
		var x012;
		var x812;
		var x116 = this.block[36] << 8;
		var x213 = this.block[52];
		var x313 = this.block[20];
		var x412 = this.block[12];
		var x512 = this.block[60];
		var x612 = this.block[44];
		var x712 = this.block[28];
		if((x116 | x213 | x313 | x412 | x512 | x612 | x712) == 0) {
			var x117 = (this.block[4] + 32 >> 6) + 128;
			x116 = x117 < 0 ? 0 : x117 > 255 ? 255 : x117;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
		} else {
			x012 = (this.block[4] << 8) + 8192;
			x812 = 565 * (x412 + x512) + 4;
			x412 = x812 + 2276 * x412 >> 3;
			x512 = x812 - 3406 * x512 >> 3;
			x812 = 2408 * (x612 + x712) + 4;
			x612 = x812 - 799 * x612 >> 3;
			x712 = x812 - 4017 * x712 >> 3;
			x812 = x012 + x116;
			x012 -= x116;
			x116 = 1108 * (x313 + x213) + 4;
			x213 = x116 - 3784 * x213 >> 3;
			x313 = x116 + 1568 * x313 >> 3;
			x116 = x412 + x612;
			x412 -= x612;
			x612 = x512 + x712;
			x512 -= x712;
			x712 = x812 + x313;
			x812 -= x313;
			x313 = x012 + x213;
			x012 -= x213;
			x213 = 181 * (x412 + x512) + 128 >> 8;
			x412 = 181 * (x412 - x512) + 128 >> 8;
			var x118 = (x712 + x116 >> 14) + 128;
			out.b[po5] = x118 < 0 ? 0 : x118 > 255 ? 255 : x118;
			po5 += stride4;
			var x119 = (x313 + x213 >> 14) + 128;
			out.b[po5] = x119 < 0 ? 0 : x119 > 255 ? 255 : x119;
			po5 += stride4;
			var x120 = (x012 + x412 >> 14) + 128;
			out.b[po5] = x120 < 0 ? 0 : x120 > 255 ? 255 : x120;
			po5 += stride4;
			var x121 = (x812 + x612 >> 14) + 128;
			out.b[po5] = x121 < 0 ? 0 : x121 > 255 ? 255 : x121;
			po5 += stride4;
			var x122 = (x812 - x612 >> 14) + 128;
			out.b[po5] = x122 < 0 ? 0 : x122 > 255 ? 255 : x122;
			po5 += stride4;
			var x123 = (x012 - x412 >> 14) + 128;
			out.b[po5] = x123 < 0 ? 0 : x123 > 255 ? 255 : x123;
			po5 += stride4;
			var x124 = (x313 - x213 >> 14) + 128;
			out.b[po5] = x124 < 0 ? 0 : x124 > 255 ? 255 : x124;
			po5 += stride4;
			var x125 = (x712 - x116 >> 14) + 128;
			out.b[po5] = x125 < 0 ? 0 : x125 > 255 ? 255 : x125;
		}
		var po6 = 5 + po;
		var stride5 = c.stride;
		var x013;
		var x813;
		var x126 = this.block[37] << 8;
		var x214 = this.block[53];
		var x314 = this.block[21];
		var x413 = this.block[13];
		var x513 = this.block[61];
		var x613 = this.block[45];
		var x713 = this.block[29];
		if((x126 | x214 | x314 | x413 | x513 | x613 | x713) == 0) {
			var x127 = (this.block[5] + 32 >> 6) + 128;
			x126 = x127 < 0 ? 0 : x127 > 255 ? 255 : x127;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
		} else {
			x013 = (this.block[5] << 8) + 8192;
			x813 = 565 * (x413 + x513) + 4;
			x413 = x813 + 2276 * x413 >> 3;
			x513 = x813 - 3406 * x513 >> 3;
			x813 = 2408 * (x613 + x713) + 4;
			x613 = x813 - 799 * x613 >> 3;
			x713 = x813 - 4017 * x713 >> 3;
			x813 = x013 + x126;
			x013 -= x126;
			x126 = 1108 * (x314 + x214) + 4;
			x214 = x126 - 3784 * x214 >> 3;
			x314 = x126 + 1568 * x314 >> 3;
			x126 = x413 + x613;
			x413 -= x613;
			x613 = x513 + x713;
			x513 -= x713;
			x713 = x813 + x314;
			x813 -= x314;
			x314 = x013 + x214;
			x013 -= x214;
			x214 = 181 * (x413 + x513) + 128 >> 8;
			x413 = 181 * (x413 - x513) + 128 >> 8;
			var x128 = (x713 + x126 >> 14) + 128;
			out.b[po6] = x128 < 0 ? 0 : x128 > 255 ? 255 : x128;
			po6 += stride5;
			var x129 = (x314 + x214 >> 14) + 128;
			out.b[po6] = x129 < 0 ? 0 : x129 > 255 ? 255 : x129;
			po6 += stride5;
			var x130 = (x013 + x413 >> 14) + 128;
			out.b[po6] = x130 < 0 ? 0 : x130 > 255 ? 255 : x130;
			po6 += stride5;
			var x131 = (x813 + x613 >> 14) + 128;
			out.b[po6] = x131 < 0 ? 0 : x131 > 255 ? 255 : x131;
			po6 += stride5;
			var x132 = (x813 - x613 >> 14) + 128;
			out.b[po6] = x132 < 0 ? 0 : x132 > 255 ? 255 : x132;
			po6 += stride5;
			var x133 = (x013 - x413 >> 14) + 128;
			out.b[po6] = x133 < 0 ? 0 : x133 > 255 ? 255 : x133;
			po6 += stride5;
			var x134 = (x314 - x214 >> 14) + 128;
			out.b[po6] = x134 < 0 ? 0 : x134 > 255 ? 255 : x134;
			po6 += stride5;
			var x135 = (x713 - x126 >> 14) + 128;
			out.b[po6] = x135 < 0 ? 0 : x135 > 255 ? 255 : x135;
		}
		var po7 = 6 + po;
		var stride6 = c.stride;
		var x014;
		var x814;
		var x136 = this.block[38] << 8;
		var x215 = this.block[54];
		var x315 = this.block[22];
		var x414 = this.block[14];
		var x514 = this.block[62];
		var x614 = this.block[46];
		var x714 = this.block[30];
		if((x136 | x215 | x315 | x414 | x514 | x614 | x714) == 0) {
			var x137 = (this.block[6] + 32 >> 6) + 128;
			x136 = x137 < 0 ? 0 : x137 > 255 ? 255 : x137;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
		} else {
			x014 = (this.block[6] << 8) + 8192;
			x814 = 565 * (x414 + x514) + 4;
			x414 = x814 + 2276 * x414 >> 3;
			x514 = x814 - 3406 * x514 >> 3;
			x814 = 2408 * (x614 + x714) + 4;
			x614 = x814 - 799 * x614 >> 3;
			x714 = x814 - 4017 * x714 >> 3;
			x814 = x014 + x136;
			x014 -= x136;
			x136 = 1108 * (x315 + x215) + 4;
			x215 = x136 - 3784 * x215 >> 3;
			x315 = x136 + 1568 * x315 >> 3;
			x136 = x414 + x614;
			x414 -= x614;
			x614 = x514 + x714;
			x514 -= x714;
			x714 = x814 + x315;
			x814 -= x315;
			x315 = x014 + x215;
			x014 -= x215;
			x215 = 181 * (x414 + x514) + 128 >> 8;
			x414 = 181 * (x414 - x514) + 128 >> 8;
			var x138 = (x714 + x136 >> 14) + 128;
			out.b[po7] = x138 < 0 ? 0 : x138 > 255 ? 255 : x138;
			po7 += stride6;
			var x139 = (x315 + x215 >> 14) + 128;
			out.b[po7] = x139 < 0 ? 0 : x139 > 255 ? 255 : x139;
			po7 += stride6;
			var x140 = (x014 + x414 >> 14) + 128;
			out.b[po7] = x140 < 0 ? 0 : x140 > 255 ? 255 : x140;
			po7 += stride6;
			var x141 = (x814 + x614 >> 14) + 128;
			out.b[po7] = x141 < 0 ? 0 : x141 > 255 ? 255 : x141;
			po7 += stride6;
			var x142 = (x814 - x614 >> 14) + 128;
			out.b[po7] = x142 < 0 ? 0 : x142 > 255 ? 255 : x142;
			po7 += stride6;
			var x143 = (x014 - x414 >> 14) + 128;
			out.b[po7] = x143 < 0 ? 0 : x143 > 255 ? 255 : x143;
			po7 += stride6;
			var x144 = (x315 - x215 >> 14) + 128;
			out.b[po7] = x144 < 0 ? 0 : x144 > 255 ? 255 : x144;
			po7 += stride6;
			var x145 = (x714 - x136 >> 14) + 128;
			out.b[po7] = x145 < 0 ? 0 : x145 > 255 ? 255 : x145;
		}
		var po8 = 7 + po;
		var stride7 = c.stride;
		var x015;
		var x815;
		var x146 = this.block[39] << 8;
		var x216 = this.block[55];
		var x316 = this.block[23];
		var x415 = this.block[15];
		var x515 = this.block[63];
		var x615 = this.block[47];
		var x715 = this.block[31];
		if((x146 | x216 | x316 | x415 | x515 | x615 | x715) == 0) {
			var x147 = (this.block[7] + 32 >> 6) + 128;
			x146 = x147 < 0 ? 0 : x147 > 255 ? 255 : x147;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
		} else {
			x015 = (this.block[7] << 8) + 8192;
			x815 = 565 * (x415 + x515) + 4;
			x415 = x815 + 2276 * x415 >> 3;
			x515 = x815 - 3406 * x515 >> 3;
			x815 = 2408 * (x615 + x715) + 4;
			x615 = x815 - 799 * x615 >> 3;
			x715 = x815 - 4017 * x715 >> 3;
			x815 = x015 + x146;
			x015 -= x146;
			x146 = 1108 * (x316 + x216) + 4;
			x216 = x146 - 3784 * x216 >> 3;
			x316 = x146 + 1568 * x316 >> 3;
			x146 = x415 + x615;
			x415 -= x615;
			x615 = x515 + x715;
			x515 -= x715;
			x715 = x815 + x316;
			x815 -= x316;
			x316 = x015 + x216;
			x015 -= x216;
			x216 = 181 * (x415 + x515) + 128 >> 8;
			x415 = 181 * (x415 - x515) + 128 >> 8;
			var x148 = (x715 + x146 >> 14) + 128;
			out.b[po8] = x148 < 0 ? 0 : x148 > 255 ? 255 : x148;
			po8 += stride7;
			var x149 = (x316 + x216 >> 14) + 128;
			out.b[po8] = x149 < 0 ? 0 : x149 > 255 ? 255 : x149;
			po8 += stride7;
			var x150 = (x015 + x415 >> 14) + 128;
			out.b[po8] = x150 < 0 ? 0 : x150 > 255 ? 255 : x150;
			po8 += stride7;
			var x151 = (x815 + x615 >> 14) + 128;
			out.b[po8] = x151 < 0 ? 0 : x151 > 255 ? 255 : x151;
			po8 += stride7;
			var x152 = (x815 - x615 >> 14) + 128;
			out.b[po8] = x152 < 0 ? 0 : x152 > 255 ? 255 : x152;
			po8 += stride7;
			var x153 = (x015 - x415 >> 14) + 128;
			out.b[po8] = x153 < 0 ? 0 : x153 > 255 ? 255 : x153;
			po8 += stride7;
			var x154 = (x316 - x216 >> 14) + 128;
			out.b[po8] = x154 < 0 ? 0 : x154 > 255 ? 255 : x154;
			po8 += stride7;
			var x155 = (x715 - x146 >> 14) + 128;
			out.b[po8] = x155 < 0 ? 0 : x155 > 255 ? 255 : x155;
		}
	}
	,notSupported: function() {
		throw new js__$Boot_HaxeError("This JPG file is not supported");
	}
	,njDecodeScan: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != this.ncomp) {
			this.notSupported();
		}
		this.pos += 1;
		this.size -= 1;
		this.length -= 1;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.dctabsel = this.bytes.b[this.pos + 1] >> 4 << 1;
			c.actabsel = (this.bytes.b[this.pos + 1] & 3) << 1 | 1;
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
		}
		var start = this.bytes.b[this.pos];
		var count = this.bytes.b[this.pos + 1];
		var other = this.bytes.b[this.pos + 2];
		if(!this.progressive && start != 0 || count != 63 - start || other != 0) {
			this.notSupported();
		}
		var count1 = this.length;
		this.pos += count1;
		this.size -= count1;
		this.length -= count1;
		var mbx = 0;
		var mby = 0;
		var rstcount = this.rstinterval;
		var nextrst = 0;
		while(true) {
			var _g2 = 0;
			var _g3 = this.ncomp;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var c1 = this.comps[i1];
				var _g21 = 0;
				var _g31 = c1.ssy;
				while(_g21 < _g31) {
					var sby = _g21++;
					var _g22 = 0;
					var _g32 = c1.ssx;
					while(_g22 < _g32) {
						var sbx = _g22++;
						this.njDecodeBlock(c1,(mby * c1.ssy + sby) * c1.stride + mbx * c1.ssx + sbx << 3);
					}
				}
			}
			if(++mbx >= this.mbwidth) {
				mbx = 0;
				if(++mby >= this.mbheight) {
					break;
				}
			}
			if(this.rstinterval != 0 && --rstcount == 0) {
				this.bufbits &= 248;
				var r = this.njShowBits(16);
				this.bufbits -= 16;
				var i2 = r;
				nextrst = nextrst + 1 & 7;
				rstcount = this.rstinterval;
				this.comps[0].dcpred = 0;
				this.comps[1].dcpred = 0;
				this.comps[2].dcpred = 0;
			}
		}
	}
	,njUpsampleH: function(c) {
		var xmax = c.width - 3;
		var cout = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var this1 = cout;
		var lout = this1;
		var this2 = c.pixels;
		var lin = this2;
		var pi = 0;
		var po = 0;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var x = 139 * lin.b[pi] + -11 * lin.b[pi + 1] + 64 >> 7;
			lout.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
			var x1 = 104 * lin.b[pi] + 27 * lin.b[pi + 1] + -3 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 1] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			var x2 = 28 * lin.b[pi] + 109 * lin.b[pi + 1] + -9 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 2] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			var _g2 = 0;
			var _g11 = xmax;
			while(_g2 < _g11) {
				var x3 = _g2++;
				var x4 = -9 * lin.b[pi + x3] + 111 * lin.b[pi + x3 + 1] + 29 * lin.b[pi + x3 + 2] + -3 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 3] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				var x5 = -3 * lin.b[pi + x3] + 29 * lin.b[pi + x3 + 1] + 111 * lin.b[pi + x3 + 2] + -9 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 4] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			}
			pi += c.stride;
			po += c.width << 1;
			var x6 = 28 * lin.b[pi - 1] + 109 * lin.b[pi - 2] + -9 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 3] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			var x7 = 104 * lin.b[pi - 1] + 27 * lin.b[pi - 2] + -3 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 2] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			var x8 = 139 * lin.b[pi - 1] + -11 * lin.b[pi - 2] + 64 >> 7;
			lout.b[po - 1] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.width <<= 1;
		c.stride = c.width;
		c.pixels = cout;
	}
	,njUpsampleV: function(c) {
		var w = c.width;
		var s1 = c.stride;
		var s2 = s1 + s1;
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var pi = 0;
		var po = 0;
		var this1 = out;
		var cout = this1;
		var this2 = c.pixels;
		var cin = this2;
		var _g = 0;
		var _g1 = w;
		while(_g < _g1) {
			var x = _g++;
			po = x;
			pi = po;
			var x1 = 139 * cin.b[pi] + -11 * cin.b[pi + s1] + 64 >> 7;
			cout.b[po] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po += w;
			var x2 = 104 * cin.b[pi] + 27 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po += w;
			var x3 = 28 * cin.b[pi] + 109 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po += w;
			pi += s1;
			var _g2 = 0;
			var _g11 = c.height - 2;
			while(_g2 < _g11) {
				var y = _g2++;
				var x4 = -9 * cin.b[pi - s1] + 111 * cin.b[pi] + 29 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				po += w;
				var x5 = -3 * cin.b[pi - s1] + 29 * cin.b[pi] + 111 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
				po += w;
				pi += s1;
			}
			pi += s1;
			var x6 = 28 * cin.b[pi] + 109 * cin.b[pi - s1] + -9 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po += w;
			var x7 = 104 * cin.b[pi] + 27 * cin.b[pi - s1] + -3 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			po += w;
			var x8 = 139 * cin.b[pi] + -11 * cin.b[pi - s1] + 64 >> 7;
			cout.b[po] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.height <<= 1;
		c.stride = c.width;
		c.pixels = out;
	}
	,njUpsample: function(c) {
		var xshift = 0;
		var yshift = 0;
		while(c.width < this.width) {
			c.width <<= 1;
			++xshift;
		}
		while(c.height < this.height) {
			c.height <<= 1;
			++yshift;
		}
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height));
		var this1 = c.pixels;
		var lin = this1;
		var pout = 0;
		var this2 = out;
		var lout = this2;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var pin = (y >> yshift) * c.stride;
			var _g2 = 0;
			var _g11 = c.width;
			while(_g2 < _g11) {
				var x = _g2++;
				lout.b[pout++] = lin.b[(x >> xshift) + pin];
			}
		}
		c.stride = c.width;
		c.pixels = out;
	}
	,njConvert: function() {
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			switch(this.filter._hx_index) {
			case 0:
				if(c.width < this.width || c.height < this.height) {
					this.njUpsample(c);
				}
				break;
			case 1:
				while(c.width < this.width || c.height < this.height) {
					if(c.width < this.width) {
						this.njUpsampleH(c);
					}
					if(c.height < this.height) {
						this.njUpsampleV(c);
					}
				}
				break;
			}
			if(c.width < this.width || c.height < this.height) {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var pixels = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height * 4));
		if(this.ncomp == 3) {
			var this1 = this.comps[0].pixels;
			var py = this1;
			var this2 = this.comps[1].pixels;
			var pcb = this2;
			var this3 = this.comps[2].pixels;
			var pcr = this3;
			var this4 = pixels;
			var pix = this4;
			var k1 = 0;
			var k2 = 0;
			var k3 = 0;
			var out = 0;
			var _g2 = 0;
			var _g3 = this.height;
			while(_g2 < _g3) {
				var yy = _g2++;
				var _g21 = 0;
				var _g31 = this.width;
				while(_g21 < _g31) {
					var x = _g21++;
					var y = py.b[k1++] << 8;
					var cb = pcb.b[k2++] - 128;
					var cr = pcr.b[k3++] - 128;
					var x1 = y + 359 * cr + 128 >> 8;
					var r = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
					var x2 = y - 88 * cb - 183 * cr + 128 >> 8;
					var g = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
					var x3 = y + 454 * cb + 128 >> 8;
					var b = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
					pix.b[out++] = b;
					pix.b[out++] = g;
					pix.b[out++] = r;
					pix.b[out++] = 255;
				}
				k1 += this.comps[0].stride - this.width;
				k2 += this.comps[1].stride - this.width;
				k3 += this.comps[2].stride - this.width;
			}
		} else {
			throw new js__$Boot_HaxeError("TODO");
		}
		return pixels;
	}
	,njDecode: function() {
		if(this.size < 2 || this.bytes.b[this.pos] != 255 || this.bytes.b[this.pos + 1] != 216) {
			throw new js__$Boot_HaxeError("This file is not a JPEG");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		_hx_loop1: while(true) {
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			switch(this.bytes.b[this.pos + (-1)]) {
			case 192:
				this.njDecodeSOF();
				break;
			case 194:
				this.progressive = true;
				if(this.progressive) {
					throw new js__$Boot_HaxeError("Unsupported progressive JPG");
				}
				if(this.vlctab[4] == null) {
					this.vlctab[4] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[5] == null) {
					this.vlctab[5] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[6] == null) {
					this.vlctab[6] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[7] == null) {
					this.vlctab[7] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				this.njDecodeSOF();
				break;
			case 195:
				throw new js__$Boot_HaxeError("Unsupported lossless JPG");
			case 196:
				this.njDecodeDHT();
				break;
			case 218:
				this.njDecodeScan();
				break _hx_loop1;
			case 219:
				this.njDecodeDQT();
				break;
			case 221:
				this.njDecodeDRI();
				break;
			case 254:
				this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
				this.pos += 2;
				this.size -= 2;
				this.length -= 2;
				var count = this.length;
				this.pos += count;
				this.size -= count;
				this.length -= count;
				break;
			default:
				switch(this.bytes.b[this.pos + (-1)] & 240) {
				case 192:
					throw new js__$Boot_HaxeError("Unsupported jpeg type " + (this.bytes.b[this.pos + (-1)] & 15));
				case 224:
					this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
					this.pos += 2;
					this.size -= 2;
					this.length -= 2;
					var count1 = this.length;
					this.pos += count1;
					this.size -= count1;
					this.length -= count1;
					break;
				default:
					throw new js__$Boot_HaxeError("Unsupported jpeg tag 0x" + StringTools.hex(this.bytes.b[this.pos + (-1)],2));
				}
			}
		}
		var pixels = this.njConvert();
		this.cleanup();
		return { pixels : pixels, width : this.width, height : this.height};
	}
	,__class__: hxd_res_NanoJpeg
};
var hxd_res_Sound = function(entry) {
	this.lastPlay = 0.;
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Sound"] = hxd_res_Sound;
hxd_res_Sound.__name__ = "hxd.res.Sound";
hxd_res_Sound.__super__ = hxd_res_Resource;
hxd_res_Sound.prototype = $extend(hxd_res_Resource.prototype,{
	getData: function() {
		if(this.data != null) {
			return this.data;
		}
		var bytes = this.entry.getBytes();
		switch(bytes.b[0]) {
		case 73:case 255:
			this.data = new hxd_snd_Mp3Data(bytes);
			break;
		case 79:
			throw new js__$Boot_HaxeError("OGG format requires -lib stb_ogg_sound (for " + this.entry.get_path() + ")");
		case 82:
			this.data = new hxd_snd_WavData(bytes);
			break;
		default:
		}
		if(this.data == null) {
			throw new js__$Boot_HaxeError("Unsupported sound format " + this.entry.get_path());
		}
		if(hxd_res_Sound.ENABLE_AUTO_WATCH) {
			this.watch($bind(this,this.watchCallb));
		}
		return this.data;
	}
	,play: function(loop,volume,channelGroup,soundGroup) {
		if(volume == null) {
			volume = 1.;
		}
		if(loop == null) {
			loop = false;
		}
		this.lastPlay = Date.now() / 1000;
		this.channel = hxd_snd_Manager.get().play(this,channelGroup,soundGroup);
		this.channel.loop = loop;
		this.channel.set_volume(volume);
		return this.channel;
	}
	,watchCallb: function() {
		var old = this.data;
		this.data = null;
		var data = this.getData();
		if(old != null) {
			if(old.channels != data.channels || old.samples != data.samples || old.sampleFormat != data.sampleFormat || old.samplingRate != data.samplingRate) {
				var manager = hxd_snd_Manager.get();
				var ch = manager.getAll(this);
				while(ch.hasNext()) {
					var ch1 = ch.next();
					ch1.duration = data.get_duration();
					ch1.set_position(ch1.position);
				}
			}
		}
	}
	,__class__: hxd_res_Sound
});
var hxd_snd_ChannelBase = function() {
	this.volume = 1.;
	this.bindedEffects = [];
	this.effects = [];
	this.mute = false;
	this.priority = 0.;
};
$hxClasses["hxd.snd.ChannelBase"] = hxd_snd_ChannelBase;
hxd_snd_ChannelBase.__name__ = "hxd.snd.ChannelBase";
hxd_snd_ChannelBase.prototype = {
	set_volume: function(v) {
		this.currentFade = null;
		return this.volume = v;
	}
	,updateCurrentVolume: function(now) {
		if(this.currentFade != null) {
			var f = this.currentFade;
			var dt = now - f.start;
			if(dt >= f.duration) {
				this.set_volume(f.targetVolume);
				if(f.onEnd != null) {
					f.onEnd();
				}
			} else {
				this.set_volume(f.startVolume + dt / f.duration * (f.targetVolume - f.startVolume));
				this.currentFade = f;
			}
		}
		this.currentVolume = this.volume;
	}
	,removeEffect: function(e) {
		HxOverrides.remove(this.effects,e);
	}
	,__class__: hxd_snd_ChannelBase
};
var hxd_snd_Channel = function() {
	this.queue = [];
	this.positionChanged = false;
	this.isLoading = false;
	this.isVirtual = false;
	this.lastStamp = 0.0;
	this.audibleVolume = 1.0;
	this.allowVirtual = true;
	this.loop = false;
	this.pause = false;
	this.position = 0.0;
	hxd_snd_ChannelBase.call(this);
	this.id = hxd_snd_Channel.ID++;
};
$hxClasses["hxd.snd.Channel"] = hxd_snd_Channel;
hxd_snd_Channel.__name__ = "hxd.snd.Channel";
hxd_snd_Channel.__super__ = hxd_snd_ChannelBase;
hxd_snd_Channel.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	onEnd: function() {
	}
	,set_position: function(v) {
		this.lastStamp = Date.now() / 1000;
		this.positionChanged = true;
		if(v > this.duration) {
			v = this.duration;
		} else if(v < 0) {
			v = 0;
		}
		return this.position = v;
	}
	,updateCurrentVolume: function(now) {
		if(this.pause && this.currentFade != null) {
			var f = this.currentFade;
			this.currentFade = null;
			this.updateCurrentVolume(now);
			this.currentFade = f;
		}
		hxd_snd_ChannelBase.prototype.updateCurrentVolume.call(this,now);
		this.channelGroup.updateCurrentVolume(now);
		this.currentVolume *= this.channelGroup.currentVolume * this.soundGroup.volume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.currentVolume *= e.getVolumeModifier();
			}
			var _g2 = 0;
			var _g3 = this.effects;
			while(_g2 < _g3.length) {
				var e1 = _g3[_g2];
				++_g2;
				this.currentVolume *= e1.getVolumeModifier();
			}
		}
	}
	,calcAudibleVolume: function(now) {
		this.updateCurrentVolume(now);
		this.audibleVolume = this.currentVolume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.audibleVolume = e.applyAudibleVolumeModifier(this.audibleVolume);
			}
			var _g2 = 0;
			var _g3 = this.effects;
			while(_g2 < _g3.length) {
				var e1 = _g3[_g2];
				++_g2;
				this.audibleVolume = e1.applyAudibleVolumeModifier(this.audibleVolume);
			}
		}
	}
	,__class__: hxd_snd_Channel
});
var hxd_snd_ChannelGroup = function(name) {
	hxd_snd_ChannelBase.call(this);
	this.name = name;
};
$hxClasses["hxd.snd.ChannelGroup"] = hxd_snd_ChannelGroup;
hxd_snd_ChannelGroup.__name__ = "hxd.snd.ChannelGroup";
hxd_snd_ChannelGroup.__super__ = hxd_snd_ChannelBase;
hxd_snd_ChannelGroup.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	__class__: hxd_snd_ChannelGroup
});
var hxd_snd_SampleFormat = $hxEnums["hxd.snd.SampleFormat"] = { __ename__ : true, __constructs__ : ["UI8","I16","F32"]
	,UI8: {_hx_index:0,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,I16: {_hx_index:1,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,F32: {_hx_index:2,__enum__:"hxd.snd.SampleFormat",toString:$estr}
};
hxd_snd_SampleFormat.__empty_constructs__ = [hxd_snd_SampleFormat.UI8,hxd_snd_SampleFormat.I16,hxd_snd_SampleFormat.F32];
var hxd_snd_Data = function() { };
$hxClasses["hxd.snd.Data"] = hxd_snd_Data;
hxd_snd_Data.__name__ = "hxd.snd.Data";
hxd_snd_Data.prototype = {
	isLoading: function() {
		return false;
	}
	,decode: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		if(sampleStart < 0 || sampleCount < 0 || outPos < 0 || outPos + sampleCount * bpp > out.length) {
			var s = "sampleStart = " + sampleStart;
			s += " sampleCount = " + sampleCount;
			s += " outPos = " + outPos;
			s += " bpp = " + bpp;
			s += " out.length = " + out.length;
			throw new js__$Boot_HaxeError(s);
		}
		if(sampleStart + sampleCount >= this.samples) {
			var count = 0;
			if(sampleStart < this.samples) {
				count = this.samples - sampleStart;
				this.decodeBuffer(out,outPos,sampleStart,count);
			}
			out.fill(outPos + count * bpp,(sampleCount - count) * bpp,0);
			return;
		}
		this.decodeBuffer(out,outPos,sampleStart,sampleCount);
	}
	,resample: function(rate,format,channels) {
		if(this.sampleFormat == format && this.samplingRate == rate && this.channels == channels) {
			return this;
		}
		var newSamples = Math.ceil(this.samples * (rate / this.samplingRate));
		var bpp = this.getBytesPerSample();
		var data = new haxe_io_Bytes(new ArrayBuffer(bpp * this.samples));
		this.decodeBuffer(data,0,0,this.samples);
		var out = channels * newSamples;
		var out1;
		switch(format._hx_index) {
		case 0:
			out1 = 1;
			break;
		case 1:
			out1 = 2;
			break;
		case 2:
			out1 = 4;
			break;
		}
		var out2 = new haxe_io_Bytes(new ArrayBuffer(out * out1));
		this.resampleBuffer(out2,0,data,0,rate,format,channels,this.samples);
		var data1 = new hxd_snd_WavData(null);
		data1.channels = channels;
		data1.samples = newSamples;
		data1.sampleFormat = format;
		data1.samplingRate = rate;
		data1.rawData = out2;
		return data1;
	}
	,resampleBuffer: function(out,outPos,input,inPos,rate,format,channels,samples) {
		var bpp = this.getBytesPerSample();
		var newSamples = Math.ceil(samples * (rate / this.samplingRate));
		var resample = samples != newSamples;
		if(!resample && this.sampleFormat == hxd_snd_SampleFormat.I16 && format == hxd_snd_SampleFormat.I16 && channels == 1 && this.channels == 2) {
			var r = inPos;
			var w = outPos;
			var _g = 0;
			var _g1 = samples;
			while(_g < _g1) {
				var i = _g++;
				var sl = input.getUInt16(r);
				r += 2;
				var sr = input.getUInt16(r);
				r += 2;
				var s;
				if((sl ^ sr) >= 32768) {
					if((sl & 32768) == 0) {
						sl = sl;
					} else {
						sl |= -65536;
					}
					if((sr & 32768) == 0) {
						sr = sr;
					} else {
						sr |= -65536;
					}
					s = sl + sr >> 1 & 65535;
				} else {
					s = sl + sr >> 1;
				}
				out.setUInt16(w,s);
				w += 2;
			}
			return;
		}
		var srcChannels = this.channels;
		var commonChannels = channels < srcChannels ? channels : srcChannels;
		var extraChannels = channels - commonChannels;
		var sval = 0.;
		var ival = 0;
		var _g2 = 0;
		var _g11 = newSamples;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var targetSample = i1 / (newSamples - 1) * (samples - 1);
			var isample = targetSample | 0;
			var offset = targetSample - isample;
			var srcPos = inPos + isample * bpp;
			if(isample == samples - 1) {
				resample = false;
			}
			var _g3 = 0;
			var _g12 = commonChannels;
			while(_g3 < _g12) {
				var k = _g3++;
				var sval1;
				var sval2 = 0.;
				switch(this.sampleFormat._hx_index) {
				case 0:
					sval1 = input.b[srcPos] / 255;
					if(resample) {
						sval2 = input.b[srcPos + bpp] / 255;
					}
					++srcPos;
					break;
				case 1:
					var v = input.getUInt16(srcPos);
					sval1 = ((v & 32768) == 0 ? v : v | -65536) / 32768;
					if(resample) {
						var v1 = input.getUInt16(srcPos + bpp);
						sval2 = ((v1 & 32768) == 0 ? v1 : v1 | -65536) / 32768;
					}
					srcPos += 2;
					break;
				case 2:
					sval1 = input.getFloat(srcPos);
					if(resample) {
						sval2 = input.getFloat(srcPos + bpp);
					}
					srcPos += 4;
					break;
				}
				sval = resample ? sval1 + offset * (sval2 - sval1) : sval1;
				switch(format._hx_index) {
				case 0:
					ival = (sval + 1) * 128 | 0;
					if(ival > 255) {
						ival = 255;
					}
					out.b[outPos++] = ival;
					break;
				case 1:
					ival = sval * 32768 | 0;
					if(ival > 32767) {
						ival = 32767;
					}
					ival &= 65535;
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
			var _g21 = 0;
			var _g31 = extraChannels;
			while(_g21 < _g31) {
				var i2 = _g21++;
				switch(format._hx_index) {
				case 0:
					out.b[outPos++] = ival;
					break;
				case 1:
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,getBytesPerSample: function() {
		var tmp;
		switch(this.sampleFormat._hx_index) {
		case 0:
			tmp = 1;
			break;
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 4;
			break;
		}
		return this.channels * tmp;
	}
	,load: function(onEnd) {
		onEnd();
	}
	,get_duration: function() {
		return this.samples / this.samplingRate;
	}
	,__class__: hxd_snd_Data
};
var hxd_snd_EffectDriver = function() {
};
$hxClasses["hxd.snd.EffectDriver"] = hxd_snd_EffectDriver;
hxd_snd_EffectDriver.__name__ = "hxd.snd.EffectDriver";
hxd_snd_EffectDriver.prototype = {
	acquire: function() {
	}
	,release: function() {
	}
	,update: function(e) {
	}
	,bind: function(e,source) {
	}
	,apply: function(e,source) {
	}
	,unbind: function(e,source) {
	}
	,__class__: hxd_snd_EffectDriver
};
var hxd_snd_DriverFeature = $hxEnums["hxd.snd.DriverFeature"] = { __ename__ : true, __constructs__ : ["MasterVolume"]
	,MasterVolume: {_hx_index:0,__enum__:"hxd.snd.DriverFeature",toString:$estr}
};
hxd_snd_DriverFeature.__empty_constructs__ = [hxd_snd_DriverFeature.MasterVolume];
var hxd_snd_Driver = function() { };
$hxClasses["hxd.snd.Driver"] = hxd_snd_Driver;
hxd_snd_Driver.__name__ = "hxd.snd.Driver";
hxd_snd_Driver.__isInterface__ = true;
hxd_snd_Driver.prototype = {
	__class__: hxd_snd_Driver
};
var hxd_snd_Effect = function(type) {
	this.refs = 0;
	this.priority = 0;
	this.retainTime = 0.0;
	this.lastStamp = 0.0;
	var managerDriver = hxd_snd_Manager.get().driver;
	if(managerDriver != null) {
		this.driver = managerDriver.getEffectDriver(type);
	}
};
$hxClasses["hxd.snd.Effect"] = hxd_snd_Effect;
hxd_snd_Effect.__name__ = "hxd.snd.Effect";
hxd_snd_Effect.prototype = {
	applyAudibleVolumeModifier: function(v) {
		return v;
	}
	,getVolumeModifier: function() {
		return 1;
	}
	,__class__: hxd_snd_Effect
};
var hxd_snd_Listener = function() {
	this.position = new h3d_Vector();
	this.velocity = new h3d_Vector();
	this.direction = new h3d_Vector(1,0,0);
	this.up = new h3d_Vector(0,0,1);
};
$hxClasses["hxd.snd.Listener"] = hxd_snd_Listener;
hxd_snd_Listener.__name__ = "hxd.snd.Listener";
hxd_snd_Listener.prototype = {
	__class__: hxd_snd_Listener
};
var hxd_snd_Source = function(driver) {
	this.start = 0;
	this.playing = false;
	this.volume = -1.0;
	this.id = hxd_snd_Source.ID++;
	this.handle = driver.createSource();
	this.buffers = [];
};
$hxClasses["hxd.snd.Source"] = hxd_snd_Source;
hxd_snd_Source.__name__ = "hxd.snd.Source";
hxd_snd_Source.prototype = {
	__class__: hxd_snd_Source
};
var hxd_snd_Buffer = function(driver) {
	this.handle = driver.createBuffer();
	this.refs = 0;
	this.lastStop = Date.now() / 1000;
};
$hxClasses["hxd.snd.Buffer"] = hxd_snd_Buffer;
hxd_snd_Buffer.__name__ = "hxd.snd.Buffer";
hxd_snd_Buffer.prototype = {
	dispose: function() {
		hxd_snd_Manager.get().driver.destroyBuffer(this.handle);
	}
	,__class__: hxd_snd_Buffer
};
var hxd_snd_Manager = function() {
	this.suspended = false;
	this.timeOffset = 0.;
	try {
		this.driver = new hxd_snd_webaudio_Driver();
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		if(typeof(e1) == "string") {
			var e2 = e1;
			this.driver = null;
		} else {
			throw e;
		}
	}
	this.masterVolume = 1.0;
	this.hasMasterVolume = this.driver == null ? true : this.driver.hasFeature(hxd_snd_DriverFeature.MasterVolume);
	this.masterSoundGroup = new hxd_snd_SoundGroup("master");
	this.masterChannelGroup = new hxd_snd_ChannelGroup("master");
	this.listener = new hxd_snd_Listener();
	this.soundBufferMap = new haxe_ds_StringMap();
	this.soundBufferKeys = [];
	this.freeStreamBuffers = [];
	this.effectGC = [];
	this.soundBufferCount = 0;
	if(this.driver != null) {
		this.sources = [];
		var _g = 0;
		var _g1 = hxd_snd_Manager.MAX_SOURCES;
		while(_g < _g1) {
			var i = _g++;
			this.sources.push(new hxd_snd_Source(this.driver));
		}
	}
	this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(24));
	this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * 2));
};
$hxClasses["hxd.snd.Manager"] = hxd_snd_Manager;
hxd_snd_Manager.__name__ = "hxd.snd.Manager";
hxd_snd_Manager.get = function() {
	if(hxd_snd_Manager.instance == null) {
		hxd_snd_Manager.instance = new hxd_snd_Manager();
		hxd_snd_Manager.instance.updateEvent = haxe_MainLoop.add(($_=hxd_snd_Manager.instance,$bind($_,$_.update)));
		hxd_snd_Manager.instance.updateEvent.isBlocking = false;
	}
	return hxd_snd_Manager.instance;
};
hxd_snd_Manager.regEffect = function(list,e) {
	var l = list;
	while(l != null) {
		if(l == e) {
			return list;
		}
		l = l.next;
	}
	e.next = list;
	return e;
};
hxd_snd_Manager.prototype = {
	getTmpBytes: function(size) {
		if(this.cachedBytes.length < size) {
			this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.cachedBytes;
	}
	,getResampleBytes: function(size) {
		if(this.resampleBytes.length < size) {
			this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.resampleBytes;
	}
	,getAll: function(sound) {
		var ch = this.channels;
		var result = [];
		while(ch != null) {
			if(ch.sound == sound) {
				result.push(ch);
			}
			ch = ch.next;
		}
		return new hxd_impl_ArrayIterator_$hxd_$snd_$Channel(result);
	}
	,play: function(sound,channelGroup,soundGroup) {
		if(soundGroup == null) {
			soundGroup = this.masterSoundGroup;
		}
		if(channelGroup == null) {
			channelGroup = this.masterChannelGroup;
		}
		var sdat = sound.getData();
		if(sdat.samples == 0) {
			throw new js__$Boot_HaxeError(Std.string(sound) + " has no samples");
		}
		var c = new hxd_snd_Channel();
		c.sound = sound;
		c.duration = sdat.get_duration();
		c.manager = this;
		c.soundGroup = soundGroup;
		c.channelGroup = channelGroup;
		c.next = this.channels;
		c.isLoading = sdat.isLoading();
		c.isVirtual = this.driver == null;
		this.channels = c;
		return c;
	}
	,updateVirtualChannels: function(now) {
		var c = this.channels;
		while(c != null) {
			if(c.pause || !c.isVirtual || c.isLoading) {
				c = c.next;
				continue;
			}
			var _g = c;
			var a = now - c.lastStamp;
			_g.set_position(_g.position + (a < 0.0 ? 0.0 : a));
			c.lastStamp = now;
			var next = c.next;
			while(c.position >= c.duration) {
				var _g1 = c;
				_g1.set_position(_g1.position - c.duration);
				c.onEnd();
				if(next != null && next.manager == null) {
					next = null;
				}
				if(c.queue.length > 0) {
					c.sound = c.queue.shift();
					c.duration = c.sound.getData().get_duration();
				} else if(!c.loop) {
					this.releaseChannel(c);
					break;
				}
			}
			c = next;
		}
	}
	,update: function() {
		if(this.timeOffset != 0) {
			var c = this.channels;
			while(c != null) {
				c.lastStamp += this.timeOffset;
				if(c.currentFade != null) {
					c.currentFade.start += this.timeOffset;
				}
				c = c.next;
			}
			var _g = 0;
			var _g1 = this.sources;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g11 = s.buffers;
				while(_g2 < _g11.length) {
					var b = _g11[_g2];
					++_g2;
					b.lastStop += this.timeOffset;
				}
			}
			this.timeOffset = 0;
		}
		this.now = Date.now() / 1000;
		if(this.driver == null) {
			this.updateVirtualChannels(this.now);
			return;
		}
		var _g3 = 0;
		var _g12 = this.sources;
		while(_g3 < _g12.length) {
			var s1 = _g12[_g3];
			++_g3;
			var c1 = s1.channel;
			if(c1 == null) {
				continue;
			}
			if(c1.positionChanged) {
				this.releaseSource(s1);
				continue;
			}
			var lastBuffer = null;
			var count = this.driver.getProcessedBuffers(s1.handle);
			var _g4 = 0;
			var _g13 = count;
			while(_g4 < _g13) {
				var i = _g4++;
				var b1 = this.unqueueBuffer(s1);
				if(b1 == null) {
					continue;
				}
				lastBuffer = b1;
				if(b1.isEnd) {
					c1.sound = b1.sound;
					c1.duration = b1.sound.getData().get_duration();
					c1.set_position(c1.duration);
					c1.positionChanged = false;
					c1.onEnd();
					s1.start = 0;
				}
			}
			if(s1.buffers.length == 0) {
				if(!lastBuffer.isEnd) {
					c1.set_position((lastBuffer.start + lastBuffer.samples) / lastBuffer.sampleRate);
					this.releaseSource(s1);
				} else if(c1.queue.length > 0) {
					c1.sound = c1.queue[0];
					c1.duration = c1.sound.getData().get_duration();
					c1.set_position(0);
					this.releaseSource(s1);
				} else if(c1.loop) {
					c1.set_position(0);
					this.releaseSource(s1);
				} else {
					this.releaseChannel(c1);
				}
				continue;
			}
			c1.sound = s1.buffers[0].sound;
			c1.duration = c1.sound.getData().get_duration();
			var playedSamples = this.driver.getPlayedSampleCount(s1.handle);
			if(playedSamples < 0) {
				playedSamples = 0;
			}
			c1.set_position((s1.start + playedSamples) / s1.buffers[0].sampleRate);
			c1.positionChanged = false;
			if(s1.buffers.length < hxd_snd_Manager.BUFFER_QUEUE_LENGTH) {
				var b2 = s1.buffers[s1.buffers.length - 1];
				if(!b2.isEnd) {
					this.queueBuffer(s1,b2.sound,b2.start + b2.samples);
				} else if(c1.queue.length > 0) {
					var snd = c1.queue[0];
					if(this.queueBuffer(s1,snd,0)) {
						c1.queue.shift();
					}
				} else if(c1.loop) {
					this.queueBuffer(s1,b2.sound,0);
				}
			}
		}
		var c2 = this.channels;
		while(c2 != null) {
			c2.calcAudibleVolume(this.now);
			if(c2.isLoading && !c2.sound.getData().isLoading()) {
				c2.isLoading = false;
			}
			c2.isVirtual = this.suspended || c2.pause || c2.mute || c2.channelGroup.mute || c2.allowVirtual && c2.audibleVolume < hxd_snd_Manager.VIRTUAL_VOLUME_THRESHOLD || c2.isLoading;
			c2 = c2.next;
		}
		var list = this.channels;
		var cmp = $bind(this,this.sortChannel);
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g5 = 0;
					var _g14 = insize;
					while(_g5 < _g14) {
						var i1 = _g5++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.channels = tmp;
		var audibleCount = 0;
		var c3 = this.channels;
		while(c3 != null && !c3.isVirtual) {
			if(++audibleCount > this.sources.length) {
				c3.isVirtual = true;
			} else if(c3.soundGroup.maxAudible >= 0) {
				if(c3.soundGroup.lastUpdate != this.now) {
					c3.soundGroup.lastUpdate = this.now;
					c3.soundGroup.numAudible = 0;
				}
				if(++c3.soundGroup.numAudible > c3.soundGroup.maxAudible) {
					c3.isVirtual = true;
					--audibleCount;
				}
			}
			c3 = c3.next;
		}
		var _g21 = 0;
		var _g31 = this.sources;
		while(_g21 < _g31.length) {
			var s2 = _g31[_g21];
			++_g21;
			if(s2.channel == null || !s2.channel.isVirtual) {
				continue;
			}
			this.releaseSource(s2);
		}
		var c4 = this.channels;
		while(c4 != null) {
			if(c4.source != null || c4.isVirtual) {
				c4 = c4.next;
				continue;
			}
			var s3 = null;
			var _g41 = 0;
			var _g51 = this.sources;
			while(_g41 < _g51.length) {
				var s21 = _g51[_g41];
				++_g41;
				if(s21.channel == null) {
					s3 = s21;
					break;
				}
			}
			if(s3 == null) {
				throw new js__$Boot_HaxeError("could not get a source");
			}
			s3.channel = c4;
			c4.source = s3;
			this.checkTargetFormat(c4.sound.getData(),c4.soundGroup.mono);
			s3.start = Math.floor(c4.position * this.targetRate);
			if(s3.start < 0) {
				s3.start = 0;
			}
			this.queueBuffer(s3,c4.sound,s3.start);
			c4.positionChanged = false;
			c4 = c4.next;
		}
		var usedEffects = null;
		var volume = this.hasMasterVolume ? 1. : this.masterVolume;
		var _g42 = 0;
		var _g52 = this.sources;
		while(_g42 < _g52.length) {
			var s4 = _g52[_g42];
			++_g42;
			var c5 = s4.channel;
			if(c5 == null) {
				continue;
			}
			var v = c5.currentVolume * volume;
			if(s4.volume != v) {
				if(v < 0) {
					v = 0;
				}
				s4.volume = v;
				this.driver.setSourceVolume(s4.handle,v);
			}
			if(!s4.playing) {
				this.driver.playSource(s4.handle);
				s4.playing = true;
			}
			var i2 = c5.bindedEffects.length;
			while(--i2 >= 0) {
				var e1 = c5.bindedEffects[i2];
				if(c5.effects.indexOf(e1) < 0 && c5.channelGroup.effects.indexOf(e1) < 0) {
					this.unbindEffect(c5,s4,e1);
				}
			}
			var _g43 = 0;
			var _g53 = c5.channelGroup.effects;
			while(_g43 < _g53.length) {
				var e2 = _g53[_g43];
				++_g43;
				if(c5.bindedEffects.indexOf(e2) < 0) {
					this.bindEffect(c5,s4,e2);
				}
			}
			var _g6 = 0;
			var _g7 = c5.effects;
			while(_g6 < _g7.length) {
				var e3 = _g7[_g6];
				++_g6;
				if(c5.bindedEffects.indexOf(e3) < 0) {
					this.bindEffect(c5,s4,e3);
				}
			}
			var _g8 = 0;
			var _g9 = c5.bindedEffects;
			while(_g8 < _g9.length) {
				var e4 = _g9[_g8];
				++_g8;
				usedEffects = hxd_snd_Manager.regEffect(usedEffects,e4);
			}
		}
		var list1 = usedEffects;
		var cmp1 = $bind(this,this.sortEffect);
		if(list1 == null) {
			usedEffects = null;
		} else {
			var insize1 = 1;
			var nmerges1;
			var psize1 = 0;
			var qsize1 = 0;
			var p1;
			var q1;
			var e5;
			var tail1;
			while(true) {
				p1 = list1;
				list1 = null;
				tail1 = null;
				nmerges1 = 0;
				while(p1 != null) {
					++nmerges1;
					q1 = p1;
					psize1 = 0;
					var _g10 = 0;
					var _g15 = insize1;
					while(_g10 < _g15) {
						var i3 = _g10++;
						++psize1;
						q1 = q1.next;
						if(q1 == null) {
							break;
						}
					}
					qsize1 = insize1;
					while(psize1 > 0 || qsize1 > 0 && q1 != null) {
						if(psize1 == 0) {
							e5 = q1;
							q1 = q1.next;
							--qsize1;
						} else if(qsize1 == 0 || q1 == null || cmp1(p1,q1) <= 0) {
							e5 = p1;
							p1 = p1.next;
							--psize1;
						} else {
							e5 = q1;
							q1 = q1.next;
							--qsize1;
						}
						if(tail1 != null) {
							tail1.next = e5;
						} else {
							list1 = e5;
						}
						tail1 = e5;
					}
					p1 = q1;
				}
				tail1.next = null;
				if(nmerges1 <= 1) {
					break;
				}
				insize1 *= 2;
			}
			usedEffects = list1;
		}
		var e6 = usedEffects;
		while(e6 != null) {
			e6.driver.update(e6);
			e6 = e6.next;
		}
		var _g61 = 0;
		var _g71 = this.sources;
		while(_g61 < _g71.length) {
			var s5 = _g71[_g61];
			++_g61;
			var c6 = s5.channel;
			if(c6 == null) {
				continue;
			}
			var _g62 = 0;
			var _g72 = c6.bindedEffects;
			while(_g62 < _g72.length) {
				var e7 = _g72[_g62];
				++_g62;
				e7.driver.apply(e7,s5.handle);
			}
		}
		var _g81 = 0;
		var _g91 = this.effectGC;
		while(_g81 < _g91.length) {
			var e8 = _g91[_g81];
			++_g81;
			if(this.now - e8.lastStamp > e8.retainTime) {
				e8.driver.release();
				HxOverrides.remove(this.effectGC,e8);
				break;
			}
		}
		this.updateVirtualChannels(this.now);
		this.listener.direction.normalize();
		this.listener.up.normalize();
		if(this.hasMasterVolume) {
			this.driver.setMasterVolume(this.masterVolume);
		}
		this.driver.setListenerParams(this.listener.position,this.listener.direction,this.listener.up,this.listener.velocity);
		this.driver.update();
		if(this.soundBufferCount >= hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE) {
			var now = Date.now() / 1000;
			var i4 = 0;
			while(i4 < this.soundBufferKeys.length) {
				var k = this.soundBufferKeys[i4];
				var _this = this.soundBufferMap;
				var b3 = __map_reserved[k] != null ? _this.getReserved(k) : _this.h[k];
				++i4;
				if(b3.refs > 0 || b3.lastStop + 60.0 > now) {
					continue;
				}
				this.soundBufferMap.remove(k);
				HxOverrides.remove(this.soundBufferKeys,k);
				--i4;
				b3.dispose();
				--this.soundBufferCount;
			}
		}
	}
	,progressiveDecodeBuffer: function(s,snd,start) {
		var data = snd.getData();
		var samples = Math.ceil(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT / hxd_snd_Manager.BUFFER_STREAM_SPLIT);
		if(s.streamStart != start || s.streamSound != snd) {
			s.streamSound = snd;
			s.streamStart = start;
			s.streamPos = start;
		}
		var end = start + hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(s.streamPos == end) {
			return true;
		}
		var bpp = data.getBytesPerSample();
		var reqSize = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * bpp;
		if(s.streamBuffer == null || s.streamBuffer.length < reqSize) {
			s.streamBuffer = new haxe_io_Bytes(new ArrayBuffer(reqSize));
			s.streamPos = start;
		}
		var remain = end - s.streamPos;
		if(remain > samples) {
			remain = samples;
		}
		data.decode(s.streamBuffer,(s.streamPos - start) * bpp,s.streamPos,remain);
		s.streamPos += remain;
		return s.streamPos == end;
	}
	,queueBuffer: function(s,snd,start) {
		var data = snd.getData();
		var sgroup = s.channel.soundGroup;
		var b = null;
		if(data.get_duration() <= hxd_snd_Manager.STREAM_DURATION) {
			b = this.getSoundBuffer(snd,sgroup);
			this.driver.queueBuffer(s.handle,b.handle,start,true);
		} else {
			if(s.buffers.length > 0 && hxd_snd_Manager.BUFFER_STREAM_SPLIT > 1 && !this.progressiveDecodeBuffer(s,snd,start)) {
				return false;
			}
			b = this.getStreamBuffer(s,snd,sgroup,start);
			this.driver.queueBuffer(s.handle,b.handle,0,b.isEnd);
		}
		s.buffers.push(b);
		return true;
	}
	,unqueueBuffer: function(s) {
		var b = s.buffers.shift();
		if(b == null) {
			return null;
		}
		this.driver.unqueueBuffer(s.handle,b.handle);
		if(b.isStream) {
			this.freeStreamBuffers.unshift(b);
		} else if(--b.refs == 0) {
			b.lastStop = Date.now() / 1000;
		}
		return b;
	}
	,bindEffect: function(c,s,e) {
		if(e.refs == 0 && !HxOverrides.remove(this.effectGC,e)) {
			e.driver.acquire();
		}
		++e.refs;
		e.driver.bind(e,s.handle);
		c.bindedEffects.push(e);
	}
	,unbindEffect: function(c,s,e) {
		e.driver.unbind(e,s.handle);
		HxOverrides.remove(c.bindedEffects,e);
		if(--e.refs == 0) {
			e.lastStamp = this.now;
			this.effectGC.push(e);
		}
	}
	,releaseSource: function(s) {
		if(s.channel != null) {
			var _g = 0;
			var _g1 = s.channel.bindedEffects.slice();
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.unbindEffect(s.channel,s,e);
			}
			s.channel.bindedEffects = [];
			s.channel.source = null;
			s.channel = null;
		}
		if(s.playing) {
			s.playing = false;
			this.driver.stopSource(s.handle);
			s.volume = -1.0;
		}
		while(s.buffers.length > 0) this.unqueueBuffer(s);
	}
	,checkTargetFormat: function(dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		this.targetRate = dat.samplingRate;
		this.targetChannels = forceMono || dat.channels == 1 ? 1 : 2;
		var tmp;
		switch(dat.sampleFormat._hx_index) {
		case 0:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 1:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		case 2:
			tmp = hxd_snd_SampleFormat.F32;
			break;
		}
		this.targetFormat = tmp;
		if(this.targetChannels == dat.channels && this.targetFormat == dat.sampleFormat) {
			return this.targetRate == dat.samplingRate;
		} else {
			return false;
		}
	}
	,getSoundBuffer: function(snd,grp) {
		var _gthis = this;
		var data = snd.getData();
		var mono = grp.mono;
		var key = snd.entry.get_path();
		if(mono && data.channels != 1) {
			key += "mono";
		}
		var _this = this.soundBufferMap;
		var b = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = false;
			b.isEnd = true;
			b.sound = snd;
			data.load(function() {
				_gthis.fillSoundBuffer(b,data,mono);
			});
			var _this1 = this.soundBufferMap;
			if(__map_reserved[key] != null) {
				_this1.setReserved(key,b);
			} else {
				_this1.h[key] = b;
			}
			this.soundBufferKeys.push(key);
			++this.soundBufferCount;
		}
		++b.refs;
		return b;
	}
	,fillSoundBuffer: function(buf,dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		if(!this.checkTargetFormat(dat,forceMono)) {
			dat = dat.resample(this.targetRate,this.targetFormat,this.targetChannels);
		}
		var length = dat.samples * dat.getBytesPerSample();
		var bytes = this.getTmpBytes(length);
		dat.decode(bytes,0,0,dat.samples);
		this.driver.setBufferData(buf.handle,bytes,length,this.targetFormat,this.targetChannels,this.targetRate);
		buf.sampleRate = this.targetRate;
		buf.samples = dat.samples;
	}
	,getStreamBuffer: function(src,snd,grp,start) {
		var data = snd.getData();
		var b = this.freeStreamBuffers.shift();
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = true;
		}
		var samples = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(start + samples >= data.samples) {
			samples = data.samples - start;
			b.isEnd = true;
		} else {
			b.isEnd = false;
		}
		b.sound = snd;
		b.samples = samples;
		b.start = start;
		var size = samples * data.getBytesPerSample();
		var bytes;
		if(src.streamSound == snd && src.streamStart == start) {
			while(!this.progressiveDecodeBuffer(src,snd,start)) {
			}
			bytes = src.streamBuffer;
		} else {
			bytes = this.getTmpBytes(size);
			data.decode(bytes,0,start,samples);
		}
		if(!this.checkTargetFormat(data,grp.mono)) {
			var size1 = Math.ceil(samples * (this.targetRate / data.samplingRate)) * this.targetChannels;
			var size2;
			switch(this.targetFormat._hx_index) {
			case 0:
				size2 = 1;
				break;
			case 1:
				size2 = 2;
				break;
			case 2:
				size2 = 4;
				break;
			}
			size = size1 * size2;
			var resampleBytes = this.getResampleBytes(size);
			data.resampleBuffer(resampleBytes,0,bytes,0,this.targetRate,this.targetFormat,this.targetChannels,samples);
			bytes = resampleBytes;
		}
		this.driver.setBufferData(b.handle,bytes,size,this.targetFormat,this.targetChannels,this.targetRate);
		b.sampleRate = this.targetRate;
		return b;
	}
	,sortChannel: function(a,b) {
		if(a.isVirtual != b.isVirtual) {
			if(a.isVirtual) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.channelGroup.priority != b.channelGroup.priority) {
			if(a.channelGroup.priority < b.channelGroup.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.priority != b.priority) {
			if(a.priority < b.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.audibleVolume != b.audibleVolume) {
			if(a.audibleVolume < b.audibleVolume) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.id < b.id) {
			return 1;
		} else {
			return -1;
		}
	}
	,sortEffect: function(a,b) {
		return b.priority - a.priority;
	}
	,releaseChannel: function(c) {
		if(c.manager == null) {
			return;
		}
		if(this.channels == c) {
			this.channels = c.next;
		} else {
			var prev = this.channels;
			while(prev.next != c) prev = prev.next;
			prev.next = c.next;
		}
		var _g = 0;
		var _g1 = c.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			c.removeEffect(e);
		}
		if(c.source != null) {
			this.releaseSource(c.source);
		}
		c.next = null;
		c.manager = null;
		c.effects = null;
		c.bindedEffects = null;
		c.currentFade = null;
		var snd = c.sound;
		if(snd != null && snd.channel == c) {
			snd.channel = null;
		}
	}
	,__class__: hxd_snd_Manager
};
var hxd_snd_Mp3Data = function(bytes) {
	var mp = new format_mp3_Reader(new haxe_io_BytesInput(bytes)).read();
	this.samples = mp.sampleCount;
	var frame = mp.frames[0].data;
	var lame = -1;
	var _g = 0;
	var _g1 = frame.length - 24;
	while(_g < _g1) {
		var i = _g++;
		if(frame.b[i] == 76 && frame.b[i + 1] == 65 && frame.b[i + 2] == 77 && frame.b[i + 3] == 69) {
			lame = i;
			break;
		}
	}
	if(lame >= 0) {
		var startEnd = frame.b[lame + 21] << 16 | frame.b[lame + 22] << 8 | frame.b[lame + 23];
		var start = startEnd >> 12;
		var end = startEnd & 4095;
		this.samples -= start + end + 1152;
	}
	var header = mp.frames[0].header;
	this.sampleFormat = hxd_snd_SampleFormat.F32;
	this.samplingRate = format_mp3_MPEG.srEnum2Num(header.samplingRate);
	this.channels = header.channelMode == format_mp3_ChannelMode.Mono ? 1 : 2;
	var ctx = hxd_snd_webaudio_Context.get();
	if(ctx == null) {
		return;
	}
	ctx.decodeAudioData(bytes.b.bufferValue,$bind(this,this.processBuffer));
	var decodedRate = ctx.sampleRate | 0;
	this.samples = Math.ceil(this.samples * decodedRate / this.samplingRate);
	this.samplingRate = decodedRate;
};
$hxClasses["hxd.snd.Mp3Data"] = hxd_snd_Mp3Data;
hxd_snd_Mp3Data.__name__ = "hxd.snd.Mp3Data";
hxd_snd_Mp3Data.__super__ = hxd_snd_Data;
hxd_snd_Mp3Data.prototype = $extend(hxd_snd_Data.prototype,{
	isLoading: function() {
		return this.buffer == null;
	}
	,load: function(onEnd) {
		if(this.buffer != null) {
			onEnd();
		} else {
			this.onEnd = onEnd;
		}
	}
	,processBuffer: function(buf) {
		var left = buf.getChannelData(0);
		this.samples = buf.length;
		if(this.channels == 1) {
			this.buffer = haxe_io_Bytes.ofData(left.buffer);
			return;
		}
		var right = buf.numberOfChannels < 2 ? left : buf.getChannelData(1);
		var join = new Float32Array(left.length * 2);
		var w = 0;
		var _g = 0;
		var _g1 = buf.length;
		while(_g < _g1) {
			var i = _g++;
			join[w++] = left[i];
			join[w++] = right[i];
		}
		this.buffer = haxe_io_Bytes.ofData(join.buffer);
		if(this.onEnd != null) {
			this.onEnd();
			this.onEnd = null;
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		if(this.buffer == null) {
			out.fill(outPos,sampleCount * 4 * this.channels,0);
		} else {
			out.blit(outPos,this.buffer,sampleStart * 4 * this.channels,sampleCount * 4 * this.channels);
		}
	}
	,__class__: hxd_snd_Mp3Data
});
var hxd_snd_SoundGroup = function(name) {
	this.name = name;
	this.maxAudible = -1;
	this.volume = 1;
	this.mono = false;
};
$hxClasses["hxd.snd.SoundGroup"] = hxd_snd_SoundGroup;
hxd_snd_SoundGroup.__name__ = "hxd.snd.SoundGroup";
hxd_snd_SoundGroup.prototype = {
	__class__: hxd_snd_SoundGroup
};
var hxd_snd_WavData = function(bytes) {
	if(bytes != null) {
		this.init(new format_wav_Reader(new haxe_io_BytesInput(bytes)).read());
	}
};
$hxClasses["hxd.snd.WavData"] = hxd_snd_WavData;
hxd_snd_WavData.__name__ = "hxd.snd.WavData";
hxd_snd_WavData.__super__ = hxd_snd_Data;
hxd_snd_WavData.prototype = $extend(hxd_snd_Data.prototype,{
	init: function(d) {
		var h = d.header;
		this.samplingRate = h.samplingRate;
		this.channels = h.channels;
		var tmp;
		switch(h.bitsPerSample) {
		case 8:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 16:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported WAV " + h.bitsPerSample + " bits");
		}
		this.sampleFormat = tmp;
		this.rawData = d.data;
		this.samples = this.rawData.length / this.getBytesPerSample() | 0;
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		out.blit(outPos,this.rawData,sampleStart * bpp,sampleCount * bpp);
	}
	,__class__: hxd_snd_WavData
});
var hxd_snd_effect_LowPass = function() {
	hxd_snd_Effect.call(this,"lowpass");
	this.priority = 100;
	this.gainHF = 1.0;
};
$hxClasses["hxd.snd.effect.LowPass"] = hxd_snd_effect_LowPass;
hxd_snd_effect_LowPass.__name__ = "hxd.snd.effect.LowPass";
hxd_snd_effect_LowPass.__super__ = hxd_snd_Effect;
hxd_snd_effect_LowPass.prototype = $extend(hxd_snd_Effect.prototype,{
	__class__: hxd_snd_effect_LowPass
});
var hxd_snd_effect_Pitch = function(value) {
	if(value == null) {
		value = 1.0;
	}
	hxd_snd_Effect.call(this,"pitch");
	this.value = value;
};
$hxClasses["hxd.snd.effect.Pitch"] = hxd_snd_effect_Pitch;
hxd_snd_effect_Pitch.__name__ = "hxd.snd.effect.Pitch";
hxd_snd_effect_Pitch.__super__ = hxd_snd_Effect;
hxd_snd_effect_Pitch.prototype = $extend(hxd_snd_Effect.prototype,{
	__class__: hxd_snd_effect_Pitch
});
var hxd_snd_effect_Spatialization = function() {
	hxd_snd_Effect.call(this,"spatialization");
	this.position = new h3d_Vector();
	this.velocity = new h3d_Vector();
	this.direction = new h3d_Vector();
	this.referenceDistance = 1.0;
	this.rollOffFactor = 1.0;
};
$hxClasses["hxd.snd.effect.Spatialization"] = hxd_snd_effect_Spatialization;
hxd_snd_effect_Spatialization.__name__ = "hxd.snd.effect.Spatialization";
hxd_snd_effect_Spatialization.__super__ = hxd_snd_Effect;
hxd_snd_effect_Spatialization.prototype = $extend(hxd_snd_Effect.prototype,{
	getVolumeModifier: function() {
		if(this.fadeDistance == null) {
			return 1.;
		}
		var _this = hxd_snd_Manager.get().listener.position;
		var v = this.position;
		var dx = v.x - _this.x;
		var dy = v.y - _this.y;
		var dz = v.z - _this.z;
		var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		if(this.maxDistance != null) {
			dist -= this.maxDistance;
		} else {
			dist -= this.referenceDistance;
		}
		var volume = 1 - dist / this.fadeDistance;
		if(volume > 1) {
			volume = 1;
		}
		if(volume < 0) {
			volume = 0;
		}
		return volume;
	}
	,applyAudibleVolumeModifier: function(v) {
		var _this = hxd_snd_Manager.get().listener.position;
		var v1 = this.position;
		var dx = v1.x - _this.x;
		var dy = v1.y - _this.y;
		var dz = v1.z - _this.z;
		var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		var b = this.referenceDistance;
		dist = dist < b ? b : dist;
		if(this.maxDistance != null) {
			var b1 = this.maxDistance;
			dist = dist > b1 ? b1 : dist;
		}
		var volume = this.referenceDistance / (this.referenceDistance + this.rollOffFactor * (dist - this.referenceDistance));
		return v * volume;
	}
	,__class__: hxd_snd_effect_Spatialization
});
var hxd_snd_webaudio_BufferHandle = function() {
};
$hxClasses["hxd.snd.webaudio.BufferHandle"] = hxd_snd_webaudio_BufferHandle;
hxd_snd_webaudio_BufferHandle.__name__ = "hxd.snd.webaudio.BufferHandle";
hxd_snd_webaudio_BufferHandle.prototype = {
	__class__: hxd_snd_webaudio_BufferHandle
};
var hxd_snd_webaudio_SourceHandle = function() {
	this.buffers = [];
	this.sampleOffset = 0;
	this.pitch = 1;
	this.firstPlay = true;
};
$hxClasses["hxd.snd.webaudio.SourceHandle"] = hxd_snd_webaudio_SourceHandle;
hxd_snd_webaudio_SourceHandle.__name__ = "hxd.snd.webaudio.SourceHandle";
hxd_snd_webaudio_SourceHandle.prototype = {
	updateDestination: function() {
		this.destination = this.gain;
		if(this.lowPass != null) {
			this.lowPass.connect(this.destination);
			this.destination = this.lowPass;
		}
		if(this.panner != null) {
			this.panner.connect(this.destination);
			this.destination = this.panner;
		}
		this.gain.connect(hxd_snd_webaudio_Context.destination);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.node != null) {
				b.restart(this);
			}
		}
	}
	,applyPitch: function() {
		var t = 0.;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			t = b.readjust(t,this);
		}
	}
	,__class__: hxd_snd_webaudio_SourceHandle
};
var hxd_snd_webaudio_BufferPlayback = function() {
};
$hxClasses["hxd.snd.webaudio.BufferPlayback"] = hxd_snd_webaudio_BufferPlayback;
hxd_snd_webaudio_BufferPlayback.__name__ = "hxd.snd.webaudio.BufferPlayback";
hxd_snd_webaudio_BufferPlayback.prototype = {
	get_currentSample: function() {
		if(this.consumed) {
			return this.buffer.samples;
		}
		if(this.node == null || !this.dirty || this.node.context.currentTime < this.lastTime) {
			return 0;
		}
		this.lastSamples += Math.floor((this.node.context.currentTime - this.lastTime) * this.buffer.inst.sampleRate * this.node.playbackRate.value);
		this.lastTime = this.node.context.currentTime;
		return this.lastSamples;
	}
	,set: function(buf,grainOffset) {
		this.buffer = buf;
		this.offset = isNaN(grainOffset) ? 0 : grainOffset;
		this.dirty = false;
		this.consumed = false;
		this.starts = 0;
		this.ends = 0;
	}
	,start: function(ctx,source,time) {
		this.dirty = true;
		this.consumed = false;
		if(this.node != null) {
			this.stop();
		}
		if(source.firstPlay && this.buffer.samples > 10) {
			source.firstPlay = false;
			var _g = [];
			var _g1 = 0;
			var _g2 = this.buffer.inst.numberOfChannels;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(this.buffer.inst.getChannelData(i));
			}
			var channels = _g;
			var j = 0;
			var fade = 0.;
			while(j < 10) {
				var i1 = 0;
				while(i1 < channels.length) {
					channels[i1][j] *= fade;
					++i1;
				}
				++j;
				fade += 0.1;
				if(fade > 1) {
					fade = 1;
				}
			}
		}
		this.node = ctx.createBufferSource();
		this.node.buffer = this.buffer.inst;
		this.node.addEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.connect(source.destination);
		this.node.playbackRate.value = source.pitch;
		this.node.start(time,this.offset);
		this.lastSamples = 0;
		this.lastTime = time;
		this.starts = time;
		return this.ends = time + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	,readjust: function(time,source) {
		if(this.consumed || this.node == null) {
			return this.ends;
		}
		var ctx = source.driver.ctx;
		var shiftTime = ctx.currentTime;
		this.node.playbackRate.setValueAtTime(source.pitch,shiftTime);
		var elapsed = shiftTime - this.starts;
		if(elapsed < 0) {
			return this.start(ctx,source,time == 0 ? shiftTime : time);
		}
		this.starts = shiftTime - elapsed / source.pitch;
		return this.ends = this.starts + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	,restart: function(source) {
		if(this.consumed || this.node == null) {
			return;
		}
		var ctx = hxd_snd_webaudio_Context.get();
		if(ctx.currentTime > this.starts) {
			this.offset += (ctx.currentTime - this.starts) * source.pitch;
			this.start(ctx,source,ctx.currentTime);
		} else {
			this.start(ctx,source,this.starts);
		}
	}
	,stop: function(immediate) {
		if(immediate == null) {
			immediate = true;
		}
		if(this.node != null) {
			this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
			if(immediate) {
				this.node.disconnect();
			} else {
				this.node.stop();
			}
			this.node = null;
		}
	}
	,onBufferConsumed: function(e) {
		this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.disconnect();
		this.node = null;
		this.consumed = true;
	}
	,clear: function() {
		this.buffer = null;
		this.node = null;
	}
	,__class__: hxd_snd_webaudio_BufferPlayback
};
var hxd_snd_webaudio_Context = function() { };
$hxClasses["hxd.snd.webaudio.Context"] = hxd_snd_webaudio_Context;
hxd_snd_webaudio_Context.__name__ = "hxd.snd.webaudio.Context";
hxd_snd_webaudio_Context.get = function() {
	if(hxd_snd_webaudio_Context.ctx == null) {
		try {
			hxd_snd_webaudio_Context.ctx = new AudioContext();
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			try {
				hxd_snd_webaudio_Context.ctx = new window.webkitAudioContext();
			} catch( e2 ) {
				var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
				hxd_snd_webaudio_Context.ctx = null;
			}
		}
		if(hxd_snd_webaudio_Context.ctx == null) {
			throw new js__$Boot_HaxeError("WebAudio API not available in this browser!");
		}
		if(hxd_snd_webaudio_Context.ctx.state == "suspended") {
			hxd_snd_webaudio_Context.waitForPageInput();
		}
		hxd_snd_webaudio_Context.ctx.addEventListener("statechange",function(_) {
			if(hxd_snd_webaudio_Context.ctx.state == "suspended") {
				hxd_snd_webaudio_Context.waitForPageInput();
			}
		});
		hxd_snd_webaudio_Context.bufferPool = [];
		hxd_snd_webaudio_Context.gainPool = [];
		hxd_snd_webaudio_Context.masterGain = hxd_snd_webaudio_Context.ctx.createGain();
		hxd_snd_webaudio_Context.masterGain.connect(hxd_snd_webaudio_Context.ctx.destination);
		hxd_snd_webaudio_Context.destination = hxd_snd_webaudio_Context.masterGain;
	}
	return hxd_snd_webaudio_Context.ctx;
};
hxd_snd_webaudio_Context.waitForPageInput = function() {
	if(!hxd_snd_webaudio_Context.suspended) {
		window.document.addEventListener("click",hxd_snd_webaudio_Context.resumeContext);
		window.document.addEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.addEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.addEventListener("touchend",hxd_snd_webaudio_Context.resumeContext);
		hxd_snd_webaudio_Context.suspended = true;
	}
};
hxd_snd_webaudio_Context.resumeContext = function(_) {
	if(hxd_snd_webaudio_Context.suspended) {
		if(hxd_snd_webaudio_Context.ctx != null) {
			hxd_snd_webaudio_Context.ctx.resume();
		}
		window.document.removeEventListener("click",hxd_snd_webaudio_Context.resumeContext);
		window.document.removeEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.removeEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.removeEventListener("touchend",hxd_snd_webaudio_Context.resumeContext);
		hxd_snd_webaudio_Context.suspended = false;
	}
};
hxd_snd_webaudio_Context.getBuffer = function(channels,sampleCount,rate) {
	var _g = 0;
	var _g1 = hxd_snd_webaudio_Context.bufferPool;
	while(_g < _g1.length) {
		var pool = _g1[_g];
		++_g;
		if(pool.channels == channels && pool.samples == sampleCount && pool.rate == rate) {
			if(pool.pool.length != 0) {
				return pool.pool.pop();
			} else {
				return hxd_snd_webaudio_Context.ctx.createBuffer(channels,sampleCount,rate);
			}
		}
	}
	var pool1 = new hxd_snd_webaudio__$Context_BufferPool(channels,sampleCount,rate);
	hxd_snd_webaudio_Context.bufferPool.push(pool1);
	return hxd_snd_webaudio_Context.ctx.createBuffer(channels,sampleCount,rate);
};
hxd_snd_webaudio_Context.putBuffer = function(buf) {
	var rate = buf.sampleRate | 0;
	var _g = 0;
	var _g1 = hxd_snd_webaudio_Context.bufferPool;
	while(_g < _g1.length) {
		var pool = _g1[_g];
		++_g;
		if(pool.channels == buf.numberOfChannels && pool.samples == buf.length && pool.rate == rate) {
			pool.pool.push(buf);
			break;
		}
	}
};
var hxd_snd_webaudio__$Context_BufferPool = function(channels,samples,rate) {
	this.pool = [];
	this.channels = channels;
	this.samples = samples;
	this.rate = rate;
};
$hxClasses["hxd.snd.webaudio._Context.BufferPool"] = hxd_snd_webaudio__$Context_BufferPool;
hxd_snd_webaudio__$Context_BufferPool.__name__ = "hxd.snd.webaudio._Context.BufferPool";
hxd_snd_webaudio__$Context_BufferPool.prototype = {
	__class__: hxd_snd_webaudio__$Context_BufferPool
};
var hxd_snd_webaudio_Driver = function() {
	this.playbackPool = [];
	this.ctx = hxd_snd_webaudio_Context.get();
};
$hxClasses["hxd.snd.webaudio.Driver"] = hxd_snd_webaudio_Driver;
hxd_snd_webaudio_Driver.__name__ = "hxd.snd.webaudio.Driver";
hxd_snd_webaudio_Driver.__interfaces__ = [hxd_snd_Driver];
hxd_snd_webaudio_Driver.prototype = {
	hasFeature: function(d) {
		return true;
	}
	,setMasterVolume: function(value) {
		hxd_snd_webaudio_Context.masterGain.gain.value = value;
	}
	,setListenerParams: function(position,direction,up,velocity) {
		this.ctx.listener.setPosition(-position.x,position.y,position.z);
		this.ctx.listener.setOrientation(-direction.x,direction.y,direction.z,-up.x,up.y,up.z);
	}
	,createSource: function() {
		var s = new hxd_snd_webaudio_SourceHandle();
		s.driver = this;
		s.gain = hxd_snd_webaudio_Context.gainPool.length != 0 ? hxd_snd_webaudio_Context.gainPool.pop() : hxd_snd_webaudio_Context.ctx.createGain();
		s.updateDestination();
		return s;
	}
	,playSource: function(source) {
		if(!source.playing) {
			source.playing = true;
			if(source.buffers.length != 0) {
				var time = this.ctx.currentTime;
				var _g = 0;
				var _g1 = source.buffers;
				while(_g < _g1.length) {
					var b = _g1[_g];
					++_g;
					if(b.consumed) {
						continue;
					}
					time = b.start(this.ctx,source,time);
				}
			}
		}
	}
	,stopSource: function(source) {
		source.playing = false;
		source.sampleOffset = 0;
	}
	,setSourceVolume: function(source,value) {
		source.gain.gain.value = value;
	}
	,createBuffer: function() {
		var b = new hxd_snd_webaudio_BufferHandle();
		b.samples = 0;
		return b;
	}
	,setBufferData: function(buffer,data,size,format,channelCount,samplingRate) {
		var sampleCount;
		switch(format._hx_index) {
		case 0:
			sampleCount = 1;
			break;
		case 1:
			sampleCount = 2;
			break;
		case 2:
			sampleCount = 4;
			break;
		}
		var sampleCount1 = size / sampleCount / channelCount | 0;
		buffer.samples = sampleCount1;
		if(sampleCount1 == 0) {
			return;
		}
		if(buffer.inst == null) {
			buffer.inst = hxd_snd_webaudio_Context.getBuffer(channelCount,sampleCount1,samplingRate);
		} else if(buffer.inst.sampleRate != samplingRate || buffer.inst.numberOfChannels != channelCount || buffer.inst.length != sampleCount1) {
			hxd_snd_webaudio_Context.putBuffer(buffer.inst);
			buffer.inst = hxd_snd_webaudio_Context.getBuffer(channelCount,sampleCount1,samplingRate);
		}
		switch(format._hx_index) {
		case 0:
			var ui8 = new Uint8Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn = buffer.inst.getChannelData(0);
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					chn[i] = ui8[i] / 255;
				}
			} else {
				var left = buffer.inst.getChannelData(0);
				var right = buffer.inst.getChannelData(1);
				var r = 0;
				var _g2 = 0;
				var _g11 = sampleCount1;
				while(_g2 < _g11) {
					var i1 = _g2++;
					left[i1] = ui8[r] / 255;
					right[i1] = ui8[r + 1] / 255;
					r += channelCount;
				}
			}
			break;
		case 1:
			var i16 = new Int16Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn1 = buffer.inst.getChannelData(0);
				var _g3 = 0;
				var _g12 = sampleCount1;
				while(_g3 < _g12) {
					var i2 = _g3++;
					chn1[i2] = i16[i2] / 32768;
				}
			} else {
				var left1 = buffer.inst.getChannelData(0);
				var right1 = buffer.inst.getChannelData(1);
				var r1 = 0;
				var _g4 = 0;
				var _g13 = sampleCount1;
				while(_g4 < _g13) {
					var i3 = _g4++;
					left1[i3] = i16[r1] / 32768;
					right1[i3] = i16[r1 + 1] / 32768;
					r1 += channelCount;
				}
			}
			break;
		case 2:
			var f32 = new Float32Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn2 = buffer.inst.getChannelData(0);
				var _g5 = 0;
				var _g14 = sampleCount1;
				while(_g5 < _g14) {
					var i4 = _g5++;
					chn2[i4] = f32[i4];
				}
			} else {
				var left2 = buffer.inst.getChannelData(0);
				var right2 = buffer.inst.getChannelData(1);
				var r2 = 0;
				var _g6 = 0;
				var _g15 = sampleCount1;
				while(_g6 < _g15) {
					var i5 = _g6++;
					left2[i5] = f32[r2];
					right2[i5] = f32[r2 + 1];
					r2 += channelCount;
				}
			}
			break;
		}
	}
	,destroyBuffer: function(buffer) {
		if(buffer.inst != null) {
			hxd_snd_webaudio_Context.putBuffer(buffer.inst);
		}
		buffer.inst = null;
	}
	,queueBuffer: function(source,buffer,sampleStart,endOfStream) {
		var buf = this.playbackPool.length != 0 ? this.playbackPool.pop() : new hxd_snd_webaudio_BufferPlayback();
		if(buffer.inst == null) {
			return;
		}
		buf.set(buffer,sampleStart / buffer.inst.length * buffer.inst.duration);
		buffer.isEnd = endOfStream;
		source.buffers.push(buf);
		if(source.playing) {
			if(source.buffers.length != 1) {
				var t = source.buffers[source.buffers.length - 2].ends;
				var tmp = this.ctx;
				var tmp1;
				if(isFinite(t)) {
					var b = this.ctx.currentTime;
					tmp1 = t < b ? b : t;
				} else {
					tmp1 = this.ctx.currentTime;
				}
				buf.start(tmp,source,tmp1);
			} else {
				buf.start(this.ctx,source,this.ctx.currentTime);
			}
		}
	}
	,unqueueBuffer: function(source,buffer) {
		var i = 0;
		while(i < source.buffers.length) {
			var b = source.buffers[i];
			if(b.buffer == buffer) {
				source.buffers.splice(i,1);
				b.stop(!buffer.isEnd);
				b.clear();
				this.playbackPool.push(b);
				break;
			}
		}
		if(buffer.isEnd || !source.playing) {
			source.sampleOffset = 0;
		} else {
			source.sampleOffset += buffer.samples;
		}
	}
	,getProcessedBuffers: function(source) {
		var cnt = 0;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.consumed) {
				++cnt;
			}
		}
		return cnt;
	}
	,getPlayedSampleCount: function(source) {
		var consumed = 0;
		var buf = null;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.consumed) {
				consumed += b.buffer.samples;
			} else if(b.dirty) {
				buf = b;
				break;
			}
		}
		if(buf != null) {
			return source.sampleOffset + consumed + buf.get_currentSample();
		}
		return source.sampleOffset + consumed;
	}
	,update: function() {
	}
	,getEffectDriver: function(type) {
		switch(type) {
		case "lowpass":
			return new hxd_snd_webaudio_LowPassDriver();
		case "pitch":
			return new hxd_snd_webaudio_PitchDriver();
		case "spatialization":
			return new hxd_snd_webaudio_SpatializationDriver();
		default:
			return new hxd_snd_EffectDriver();
		}
	}
	,__class__: hxd_snd_webaudio_Driver
};
var hxd_snd_webaudio_LowPassDriver = function() {
	this.pool = [];
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.LowPassDriver"] = hxd_snd_webaudio_LowPassDriver;
hxd_snd_webaudio_LowPassDriver.__name__ = "hxd.snd.webaudio.LowPassDriver";
hxd_snd_webaudio_LowPassDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_LowPassDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	get: function(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		var node = ctx.createBiquadFilter();
		node.type = "lowpass";
		return node;
	}
	,bind: function(e,source) {
		source.lowPass = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	,apply: function(e,source) {
		var min = 40;
		var max = source.driver.ctx.sampleRate / 2;
		var octaves = Math.log(max / min) / Math.LN2;
		source.lowPass.frequency.value = max * Math.pow(2,octaves * (e.gainHF - 1));
	}
	,unbind: function(e,source) {
		this.pool.push(source.lowPass);
		source.lowPass.disconnect();
		source.lowPass = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
	,__class__: hxd_snd_webaudio_LowPassDriver
});
var hxd_snd_webaudio_PitchDriver = function() {
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.PitchDriver"] = hxd_snd_webaudio_PitchDriver;
hxd_snd_webaudio_PitchDriver.__name__ = "hxd.snd.webaudio.PitchDriver";
hxd_snd_webaudio_PitchDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_PitchDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	apply: function(e,source) {
		if(source.pitch != e.value) {
			source.pitch = e.value;
			source.applyPitch();
		}
	}
	,unbind: function(e,source) {
		source.pitch = 1;
		source.applyPitch();
	}
	,__class__: hxd_snd_webaudio_PitchDriver
});
var hxd_snd_webaudio_SpatializationDriver = function() {
	this.pool = [];
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.SpatializationDriver"] = hxd_snd_webaudio_SpatializationDriver;
hxd_snd_webaudio_SpatializationDriver.__name__ = "hxd.snd.webaudio.SpatializationDriver";
hxd_snd_webaudio_SpatializationDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_SpatializationDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	get: function(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		var node = ctx.createPanner();
		return node;
	}
	,bind: function(e,source) {
		source.panner = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	,apply: function(e,source) {
		source.panner.setPosition(-e.position.x,e.position.y,e.position.z);
		source.panner.setOrientation(-e.direction.x,e.direction.y,e.direction.z);
		source.panner.rolloffFactor = e.rollOffFactor;
		source.panner.refDistance = e.referenceDistance;
		var maxDist = e.maxDistance == null ? 3.40282347e38 : e.maxDistance;
		source.panner.maxDistance = maxDist;
	}
	,unbind: function(e,source) {
		this.pool.push(source.panner);
		source.panner.disconnect();
		source.panner = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
	,__class__: hxd_snd_webaudio_SpatializationDriver
});
var hxsl_Type = $hxEnums["hxsl.Type"] = { __ename__ : true, __constructs__ : ["TVoid","TInt","TBool","TFloat","TString","TVec","TMat3","TMat4","TMat3x4","TBytes","TSampler2D","TSampler2DArray","TSamplerCube","TStruct","TFun","TArray","TBuffer","TChannel"]
	,TVoid: {_hx_index:0,__enum__:"hxsl.Type",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"hxsl.Type",toString:$estr}
	,TBool: {_hx_index:2,__enum__:"hxsl.Type",toString:$estr}
	,TFloat: {_hx_index:3,__enum__:"hxsl.Type",toString:$estr}
	,TString: {_hx_index:4,__enum__:"hxsl.Type",toString:$estr}
	,TVec: ($_=function(size,t) { return {_hx_index:5,size:size,t:t,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size","t"],$_)
	,TMat3: {_hx_index:6,__enum__:"hxsl.Type",toString:$estr}
	,TMat4: {_hx_index:7,__enum__:"hxsl.Type",toString:$estr}
	,TMat3x4: {_hx_index:8,__enum__:"hxsl.Type",toString:$estr}
	,TBytes: ($_=function(size) { return {_hx_index:9,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size"],$_)
	,TSampler2D: {_hx_index:10,__enum__:"hxsl.Type",toString:$estr}
	,TSampler2DArray: {_hx_index:11,__enum__:"hxsl.Type",toString:$estr}
	,TSamplerCube: {_hx_index:12,__enum__:"hxsl.Type",toString:$estr}
	,TStruct: ($_=function(vl) { return {_hx_index:13,vl:vl,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["vl"],$_)
	,TFun: ($_=function(variants) { return {_hx_index:14,variants:variants,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["variants"],$_)
	,TArray: ($_=function(t,size) { return {_hx_index:15,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["t","size"],$_)
	,TBuffer: ($_=function(t,size) { return {_hx_index:16,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["t","size"],$_)
	,TChannel: ($_=function(size) { return {_hx_index:17,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size"],$_)
};
hxsl_Type.__empty_constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TSampler2D,hxsl_Type.TSampler2DArray,hxsl_Type.TSamplerCube];
var hxsl_VecType = $hxEnums["hxsl.VecType"] = { __ename__ : true, __constructs__ : ["VInt","VFloat","VBool"]
	,VInt: {_hx_index:0,__enum__:"hxsl.VecType",toString:$estr}
	,VFloat: {_hx_index:1,__enum__:"hxsl.VecType",toString:$estr}
	,VBool: {_hx_index:2,__enum__:"hxsl.VecType",toString:$estr}
};
hxsl_VecType.__empty_constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
var hxsl_SizeDecl = $hxEnums["hxsl.SizeDecl"] = { __ename__ : true, __constructs__ : ["SConst","SVar"]
	,SConst: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_.__params__ = ["v"],$_)
	,SVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_SizeDecl.__empty_constructs__ = [];
var hxsl_Error = function(msg,pos) {
	this.msg = msg;
	this.pos = pos;
};
$hxClasses["hxsl.Error"] = hxsl_Error;
hxsl_Error.__name__ = "hxsl.Error";
hxsl_Error.t = function(msg,pos) {
	throw new js__$Boot_HaxeError(new hxsl_Error(msg,pos));
};
hxsl_Error.prototype = {
	toString: function() {
		return "Error(" + this.msg + ")@" + Std.string(this.pos);
	}
	,__class__: hxsl_Error
};
var hxsl_VarKind = $hxEnums["hxsl.VarKind"] = { __ename__ : true, __constructs__ : ["Global","Input","Param","Var","Local","Output","Function"]
	,Global: {_hx_index:0,__enum__:"hxsl.VarKind",toString:$estr}
	,Input: {_hx_index:1,__enum__:"hxsl.VarKind",toString:$estr}
	,Param: {_hx_index:2,__enum__:"hxsl.VarKind",toString:$estr}
	,Var: {_hx_index:3,__enum__:"hxsl.VarKind",toString:$estr}
	,Local: {_hx_index:4,__enum__:"hxsl.VarKind",toString:$estr}
	,Output: {_hx_index:5,__enum__:"hxsl.VarKind",toString:$estr}
	,Function: {_hx_index:6,__enum__:"hxsl.VarKind",toString:$estr}
};
hxsl_VarKind.__empty_constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
var hxsl_VarQualifier = $hxEnums["hxsl.VarQualifier"] = { __ename__ : true, __constructs__ : ["Const","Private","Nullable","PerObject","Name","Shared","Precision","Range","Ignore","PerInstance"]
	,Const: ($_=function(max) { return {_hx_index:0,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["max"],$_)
	,Private: {_hx_index:1,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Nullable: {_hx_index:2,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerObject: {_hx_index:3,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Name: ($_=function(n) { return {_hx_index:4,n:n,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["n"],$_)
	,Shared: {_hx_index:5,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Precision: ($_=function(p) { return {_hx_index:6,p:p,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Range: ($_=function(min,max) { return {_hx_index:7,min:min,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["min","max"],$_)
	,Ignore: {_hx_index:8,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerInstance: ($_=function(v) { return {_hx_index:9,v:v,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_VarQualifier.__empty_constructs__ = [hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Ignore];
var hxsl_Prec = $hxEnums["hxsl.Prec"] = { __ename__ : true, __constructs__ : ["Low","Medium","High"]
	,Low: {_hx_index:0,__enum__:"hxsl.Prec",toString:$estr}
	,Medium: {_hx_index:1,__enum__:"hxsl.Prec",toString:$estr}
	,High: {_hx_index:2,__enum__:"hxsl.Prec",toString:$estr}
};
hxsl_Prec.__empty_constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
var hxsl_Const = $hxEnums["hxsl.Const"] = { __ename__ : true, __constructs__ : ["CNull","CBool","CInt","CFloat","CString"]
	,CNull: {_hx_index:0,__enum__:"hxsl.Const",toString:$estr}
	,CBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CInt: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CString: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_Const.__empty_constructs__ = [hxsl_Const.CNull];
var hxsl_FunctionKind = $hxEnums["hxsl.FunctionKind"] = { __ename__ : true, __constructs__ : ["Vertex","Fragment","Init","Helper"]
	,Vertex: {_hx_index:0,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Fragment: {_hx_index:1,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Init: {_hx_index:2,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Helper: {_hx_index:3,__enum__:"hxsl.FunctionKind",toString:$estr}
};
hxsl_FunctionKind.__empty_constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper];
var hxsl_TGlobal = $hxEnums["hxsl.TGlobal"] = { __ename__ : true, __constructs__ : ["Radians","Degrees","Sin","Cos","Tan","Asin","Acos","Atan","Pow","Exp","Log","Exp2","Log2","Sqrt","Inversesqrt","Abs","Sign","Floor","Ceil","Fract","Mod","Min","Max","Clamp","Mix","Step","Smoothstep","Length","Distance","Dot","Cross","Normalize","LReflect","Texture","TextureLod","Texel","TexelLod","ToInt","ToFloat","ToBool","Vec2","Vec3","Vec4","IVec2","IVec3","IVec4","BVec2","BVec3","BVec4","Mat2","Mat3","Mat4","Mat3x4","Saturate","Pack","Unpack","PackNormal","UnpackNormal","ScreenToUv","UvToScreen","DFdx","DFdy","Fwidth","ChannelRead","ChannelReadLod","ChannelFetch","ChannelFetchLod","Trace","VertexID","InstanceID","FragCoord"]
	,Radians: {_hx_index:0,__enum__:"hxsl.TGlobal",toString:$estr}
	,Degrees: {_hx_index:1,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sin: {_hx_index:2,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cos: {_hx_index:3,__enum__:"hxsl.TGlobal",toString:$estr}
	,Tan: {_hx_index:4,__enum__:"hxsl.TGlobal",toString:$estr}
	,Asin: {_hx_index:5,__enum__:"hxsl.TGlobal",toString:$estr}
	,Acos: {_hx_index:6,__enum__:"hxsl.TGlobal",toString:$estr}
	,Atan: {_hx_index:7,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pow: {_hx_index:8,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp: {_hx_index:9,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log: {_hx_index:10,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp2: {_hx_index:11,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log2: {_hx_index:12,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sqrt: {_hx_index:13,__enum__:"hxsl.TGlobal",toString:$estr}
	,Inversesqrt: {_hx_index:14,__enum__:"hxsl.TGlobal",toString:$estr}
	,Abs: {_hx_index:15,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sign: {_hx_index:16,__enum__:"hxsl.TGlobal",toString:$estr}
	,Floor: {_hx_index:17,__enum__:"hxsl.TGlobal",toString:$estr}
	,Ceil: {_hx_index:18,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fract: {_hx_index:19,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mod: {_hx_index:20,__enum__:"hxsl.TGlobal",toString:$estr}
	,Min: {_hx_index:21,__enum__:"hxsl.TGlobal",toString:$estr}
	,Max: {_hx_index:22,__enum__:"hxsl.TGlobal",toString:$estr}
	,Clamp: {_hx_index:23,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mix: {_hx_index:24,__enum__:"hxsl.TGlobal",toString:$estr}
	,Step: {_hx_index:25,__enum__:"hxsl.TGlobal",toString:$estr}
	,Smoothstep: {_hx_index:26,__enum__:"hxsl.TGlobal",toString:$estr}
	,Length: {_hx_index:27,__enum__:"hxsl.TGlobal",toString:$estr}
	,Distance: {_hx_index:28,__enum__:"hxsl.TGlobal",toString:$estr}
	,Dot: {_hx_index:29,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cross: {_hx_index:30,__enum__:"hxsl.TGlobal",toString:$estr}
	,Normalize: {_hx_index:31,__enum__:"hxsl.TGlobal",toString:$estr}
	,LReflect: {_hx_index:32,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texture: {_hx_index:33,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureLod: {_hx_index:34,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texel: {_hx_index:35,__enum__:"hxsl.TGlobal",toString:$estr}
	,TexelLod: {_hx_index:36,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToInt: {_hx_index:37,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToFloat: {_hx_index:38,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToBool: {_hx_index:39,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec2: {_hx_index:40,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec3: {_hx_index:41,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec4: {_hx_index:42,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec2: {_hx_index:43,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec3: {_hx_index:44,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec4: {_hx_index:45,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec2: {_hx_index:46,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec3: {_hx_index:47,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec4: {_hx_index:48,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat2: {_hx_index:49,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3: {_hx_index:50,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat4: {_hx_index:51,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3x4: {_hx_index:52,__enum__:"hxsl.TGlobal",toString:$estr}
	,Saturate: {_hx_index:53,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pack: {_hx_index:54,__enum__:"hxsl.TGlobal",toString:$estr}
	,Unpack: {_hx_index:55,__enum__:"hxsl.TGlobal",toString:$estr}
	,PackNormal: {_hx_index:56,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackNormal: {_hx_index:57,__enum__:"hxsl.TGlobal",toString:$estr}
	,ScreenToUv: {_hx_index:58,__enum__:"hxsl.TGlobal",toString:$estr}
	,UvToScreen: {_hx_index:59,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdx: {_hx_index:60,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdy: {_hx_index:61,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fwidth: {_hx_index:62,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelRead: {_hx_index:63,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelReadLod: {_hx_index:64,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetch: {_hx_index:65,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetchLod: {_hx_index:66,__enum__:"hxsl.TGlobal",toString:$estr}
	,Trace: {_hx_index:67,__enum__:"hxsl.TGlobal",toString:$estr}
	,VertexID: {_hx_index:68,__enum__:"hxsl.TGlobal",toString:$estr}
	,InstanceID: {_hx_index:69,__enum__:"hxsl.TGlobal",toString:$estr}
	,FragCoord: {_hx_index:70,__enum__:"hxsl.TGlobal",toString:$estr}
};
hxsl_TGlobal.__empty_constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture,hxsl_TGlobal.TextureLod,hxsl_TGlobal.Texel,hxsl_TGlobal.TexelLod,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.ScreenToUv,hxsl_TGlobal.UvToScreen,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.ChannelReadLod,hxsl_TGlobal.ChannelFetch,hxsl_TGlobal.ChannelFetchLod,hxsl_TGlobal.Trace,hxsl_TGlobal.VertexID,hxsl_TGlobal.InstanceID,hxsl_TGlobal.FragCoord];
var hxsl_Component = $hxEnums["hxsl.Component"] = { __ename__ : true, __constructs__ : ["X","Y","Z","W"]
	,X: {_hx_index:0,__enum__:"hxsl.Component",toString:$estr}
	,Y: {_hx_index:1,__enum__:"hxsl.Component",toString:$estr}
	,Z: {_hx_index:2,__enum__:"hxsl.Component",toString:$estr}
	,W: {_hx_index:3,__enum__:"hxsl.Component",toString:$estr}
};
hxsl_Component.__empty_constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
var hxsl_TExprDef = $hxEnums["hxsl.TExprDef"] = { __ename__ : true, __constructs__ : ["TConst","TVar","TGlobal","TParenthesis","TBlock","TBinop","TUnop","TVarDecl","TCall","TSwiz","TIf","TDiscard","TReturn","TFor","TContinue","TBreak","TArray","TArrayDecl","TSwitch","TWhile","TMeta"]
	,TConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v"],$_)
	,TGlobal: ($_=function(g) { return {_hx_index:2,g:g,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["g"],$_)
	,TParenthesis: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TBlock: ($_=function(el) { return {_hx_index:4,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TBinop: ($_=function(op,e1,e2) { return {_hx_index:5,op:op,e1:e1,e2:e2,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,TUnop: ($_=function(op,e1) { return {_hx_index:6,op:op,e1:e1,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["op","e1"],$_)
	,TVarDecl: ($_=function(v,init) { return {_hx_index:7,v:v,init:init,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v","init"],$_)
	,TCall: ($_=function(e,args) { return {_hx_index:8,e:e,args:args,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","args"],$_)
	,TSwiz: ($_=function(e,regs) { return {_hx_index:9,e:e,regs:regs,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","regs"],$_)
	,TIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["econd","eif","eelse"],$_)
	,TDiscard: {_hx_index:11,__enum__:"hxsl.TExprDef",toString:$estr}
	,TReturn: ($_=function(e) { return {_hx_index:12,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TFor: ($_=function(v,it,loop) { return {_hx_index:13,v:v,it:it,loop:loop,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v","it","loop"],$_)
	,TContinue: {_hx_index:14,__enum__:"hxsl.TExprDef",toString:$estr}
	,TBreak: {_hx_index:15,__enum__:"hxsl.TExprDef",toString:$estr}
	,TArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","index"],$_)
	,TArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TSwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","cases","def"],$_)
	,TWhile: ($_=function(e,loop,normalWhile) { return {_hx_index:19,e:e,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","loop","normalWhile"],$_)
	,TMeta: ($_=function(m,args,e) { return {_hx_index:20,m:m,args:args,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["m","args","e"],$_)
};
hxsl_TExprDef.__empty_constructs__ = [hxsl_TExprDef.TDiscard,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak];
var hxsl_Tools = function() { };
$hxClasses["hxsl.Tools"] = hxsl_Tools;
hxsl_Tools.__name__ = "hxsl.Tools";
hxsl_Tools.allocVarId = function() {
	return ++hxsl_Tools.UID;
};
hxsl_Tools.getName = function(v) {
	if(v.qualifiers == null) {
		return v.name;
	}
	var _g = 0;
	var _g1 = v.qualifiers;
	while(_g < _g1.length) {
		var q = _g1[_g];
		++_g;
		if(q._hx_index == 4) {
			var n = q.n;
			return n;
		}
	}
	return v.name;
};
hxsl_Tools.getConstBits = function(v) {
	var _g = v.type;
	switch(_g._hx_index) {
	case 1:
		var _g1 = 0;
		var _g11 = v.qualifiers;
		while(_g1 < _g11.length) {
			var q = _g11[_g1];
			++_g1;
			if(q._hx_index == 0) {
				var n = q.max;
				if(n != null) {
					var bits = 0;
					while(n >= 1 << bits) ++bits;
					return bits;
				}
				return 8;
			}
		}
		break;
	case 2:
		return 1;
	case 17:
		var _g12 = _g.size;
		return 3 + hxsl_Tools.MAX_CHANNELS_BITS;
	default:
	}
	return 0;
};
hxsl_Tools.isConst = function(v) {
	var _g = v.type;
	var tmp;
	if(_g._hx_index == 17) {
		var _g1 = _g.size;
		tmp = true;
	} else {
		tmp = false;
	}
	if(tmp) {
		return true;
	}
	if(v.qualifiers != null) {
		var _g2 = 0;
		var _g3 = v.qualifiers;
		while(_g2 < _g3.length) {
			var q = _g3[_g2];
			++_g2;
			if(q._hx_index == 0) {
				var _g21 = q.max;
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.hasQualifier = function(v,q) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q2 = _g1[_g];
			++_g;
			if(q2 == q) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.isSampler = function(t) {
	switch(t._hx_index) {
	case 10:case 11:case 12:
		return true;
	case 17:
		var _g = t.size;
		return true;
	default:
		return false;
	}
};
hxsl_Tools.toString = function(t) {
	switch(t._hx_index) {
	case 5:
		var t1 = t.t;
		var size = t.size;
		var prefix;
		switch(t1._hx_index) {
		case 0:
			prefix = "I";
			break;
		case 1:
			prefix = "";
			break;
		case 2:
			prefix = "B";
			break;
		}
		return prefix + "Vec" + size;
	case 9:
		var n = t.size;
		return "Bytes" + n;
	case 13:
		var vl = t.vl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < vl.length) {
			var v = vl[_g1];
			++_g1;
			_g.push(v.name + " : " + hxsl_Tools.toString(v.type));
		}
		return "{" + _g.join(",") + "}";
	case 15:
		var s = t.size;
		var t2 = t.t;
		var tmp = hxsl_Tools.toString(t2) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v1 = s.v;
			tmp1 = v1.name;
			break;
		}
		return tmp + tmp1 + "]";
	case 16:
		var s1 = t.size;
		var t3 = t.t;
		var tmp2 = "buffer " + hxsl_Tools.toString(t3) + "[";
		var tmp3;
		switch(s1._hx_index) {
		case 0:
			var i1 = s1.v;
			tmp3 = "" + i1;
			break;
		case 1:
			var v2 = s1.v;
			tmp3 = v2.name;
			break;
		}
		return tmp2 + tmp3 + "]";
	default:
		return HxOverrides.substr($hxEnums[t.__enum__].__constructs__[t._hx_index],1,null);
	}
};
hxsl_Tools.hasSideEffect = function(e) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g27 = _g.c;
		return false;
	case 1:
		var _g9 = _g.v;
		return false;
	case 2:
		var _g5 = _g.g;
		return false;
	case 3:
		var e1 = _g.e;
		return hxsl_Tools.hasSideEffect(e1);
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e2 = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e2)) {
				return true;
			}
		}
		return false;
	case 5:
		var _g33 = _g.e2;
		var _g32 = _g.e1;
		var _g31 = _g.op;
		switch(_g31._hx_index) {
		case 4:
			return true;
		case 20:
			var _g34 = _g31.op;
			return true;
		default:
			var e21 = _g33;
			var e11 = _g32;
			if(!hxsl_Tools.hasSideEffect(e11)) {
				return hxsl_Tools.hasSideEffect(e21);
			} else {
				return true;
			}
		}
		break;
	case 6:
		var _g17 = _g.op;
		var e12 = _g.e1;
		return hxsl_Tools.hasSideEffect(e12);
	case 7:
		var _g25 = _g.init;
		var _g24 = _g.v;
		return true;
	case 8:
		var _g36 = _g.args;
		var _g35 = _g.e;
		return true;
	case 9:
		var _g20 = _g.regs;
		var e3 = _g.e;
		return hxsl_Tools.hasSideEffect(e3);
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		if(!(hxsl_Tools.hasSideEffect(econd) || hxsl_Tools.hasSideEffect(eif))) {
			if(eelse != null) {
				return hxsl_Tools.hasSideEffect(eelse);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 12:
		var _g13 = _g.e;
		return true;
	case 13:
		var _g21 = _g.v;
		var loop = _g.loop;
		var it = _g.it;
		if(!hxsl_Tools.hasSideEffect(it)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 11:case 14:case 15:
		return true;
	case 16:
		var index = _g.index;
		var e4 = _g.e;
		if(!hxsl_Tools.hasSideEffect(e4)) {
			return hxsl_Tools.hasSideEffect(index);
		} else {
			return true;
		}
		break;
	case 17:
		var el1 = _g.el;
		var _g2 = 0;
		while(_g2 < el1.length) {
			var e5 = el1[_g2];
			++_g2;
			if(hxsl_Tools.hasSideEffect(e5)) {
				return true;
			}
		}
		return false;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e6 = _g.e;
		var _g3 = 0;
		while(_g3 < cases.length) {
			var c = cases[_g3];
			++_g3;
			var _g4 = 0;
			var _g11 = c.values;
			while(_g4 < _g11.length) {
				var v = _g11[_g4];
				++_g4;
				if(hxsl_Tools.hasSideEffect(v)) {
					return true;
				}
			}
			if(hxsl_Tools.hasSideEffect(c.expr)) {
				return true;
			}
		}
		if(!hxsl_Tools.hasSideEffect(e6)) {
			if(def != null) {
				return hxsl_Tools.hasSideEffect(def);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 19:
		var _g12 = _g.normalWhile;
		var loop1 = _g.loop;
		var e7 = _g.e;
		if(!hxsl_Tools.hasSideEffect(e7)) {
			return hxsl_Tools.hasSideEffect(loop1);
		} else {
			return true;
		}
		break;
	case 20:
		var _g7 = _g.args;
		var _g6 = _g.m;
		var e8 = _g.e;
		return hxsl_Tools.hasSideEffect(e8);
	}
};
hxsl_Tools.iter = function(e,f) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g27 = _g.c;
		break;
	case 1:
		var _g9 = _g.v;
		break;
	case 2:
		var _g5 = _g.g;
		break;
	case 3:
		var e1 = _g.e;
		f(e1);
		break;
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e2 = el[_g1];
			++_g1;
			f(e2);
		}
		break;
	case 5:
		var _g31 = _g.op;
		var e21 = _g.e2;
		var e11 = _g.e1;
		f(e11);
		f(e21);
		break;
	case 6:
		var _g17 = _g.op;
		var e12 = _g.e1;
		f(e12);
		break;
	case 7:
		var _g24 = _g.v;
		var init = _g.init;
		if(init != null) {
			f(init);
		}
		break;
	case 8:
		var args = _g.args;
		var e3 = _g.e;
		f(e3);
		var _g2 = 0;
		while(_g2 < args.length) {
			var a = args[_g2];
			++_g2;
			f(a);
		}
		break;
	case 9:
		var _g20 = _g.regs;
		var e4 = _g.e;
		f(e4);
		break;
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		f(econd);
		f(eif);
		if(eelse != null) {
			f(eelse);
		}
		break;
	case 12:
		var e5 = _g.e;
		if(e5 != null) {
			f(e5);
		}
		break;
	case 13:
		var _g21 = _g.v;
		var loop = _g.loop;
		var it = _g.it;
		f(it);
		f(loop);
		break;
	case 11:case 14:case 15:
		break;
	case 16:
		var index = _g.index;
		var e6 = _g.e;
		f(e6);
		f(index);
		break;
	case 17:
		var el1 = _g.el;
		var _g3 = 0;
		while(_g3 < el1.length) {
			var e7 = el1[_g3];
			++_g3;
			f(e7);
		}
		break;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e8 = _g.e;
		f(e8);
		var _g4 = 0;
		while(_g4 < cases.length) {
			var c = cases[_g4];
			++_g4;
			var _g6 = 0;
			var _g11 = c.values;
			while(_g6 < _g11.length) {
				var v = _g11[_g6];
				++_g6;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 19:
		var _g12 = _g.normalWhile;
		var loop1 = _g.loop;
		var e9 = _g.e;
		f(e9);
		f(loop1);
		break;
	case 20:
		var _g7 = _g.args;
		var _g61 = _g.m;
		var e10 = _g.e;
		f(e10);
		break;
	}
};
hxsl_Tools.map = function(e,f) {
	var ed;
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g27 = _g.c;
		ed = e.e;
		break;
	case 1:
		var _g9 = _g.v;
		ed = e.e;
		break;
	case 2:
		var _g5 = _g.g;
		ed = e.e;
		break;
	case 3:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TParenthesis(f(e1));
		break;
	case 4:
		var el = _g.el;
		var _g1 = [];
		var _g11 = 0;
		while(_g11 < el.length) {
			var e2 = el[_g11];
			++_g11;
			_g1.push(f(e2));
		}
		ed = hxsl_TExprDef.TBlock(_g1);
		break;
	case 5:
		var e21 = _g.e2;
		var e11 = _g.e1;
		var op = _g.op;
		ed = hxsl_TExprDef.TBinop(op,f(e11),f(e21));
		break;
	case 6:
		var e12 = _g.e1;
		var op1 = _g.op;
		ed = hxsl_TExprDef.TUnop(op1,f(e12));
		break;
	case 7:
		var init = _g.init;
		var v = _g.v;
		ed = hxsl_TExprDef.TVarDecl(v,init != null ? f(init) : null);
		break;
	case 8:
		var args = _g.args;
		var e3 = _g.e;
		var ed1 = f(e3);
		var _g2 = [];
		var _g12 = 0;
		while(_g12 < args.length) {
			var a = args[_g12];
			++_g12;
			_g2.push(f(a));
		}
		ed = hxsl_TExprDef.TCall(ed1,_g2);
		break;
	case 9:
		var c = _g.regs;
		var e4 = _g.e;
		ed = hxsl_TExprDef.TSwiz(f(e4),c);
		break;
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		ed = hxsl_TExprDef.TIf(f(econd),f(eif),eelse != null ? f(eelse) : null);
		break;
	case 12:
		var e5 = _g.e;
		ed = hxsl_TExprDef.TReturn(e5 != null ? f(e5) : null);
		break;
	case 13:
		var loop = _g.loop;
		var it = _g.it;
		var v1 = _g.v;
		ed = hxsl_TExprDef.TFor(v1,f(it),f(loop));
		break;
	case 11:case 14:case 15:
		ed = e.e;
		break;
	case 16:
		var index = _g.index;
		var e6 = _g.e;
		ed = hxsl_TExprDef.TArray(f(e6),f(index));
		break;
	case 17:
		var el1 = _g.el;
		var _g3 = [];
		var _g13 = 0;
		while(_g13 < el1.length) {
			var e7 = el1[_g13];
			++_g13;
			_g3.push(f(e7));
		}
		ed = hxsl_TExprDef.TArrayDecl(_g3);
		break;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e8 = _g.e;
		var ed2 = f(e8);
		var _g4 = [];
		var _g14 = 0;
		while(_g14 < cases.length) {
			var c1 = cases[_g14];
			++_g14;
			var _g15 = [];
			var _g21 = 0;
			var _g31 = c1.values;
			while(_g21 < _g31.length) {
				var v2 = _g31[_g21];
				++_g21;
				_g15.push(f(v2));
			}
			_g4.push({ values : _g15, expr : f(c1.expr)});
		}
		ed = hxsl_TExprDef.TSwitch(ed2,_g4,def == null ? null : f(def));
		break;
	case 19:
		var normalWhile = _g.normalWhile;
		var loop1 = _g.loop;
		var e9 = _g.e;
		ed = hxsl_TExprDef.TWhile(f(e9),f(loop1),normalWhile);
		break;
	case 20:
		var e10 = _g.e;
		var args1 = _g.args;
		var m = _g.m;
		ed = hxsl_TExprDef.TMeta(m,args1,f(e10));
		break;
	}
	return { e : ed, t : e.t, p : e.p};
};
hxsl_Tools.size = function(t) {
	switch(t._hx_index) {
	case 0:
		return 0;
	case 1:case 3:
		return 1;
	case 2:case 4:case 10:case 11:case 12:
		return 0;
	case 5:
		var _g1 = t.t;
		var n = t.size;
		return n;
	case 6:
		return 9;
	case 7:
		return 16;
	case 8:
		return 12;
	case 9:
		var s = t.size;
		return s;
	case 13:
		var vl = t.vl;
		var s1 = 0;
		var _g = 0;
		while(_g < vl.length) {
			var v = vl[_g];
			++_g;
			s1 += hxsl_Tools.size(v.type);
		}
		return s1;
	case 14:
		var _g8 = t.variants;
		return 0;
	case 15:
		var _g10 = t.size;
		var _g9 = t.t;
		switch(_g10._hx_index) {
		case 0:
			var t1 = _g9;
			var v1 = _g10.v;
			return hxsl_Tools.size(t1) * v1;
		case 1:
			var _g11 = _g10.v;
			return 0;
		}
		break;
	case 16:
		var _g5 = t.size;
		if(_g5._hx_index == 0) {
			var t2 = t.t;
			var v2 = _g5.v;
			return hxsl_Tools.size(t2) * v2;
		} else {
			return 0;
		}
		break;
	case 17:
		var n1 = t.size;
		return n1;
	}
};
var hxsl_Tools2 = function() { };
$hxClasses["hxsl.Tools2"] = hxsl_Tools2;
hxsl_Tools2.__name__ = "hxsl.Tools2";
hxsl_Tools2.toString = function(g) {
	var n = $hxEnums[g.__enum__].__constructs__[g._hx_index];
	return n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
};
var hxsl_BatchShader = function() {
	this.Batch_Count__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["hxsl.BatchShader"] = hxsl_BatchShader;
hxsl_BatchShader.__name__ = "hxsl.BatchShader";
hxsl_BatchShader.__super__ = hxsl_Shader;
hxsl_BatchShader.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Batch_Count__;
		if(v >>> 17 != 0) {
			throw new js__$Boot_HaxeError("Batch_Count" + " is out of range " + v + ">" + 131071);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.Batch_Count__;
		case 1:
			return this.Batch_Buffer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: hxsl_BatchShader
});
var hxsl_SearchMap = function() {
};
$hxClasses["hxsl.SearchMap"] = hxsl_SearchMap;
hxsl_SearchMap.__name__ = "hxsl.SearchMap";
hxsl_SearchMap.prototype = {
	__class__: hxsl_SearchMap
};
var hxsl_Cache = function() {
	this.constsToGlobal = false;
	this.linkCache = new hxsl_SearchMap();
	this.linkShaders = new haxe_ds_StringMap();
	this.batchShaders = new haxe_ds_IntMap();
	this.byID = new haxe_ds_StringMap();
};
$hxClasses["hxsl.Cache"] = hxsl_Cache;
hxsl_Cache.__name__ = "hxsl.Cache";
hxsl_Cache.get = function() {
	var c = hxsl_Cache.INST;
	if(c == null) {
		c = new hxsl_Cache();
		hxsl_Cache.INST = c;
	}
	return c;
};
hxsl_Cache.prototype = {
	getLinkShader: function(vars) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < vars.length) {
			var v = vars[_g1];
			++_g1;
			_g.push(Std.string(v));
		}
		var key = _g.join(",");
		var _this = this.linkShaders;
		var shader = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(shader != null) {
			return shader;
		}
		var s = new hxsl_SharedShader("");
		var id = HxOverrides.substr(haxe_crypto_Md5.encode(key),0,8);
		s.data = { name : "shaderLinker_" + id, vars : [], funs : []};
		var pos = null;
		var outVars = new haxe_ds_StringMap();
		var outputCount = 0;
		var tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		var makeVec = function(g,size,args,makeOutExpr) {
			var out = [];
			var rem = size;
			var _g2 = 0;
			var _g3 = args.length;
			while(_g2 < _g3) {
				var i = _g2++;
				var e = makeOutExpr(args[args.length - 1 - i],rem - (args.length - 1 - i));
				rem -= hxsl_Tools.size(e.t);
				out.unshift(e);
			}
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},out), t : hxsl_Type.TVec(size,hxsl_VecType.VFloat), p : pos};
		};
		var makeVar = function(name,t,parent) {
			var path = parent == null ? name : hxsl_Tools.getName(parent) + "." + name;
			var v1 = __map_reserved[path] != null ? outVars.getReserved(path) : outVars.h[path];
			if(v1 != null) {
				return v1;
			}
			v1 = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Var, parent : parent};
			if(parent == null) {
				s.data.vars.push(v1);
			} else {
				var _g21 = parent.type;
				if(_g21._hx_index == 13) {
					var vl = _g21.vl;
					vl.push(v1);
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
			}
			if(__map_reserved[path] != null) {
				outVars.setReserved(path,v1);
			} else {
				outVars.h[path] = v1;
			}
			return v1;
		};
		var makeOutExpr1 = null;
		makeOutExpr1 = function(v2,rem1) {
			switch(v2._hx_index) {
			case 0:
				var v3 = v2.v;
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(v3)), t : hxsl_Type.TFloat, p : pos};
			case 1:
				var size1 = v2.size;
				var vname = v2.v;
				var v4 = __map_reserved[vname] != null ? outVars.getReserved(vname) : outVars.h[vname];
				if(v4 != null) {
					return { e : hxsl_TExprDef.TVar(v4), t : v4.type, p : pos};
				}
				var path1 = vname.split(".");
				var parent1 = null;
				while(path1.length > 1) {
					var parent2 = path1.shift();
					parent1 = makeVar(parent2,hxsl_Type.TStruct([]),parent1);
				}
				if(size1 != null) {
					rem1 = size1;
				}
				var v5 = path1.shift();
				v4 = makeVar(v5,rem1 == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(rem1,hxsl_VecType.VFloat),parent1);
				return { e : hxsl_TExprDef.TVar(v4), t : v4.type, p : pos};
			case 2:
				var v6 = v2.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.PackNormal), t : hxsl_Type.TVoid, p : pos},[makeOutExpr1(v6,3)]), t : tvec4, p : pos};
			case 3:
				var v7 = v2.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Pack), t : hxsl_Type.TVoid, p : pos},[makeOutExpr1(v7,1)]), t : tvec4, p : pos};
			case 4:
				var args1 = v2.a;
				return makeVec(hxsl_TGlobal.Vec2,2,args1,makeOutExpr1);
			case 5:
				var args2 = v2.a;
				return makeVec(hxsl_TGlobal.Vec3,3,args2,makeOutExpr1);
			case 6:
				var args3 = v2.a;
				return makeVec(hxsl_TGlobal.Vec4,4,args3,makeOutExpr1);
			case 7:
				var comps = v2.swiz;
				var v8 = v2.a;
				return { e : hxsl_TExprDef.TSwiz(makeOutExpr1(v8,4),comps), t : hxsl_Type.TVec(comps.length,hxsl_VecType.VFloat), p : pos};
			}
		};
		var makeOutput = function(v9) {
			outputCount += 1;
			var ov = { id : hxsl_Tools.allocVarId(), type : tvec4, name : "OUTPUT" + (outputCount - 1), kind : hxsl_VarKind.Output};
			s.data.vars.push(ov);
			return { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(ov), t : tvec4, p : pos},makeOutExpr1(v9,4)), t : hxsl_Type.TVoid, p : pos};
		};
		var defineFun = function(kind,vars1) {
			var fv = { id : hxsl_Tools.allocVarId(), type : hxsl_Type.TFun([]), name : ("" + Std.string(kind)).toLowerCase(), kind : hxsl_VarKind.Function};
			var _g22 = [];
			var _g31 = 0;
			while(_g31 < vars1.length) {
				var v10 = vars1[_g31];
				++_g31;
				_g22.push(makeOutput(v10));
			}
			var f = { kind : kind, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(_g22), p : pos, t : hxsl_Type.TVoid}};
			s.data.funs.push(f);
		};
		defineFun(hxsl_FunctionKind.Vertex,[hxsl_Output.Value("output.position")]);
		defineFun(hxsl_FunctionKind.Fragment,vars);
		shader = Object.create(hxsl_Shader.prototype);
		shader.shader = s;
		var _this1 = this.linkShaders;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,shader);
		} else {
			_this1.h[key] = shader;
		}
		shader.updateConstantsFinal(null);
		return shader;
	}
	,link: function(shaders,batchMode) {
		var c = this.linkCache;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			if(c.next == null) {
				c.next = new haxe_ds_IntMap();
			}
			var cs = c.next.h[i.id];
			if(cs == null) {
				cs = new hxsl_SearchMap();
				c.next.h[i.id] = cs;
			}
			c = cs;
		}
		if(c.linked == null) {
			c.linked = this.compileRuntimeShader(shaders,batchMode);
		}
		return c.linked;
	}
	,compileRuntimeShader: function(shaders,batchMode) {
		var shaderDatas = [];
		var index = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			shaderDatas.push({ inst : i, p : s1.priority, index : index++});
		}
		shaderDatas.reverse();
		haxe_ds_ArraySort.sort(shaderDatas,function(s11,s2) {
			return s2.p - s11.p;
		});
		var linker = new hxsl_Linker(batchMode);
		var s3;
		try {
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < shaderDatas.length) {
				var s4 = shaderDatas[_g2];
				++_g2;
				_g1.push(s4.inst.shader);
			}
			s3 = linker.link(_g1);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof hxsl_Error)) {
				var e2 = e1;
				var _g11 = [];
				var _g21 = 0;
				while(_g21 < shaderDatas.length) {
					var s5 = shaderDatas[_g21];
					++_g21;
					_g11.push(hxsl_Printer.shaderToString(s5.inst.shader));
				}
				var shaders1 = _g11;
				e2.msg += "\n\nin\n\n" + shaders1.join("\n-----\n");
				throw new js__$Boot_HaxeError(e2);
			} else {
				throw e;
			}
		}
		var paramVars = new haxe_ds_IntMap();
		var _g12 = 0;
		var _g22 = linker.allVars;
		while(_g12 < _g22.length) {
			var v = _g22[_g12];
			++_g12;
			if(v.v.kind == hxsl_VarKind.Param) {
				var _g13 = v.v.type;
				if(_g13._hx_index == 13) {
					var _g23 = _g13.vl;
					continue;
				}
				var inf = shaderDatas[v.instanceIndex];
				paramVars.h[v.id] = { instance : inf.index, index : inf.inst.params.h[v.merged[0].id]};
			}
		}
		var prev = s3;
		var s6;
		try {
			s6 = new hxsl_Splitter().split(s3);
		} catch( e3 ) {
			var e4 = ((e3) instanceof js__$Boot_HaxeError) ? e3.val : e3;
			if(((e4) instanceof hxsl_Error)) {
				var e5 = e4;
				e5.msg += "\n\nin\n\n" + hxsl_Printer.shaderToString(s3);
				throw new js__$Boot_HaxeError(e5);
			} else {
				throw e3;
			}
		}
		if(batchMode) {
			var _g3 = 0;
			var _g4 = s6.vertex.vars;
			while(_g3 < _g4.length) {
				var v1 = _g4[_g3];
				++_g3;
				if(v1.qualifiers != null && v1.qualifiers.indexOf(hxsl_VarQualifier.PerObject) >= 0) {
					v1.kind = hxsl_VarKind.Local;
				}
			}
		}
		var prev1 = s6;
		var s7 = new hxsl_Dce().dce(s6.vertex,s6.fragment);
		var r = this.buildRuntimeShader(s7.vertex,s7.fragment,paramVars);
		var _g31 = [];
		var _g4_l = shaders;
		var _g4_last = null;
		while(_g4_l != _g4_last) {
			var s8 = _g4_l.s;
			_g4_l = _g4_l.next;
			var s9 = s8;
			_g31.push(new hxsl_ShaderInstanceDesc(s9.shader,s9.constBits));
		}
		r.spec = { instances : _g31, signature : null};
		var _g5 = 0;
		var _g6 = shaderDatas.length;
		while(_g5 < _g6) {
			var i1 = _g5++;
			var s10 = shaderDatas[shaderDatas.length - 1 - i1];
			r.spec.instances[s10.index].index = i1;
		}
		var _g7 = [];
		var _g8 = 0;
		var _g9 = r.spec.instances;
		while(_g8 < _g9.length) {
			var i2 = _g9[_g8];
			++_g8;
			_g7.push(i2.shader.data.name + "_" + i2.bits + "_" + i2.index);
		}
		var signParts = _g7;
		var tmp = signParts.join(":");
		r.spec.signature = haxe_crypto_Md5.encode(tmp);
		r.signature = haxe_crypto_Md5.encode(hxsl_Printer.shaderToString(r.vertex.data) + hxsl_Printer.shaderToString(r.fragment.data));
		r.batchMode = batchMode;
		var key = r.signature;
		var _this = this.byID;
		var r2 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(r2 != null) {
			r.id = r2.id;
		} else {
			var key1 = r.signature;
			var _this1 = this.byID;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,r);
			} else {
				_this1.h[key1] = r;
			}
		}
		return r;
	}
	,buildRuntimeShader: function(vertex,fragment,paramVars) {
		var r = new hxsl_RuntimeShader();
		r.vertex = this.flattenShader(vertex,hxsl_FunctionKind.Vertex,paramVars);
		r.vertex.vertex = true;
		r.fragment = this.flattenShader(fragment,hxsl_FunctionKind.Fragment,paramVars);
		r.globals = new haxe_ds_IntMap();
		this.initGlobals(r,r.vertex);
		this.initGlobals(r,r.fragment);
		return r;
	}
	,initGlobals: function(r,s) {
		var p = s.globals;
		while(p != null) {
			r.globals.h[p.gid] = true;
			p = p.next;
		}
		var p1 = s.params;
		while(p1 != null) {
			if(p1.perObjectGlobal != null) {
				r.globals.h[p1.perObjectGlobal.gid] = true;
			}
			p1 = p1.next;
		}
	}
	,getPath: function(v) {
		if(v.parent == null) {
			return v.name;
		}
		return this.getPath(v.parent) + "." + v.name;
	}
	,flattenShader: function(s,kind,params) {
		var flat = new hxsl_Flatten();
		var c = new hxsl_RuntimeShaderData();
		var data = flat.flatten(s,kind,this.constsToGlobal);
		var textures = [];
		c.consts = flat.consts;
		c.texturesCount = 0;
		var g = flat.allocData.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			var alloc = flat.allocData.h[g1.__id__];
			switch(g1.kind._hx_index) {
			case 0:
				var _g = [];
				var _g1 = 0;
				while(_g1 < alloc.length) {
					var a = alloc[_g1];
					++_g1;
					if(a.v != null) {
						_g.push(new hxsl_AllocGlobal(a.pos,this.getPath(a.v),a.v.type));
					}
				}
				var out = _g;
				var _g2 = 0;
				var _g3 = out.length - 1;
				while(_g2 < _g3) {
					var i = _g2++;
					out[i].next = out[i + 1];
				}
				var _g4 = g1.type;
				if(_g4._hx_index == 15) {
					var _g6 = _g4.size;
					var _g5 = _g4.t;
					if(_g5._hx_index == 5) {
						if(_g5.size == 4) {
							if(_g5.t._hx_index == 1) {
								if(_g6._hx_index == 0) {
									var size = _g6.v;
									c.globals = out[0];
									c.globalsSize = size;
								} else {
									throw new js__$Boot_HaxeError("assert");
								}
							} else {
								throw new js__$Boot_HaxeError("assert");
							}
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
					} else {
						throw new js__$Boot_HaxeError("assert");
					}
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
				break;
			case 2:
				var out1 = [];
				var _g7 = 0;
				while(_g7 < alloc.length) {
					var a1 = alloc[_g7];
					++_g7;
					if(a1.v == null) {
						continue;
					}
					var p = params.h[a1.v.id];
					if(p == null) {
						var ap = new hxsl_AllocParam(a1.v.name,a1.pos,-1,-1,a1.v.type);
						ap.perObjectGlobal = new hxsl_AllocGlobal(-1,this.getPath(a1.v),a1.v.type);
						out1.push(ap);
						continue;
					}
					out1.push(new hxsl_AllocParam(a1.v.name,a1.pos,p.instance,p.index,a1.v.type));
				}
				var _g11 = 0;
				var _g21 = out1.length - 1;
				while(_g11 < _g21) {
					var i1 = _g11++;
					out1[i1].next = out1[i1 + 1];
				}
				var _g31 = g1.type;
				if(_g31._hx_index == 15) {
					var _g51 = _g31.size;
					var _g41 = _g31.t;
					var t = _g41;
					if(hxsl_Tools.isSampler(t)) {
						textures.push({ t : t, all : out1});
						c.texturesCount += out1.length;
					} else {
						switch(_g41._hx_index) {
						case 5:
							if(_g41.size == 4) {
								if(_g41.t._hx_index == 1) {
									if(_g51._hx_index == 0) {
										var size1 = _g51.v;
										c.params = out1[0];
										c.paramsSize = size1;
									} else {
										throw new js__$Boot_HaxeError("assert");
									}
								} else {
									throw new js__$Boot_HaxeError("assert");
								}
							} else {
								throw new js__$Boot_HaxeError("assert");
							}
							break;
						case 16:
							var _g10 = _g41.size;
							var _g9 = _g41.t;
							c.buffers = out1[0];
							c.bufferCount = out1.length;
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
					}
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
		}
		if(textures.length > 0) {
			textures.sort(function(t1,t2) {
				return t1.t._hx_index - t2.t._hx_index;
			});
			c.textures = textures[0].all[0];
			var _g8 = 1;
			var _g12 = textures.length;
			while(_g8 < _g12) {
				var i2 = _g8++;
				var prevAll = textures[i2 - 1].all;
				var prev = prevAll[prevAll.length - 1];
				prev.next = textures[i2].all[0];
			}
		}
		if(c.globals == null) {
			c.globalsSize = 0;
		}
		if(c.params == null) {
			c.paramsSize = 0;
		}
		if(c.buffers == null) {
			c.bufferCount = 0;
		}
		c.data = data;
		return c;
	}
	,__class__: hxsl_Cache
};
var hxsl_Channel = $hxEnums["hxsl.Channel"] = { __ename__ : true, __constructs__ : ["Unknown","R","G","B","A","PackedFloat","PackedNormal"]
	,Unknown: {_hx_index:0,__enum__:"hxsl.Channel",toString:$estr}
	,R: {_hx_index:1,__enum__:"hxsl.Channel",toString:$estr}
	,G: {_hx_index:2,__enum__:"hxsl.Channel",toString:$estr}
	,B: {_hx_index:3,__enum__:"hxsl.Channel",toString:$estr}
	,A: {_hx_index:4,__enum__:"hxsl.Channel",toString:$estr}
	,PackedFloat: {_hx_index:5,__enum__:"hxsl.Channel",toString:$estr}
	,PackedNormal: {_hx_index:6,__enum__:"hxsl.Channel",toString:$estr}
};
hxsl_Channel.__empty_constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
var hxsl_Clone = function() {
	this.varMap = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Clone"] = hxsl_Clone;
hxsl_Clone.__name__ = "hxsl.Clone";
hxsl_Clone.shaderData = function(s) {
	return new hxsl_Clone().shader(s);
};
hxsl_Clone.prototype = {
	tvar: function(v) {
		var v2 = this.varMap.h[v.id];
		if(v2 != null) {
			return v2;
		}
		v2 = { id : hxsl_Tools.allocVarId(), type : v.type, name : v.name, kind : v.kind};
		this.varMap.h[v.id] = v2;
		if(v.parent != null) {
			v2.parent = this.tvar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		v2.type = this.ttype(v.type);
		return v2;
	}
	,tfun: function(f) {
		var tmp = this.ttype(f.ret);
		var f1 = f.kind;
		var tmp1 = this.tvar(f.ref);
		var _g = [];
		var _g1 = 0;
		var _g2 = f.args;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(this.tvar(a));
		}
		return { ret : tmp, kind : f1, ref : tmp1, args : _g, expr : this.texpr(f.expr)};
	}
	,ttype: function(t) {
		switch(t._hx_index) {
		case 13:
			var vl = t.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.tvar(v));
			}
			return hxsl_Type.TStruct(_g);
		case 14:
			var vars = t.variants;
			return hxsl_Type.TFun(vars);
		case 15:
			var size = t.size;
			var t1 = t.t;
			var tmp = this.ttype(t1);
			var tmp1;
			switch(size._hx_index) {
			case 0:
				var _g11 = size.v;
				tmp1 = size;
				break;
			case 1:
				var v1 = size.v;
				tmp1 = hxsl_SizeDecl.SVar(this.tvar(v1));
				break;
			}
			return hxsl_Type.TArray(tmp,tmp1);
		default:
			return t;
		}
	}
	,texpr: function(e) {
		var e2 = hxsl_Tools.map(e,$bind(this,this.texpr));
		e2.t = this.ttype(e.t);
		var _g = e2.e;
		var tmp;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			tmp = hxsl_TExprDef.TVar(this.tvar(v));
			break;
		case 7:
			var init = _g.init;
			var v1 = _g.v;
			tmp = hxsl_TExprDef.TVarDecl(this.tvar(v1),init);
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v2 = _g.v;
			tmp = hxsl_TExprDef.TFor(this.tvar(v2),it,loop);
			break;
		default:
			tmp = e2.e;
		}
		e2.e = tmp;
		return e2;
	}
	,shader: function(s) {
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.tvar(v));
		}
		var tmp = _g;
		var _g3 = [];
		var _g4 = 0;
		var _g5 = s.funs;
		while(_g4 < _g5.length) {
			var f = _g5[_g4];
			++_g4;
			_g3.push(this.tfun(f));
		}
		return { name : s1, vars : tmp, funs : _g3};
	}
	,__class__: hxsl_Clone
};
var hxsl__$Dce_VarDeps = function(v) {
	this.v = v;
	this.used = false;
	this.deps = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Dce.VarDeps"] = hxsl__$Dce_VarDeps;
hxsl__$Dce_VarDeps.__name__ = "hxsl._Dce.VarDeps";
hxsl__$Dce_VarDeps.prototype = {
	__class__: hxsl__$Dce_VarDeps
};
var hxsl_Dce = function() {
};
$hxClasses["hxsl.Dce"] = hxsl_Dce;
hxsl_Dce.__name__ = "hxsl.Dce";
hxsl_Dce.prototype = {
	dce: function(vertex,fragment) {
		this.used = new haxe_ds_IntMap();
		this.channelVars = [];
		var inputs = [];
		var _g = 0;
		var _g1 = vertex.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var i = this.get(v);
			if(v.kind == hxsl_VarKind.Input) {
				inputs.push(i);
			}
			if(v.kind == hxsl_VarKind.Output) {
				i.keep = true;
			}
		}
		var _g2 = 0;
		var _g3 = fragment.vars;
		while(_g2 < _g3.length) {
			var v1 = _g3[_g2];
			++_g2;
			var i1 = this.get(v1);
			if(v1.kind == hxsl_VarKind.Output) {
				i1.keep = true;
			}
		}
		var _g4 = 0;
		var _g5 = vertex.funs;
		while(_g4 < _g5.length) {
			var f = _g5[_g4];
			++_g4;
			this.check(f.expr,[],[]);
		}
		var _g6 = 0;
		var _g7 = fragment.funs;
		while(_g6 < _g7.length) {
			var f1 = _g7[_g6];
			++_g6;
			this.check(f1.expr,[],[]);
		}
		var outExprs = [];
		while(true) {
			var v2 = this.used.iterator();
			while(v2.hasNext()) {
				var v3 = v2.next();
				if(v3.keep) {
					this.markRec(v3);
				}
			}
			while(inputs.length > 1 && !inputs[inputs.length - 1].used) inputs.pop();
			var _g8 = 0;
			while(_g8 < inputs.length) {
				var v4 = inputs[_g8];
				++_g8;
				this.markRec(v4);
			}
			outExprs = [];
			var _g9 = 0;
			var _g10 = vertex.funs;
			while(_g9 < _g10.length) {
				var f2 = _g10[_g9];
				++_g9;
				outExprs.push(this.mapExpr(f2.expr,false));
			}
			var _g11 = 0;
			var _g12 = fragment.funs;
			while(_g11 < _g12.length) {
				var f3 = _g12[_g11];
				++_g11;
				outExprs.push(this.mapExpr(f3.expr,false));
			}
			this.markAsKeep = false;
			var _g13 = 0;
			while(_g13 < outExprs.length) {
				var e = outExprs[_g13];
				++_g13;
				this.checkBranches(e);
			}
			if(!this.markAsKeep) {
				break;
			}
		}
		var _g81 = 0;
		var _g91 = vertex.funs;
		while(_g81 < _g91.length) {
			var f4 = _g91[_g81];
			++_g81;
			f4.expr = outExprs.shift();
		}
		var _g101 = 0;
		var _g111 = fragment.funs;
		while(_g101 < _g111.length) {
			var f5 = _g111[_g101];
			++_g101;
			f5.expr = outExprs.shift();
		}
		var v5 = this.used.iterator();
		while(v5.hasNext()) {
			var v6 = v5.next();
			if(v6.used) {
				continue;
			}
			if(v6.v.kind == hxsl_VarKind.Input) {
				continue;
			}
			HxOverrides.remove(vertex.vars,v6.v);
			HxOverrides.remove(fragment.vars,v6.v);
		}
		return { fragment : fragment, vertex : vertex};
	}
	,get: function(v) {
		var vd = this.used.h[v.id];
		if(vd == null) {
			vd = new hxsl__$Dce_VarDeps(v);
			this.used.h[v.id] = vd;
		}
		return vd;
	}
	,markRec: function(v) {
		if(v.used) {
			return;
		}
		v.used = true;
		var d = v.deps.iterator();
		while(d.hasNext()) {
			var d1 = d.next();
			this.markRec(d1);
		}
	}
	,link: function(v,writeTo) {
		var vd = this.get(v);
		var _g = 0;
		while(_g < writeTo.length) {
			var w = writeTo[_g];
			++_g;
			if(w == null) {
				if(!vd.keep) {
					vd.keep = true;
					this.markAsKeep = true;
				}
				continue;
			}
			w.deps.h[v.id] = vd;
		}
	}
	,check: function(e,writeTo,isAffected) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			this.link(v,writeTo);
			break;
		case 4:
			var el = _g.el;
			var noWrite = [];
			var _g1 = 0;
			var _g11 = el.length;
			while(_g1 < _g11) {
				var i = _g1++;
				this.check(el[i],i < el.length - 1 ? noWrite : writeTo,isAffected);
			}
			break;
		case 5:
			var _g13 = _g.e2;
			var _g12 = _g.e1;
			var _g111 = _g.op;
			switch(_g111._hx_index) {
			case 4:
				var _g16 = _g12.t;
				var _g15 = _g12.p;
				var _g14 = _g12.e;
				switch(_g14._hx_index) {
				case 1:
					var e1 = _g13;
					var v1 = _g14.v;
					var v2 = this.get(v1);
					writeTo.push(v2);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v2) < 0) {
						isAffected.push(v2);
					}
					break;
				case 9:
					var _g19 = _g14.regs;
					var _g18 = _g14.e;
					var _g22 = _g18.t;
					var _g21 = _g18.p;
					var _g20 = _g18.e;
					if(_g20._hx_index == 1) {
						var e2 = _g13;
						var v3 = _g20.v;
						var v4 = this.get(v3);
						writeTo.push(v4);
						this.check(e2,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v4) < 0) {
							isAffected.push(v4);
						}
					} else {
						var f = $bind(this,this.check);
						var writeTo1 = writeTo;
						var isAffected1 = isAffected;
						hxsl_Tools.iter(e,function(e3) {
							f(e3,writeTo1,isAffected1);
						});
					}
					break;
				default:
					var f1 = $bind(this,this.check);
					var writeTo2 = writeTo;
					var isAffected2 = isAffected;
					hxsl_Tools.iter(e,function(e4) {
						f1(e4,writeTo2,isAffected2);
					});
				}
				break;
			case 20:
				var _g24 = _g111.op;
				var _g27 = _g12.t;
				var _g26 = _g12.p;
				var _g25 = _g12.e;
				switch(_g25._hx_index) {
				case 1:
					var e5 = _g13;
					var v5 = _g25.v;
					var v6 = this.get(v5);
					writeTo.push(v6);
					this.check(e5,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v6) < 0) {
						isAffected.push(v6);
					}
					break;
				case 9:
					var _g30 = _g25.regs;
					var _g29 = _g25.e;
					var _g33 = _g29.t;
					var _g32 = _g29.p;
					var _g31 = _g29.e;
					if(_g31._hx_index == 1) {
						var e6 = _g13;
						var v7 = _g31.v;
						var v8 = this.get(v7);
						writeTo.push(v8);
						this.check(e6,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v8) < 0) {
							isAffected.push(v8);
						}
					} else {
						var f2 = $bind(this,this.check);
						var writeTo3 = writeTo;
						var isAffected3 = isAffected;
						hxsl_Tools.iter(e,function(e7) {
							f2(e7,writeTo3,isAffected3);
						});
					}
					break;
				default:
					var f3 = $bind(this,this.check);
					var writeTo4 = writeTo;
					var isAffected4 = isAffected;
					hxsl_Tools.iter(e,function(e8) {
						f3(e8,writeTo4,isAffected4);
					});
				}
				break;
			default:
				var f4 = $bind(this,this.check);
				var writeTo5 = writeTo;
				var isAffected5 = isAffected;
				hxsl_Tools.iter(e,function(e9) {
					f4(e9,writeTo5,isAffected5);
				});
			}
			break;
		case 7:
			var init = _g.init;
			var v9 = _g.v;
			if(init != null) {
				writeTo.push(this.get(v9));
				this.check(init,writeTo,isAffected);
				writeTo.pop();
			} else {
				var f5 = $bind(this,this.check);
				var writeTo6 = writeTo;
				var isAffected6 = isAffected;
				hxsl_Tools.iter(e,function(e10) {
					f5(e10,writeTo6,isAffected6);
				});
			}
			break;
		case 8:
			var _g36 = _g.args;
			var _g35 = _g.e;
			var _g39 = _g35.t;
			var _g38 = _g35.p;
			var _g37 = _g35.e;
			if(_g37._hx_index == 2) {
				switch(_g37.g._hx_index) {
				case 63:
					if(_g36.length == 3) {
						var _g56 = _g36[2];
						var _g54 = _g36[0];
						var _g59 = _g54.t;
						var _g58 = _g54.p;
						var _g57 = _g54.e;
						if(_g57._hx_index == 1) {
							var _g63 = _g56.t;
							var _g62 = _g56.p;
							var _g61 = _g56.e;
							if(_g61._hx_index == 0) {
								var _g64 = _g61.c;
								if(_g64._hx_index == 2) {
									var c = _g57.v;
									var uv = _g36[1];
									var cid = _g64.v;
									this.check(uv,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var f6 = $bind(this,this.check);
									var writeTo7 = writeTo;
									var isAffected7 = isAffected;
									hxsl_Tools.iter(e,function(e11) {
										f6(e11,writeTo7,isAffected7);
									});
								}
							} else {
								var f7 = $bind(this,this.check);
								var writeTo8 = writeTo;
								var isAffected8 = isAffected;
								hxsl_Tools.iter(e,function(e12) {
									f7(e12,writeTo8,isAffected8);
								});
							}
						} else {
							var f8 = $bind(this,this.check);
							var writeTo9 = writeTo;
							var isAffected9 = isAffected;
							hxsl_Tools.iter(e,function(e13) {
								f8(e13,writeTo9,isAffected9);
							});
						}
					} else {
						var f9 = $bind(this,this.check);
						var writeTo10 = writeTo;
						var isAffected10 = isAffected;
						hxsl_Tools.iter(e,function(e14) {
							f9(e14,writeTo10,isAffected10);
						});
					}
					break;
				case 64:
					if(_g36.length == 4) {
						var _g44 = _g36[3];
						var _g41 = _g36[0];
						var _g47 = _g41.t;
						var _g46 = _g41.p;
						var _g45 = _g41.e;
						if(_g45._hx_index == 1) {
							var _g51 = _g44.t;
							var _g50 = _g44.p;
							var _g49 = _g44.e;
							if(_g49._hx_index == 0) {
								var _g52 = _g49.c;
								if(_g52._hx_index == 2) {
									var c1 = _g45.v;
									var uv1 = _g36[1];
									var lod = _g36[2];
									var cid1 = _g52.v;
									this.check(uv1,writeTo,isAffected);
									this.check(lod,writeTo,isAffected);
									if(this.channelVars[cid1] == null) {
										this.channelVars[cid1] = c1;
										this.link(c1,writeTo);
									} else {
										this.link(this.channelVars[cid1],writeTo);
									}
								} else {
									var f10 = $bind(this,this.check);
									var writeTo11 = writeTo;
									var isAffected11 = isAffected;
									hxsl_Tools.iter(e,function(e15) {
										f10(e15,writeTo11,isAffected11);
									});
								}
							} else {
								var f11 = $bind(this,this.check);
								var writeTo12 = writeTo;
								var isAffected12 = isAffected;
								hxsl_Tools.iter(e,function(e16) {
									f11(e16,writeTo12,isAffected12);
								});
							}
						} else {
							var f12 = $bind(this,this.check);
							var writeTo13 = writeTo;
							var isAffected13 = isAffected;
							hxsl_Tools.iter(e,function(e17) {
								f12(e17,writeTo13,isAffected13);
							});
						}
					} else {
						var f13 = $bind(this,this.check);
						var writeTo14 = writeTo;
						var isAffected14 = isAffected;
						hxsl_Tools.iter(e,function(e18) {
							f13(e18,writeTo14,isAffected14);
						});
					}
					break;
				default:
					var f14 = $bind(this,this.check);
					var writeTo15 = writeTo;
					var isAffected15 = isAffected;
					hxsl_Tools.iter(e,function(e19) {
						f14(e19,writeTo15,isAffected15);
					});
				}
			} else {
				var f15 = $bind(this,this.check);
				var writeTo16 = writeTo;
				var isAffected16 = isAffected;
				hxsl_Tools.iter(e,function(e20) {
					f15(e20,writeTo16,isAffected16);
				});
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var e21 = _g.econd;
			var affect = [];
			this.check(eif,writeTo,affect);
			if(eelse != null) {
				this.check(eelse,writeTo,affect);
			}
			var len = affect.length;
			var _g2 = 0;
			while(_g2 < writeTo.length) {
				var v10 = writeTo[_g2];
				++_g2;
				if(affect.indexOf(v10) < 0) {
					affect.push(v10);
				}
			}
			this.check(e21,affect,isAffected);
			var _g17 = 0;
			var _g23 = len;
			while(_g17 < _g23) {
				var i1 = _g17++;
				var v11 = affect[i1];
				if(isAffected.indexOf(v11) < 0) {
					isAffected.push(v11);
				}
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v12 = _g.v;
			var affect1 = [];
			this.check(loop,writeTo,affect1);
			this.check(it,affect1,isAffected);
			var _g3 = 0;
			while(_g3 < affect1.length) {
				var v13 = affect1[_g3];
				++_g3;
				if(isAffected.indexOf(v13) < 0) {
					isAffected.push(v13);
				}
			}
			break;
		default:
			var f16 = $bind(this,this.check);
			var writeTo17 = writeTo;
			var isAffected17 = isAffected;
			hxsl_Tools.iter(e,function(e22) {
				f16(e22,writeTo17,isAffected17);
			});
		}
	}
	,checkBranches: function(e) {
		var _g = e.e;
		if(_g._hx_index == 10) {
			var _g3 = _g.eelse;
			var _g2 = _g.eif;
			var cond = _g.econd;
			var writeTo = [null];
			this.check(cond,writeTo,[]);
		}
		hxsl_Tools.iter(e,$bind(this,this.checkBranches));
	}
	,mapExpr: function(e,isVar) {
		var _gthis = this;
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var out = [];
			var count = 0;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				var isVar1 = isVar && count == el.length - 1;
				var e2 = this.mapExpr(e1,isVar1);
				if(hxsl_Tools.hasSideEffect(e2) || isVar1) {
					out.push(e2);
				}
				++count;
			}
			return { e : hxsl_TExprDef.TBlock(out), p : e.p, t : e.t};
		case 5:
			var _g12 = _g.e2;
			var _g11 = _g.e1;
			var _g10 = _g.op;
			switch(_g10._hx_index) {
			case 4:
				var _g15 = _g11.t;
				var _g14 = _g11.p;
				var _g13 = _g11.e;
				switch(_g13._hx_index) {
				case 1:
					var v = _g13.v;
					if(!this.get(v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e3) {
							return _gthis.mapExpr(e3,true);
						});
					}
					break;
				case 9:
					var _g18 = _g13.regs;
					var _g17 = _g13.e;
					var _g21 = _g17.t;
					var _g20 = _g17.p;
					var _g19 = _g17.e;
					if(_g19._hx_index == 1) {
						var v1 = _g19.v;
						if(!this.get(v1).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e4) {
								return _gthis.mapExpr(e4,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e5) {
							return _gthis.mapExpr(e5,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e6) {
						return _gthis.mapExpr(e6,true);
					});
				}
				break;
			case 20:
				var _g23 = _g10.op;
				var _g26 = _g11.t;
				var _g25 = _g11.p;
				var _g24 = _g11.e;
				switch(_g24._hx_index) {
				case 1:
					var v2 = _g24.v;
					if(!this.get(v2).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e7) {
							return _gthis.mapExpr(e7,true);
						});
					}
					break;
				case 9:
					var _g29 = _g24.regs;
					var _g28 = _g24.e;
					var _g32 = _g28.t;
					var _g31 = _g28.p;
					var _g30 = _g28.e;
					if(_g30._hx_index == 1) {
						var v3 = _g30.v;
						if(!this.get(v3).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e8) {
								return _gthis.mapExpr(e8,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e9) {
							return _gthis.mapExpr(e9,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e10) {
						return _gthis.mapExpr(e10,true);
					});
				}
				break;
			default:
				return hxsl_Tools.map(e,function(e11) {
					return _gthis.mapExpr(e11,true);
				});
			}
			break;
		case 7:
			var _g6 = _g.init;
			var v4 = _g.v;
			if(!this.get(v4).used) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,function(e12) {
					return _gthis.mapExpr(e12,true);
				});
			}
			break;
		case 8:
			var _g35 = _g.args;
			var _g34 = _g.e;
			var _g38 = _g34.t;
			var _g37 = _g34.p;
			var _g36 = _g34.e;
			if(_g36._hx_index == 2) {
				switch(_g36.g._hx_index) {
				case 63:
					if(_g35.length == 3) {
						var _g59 = _g35[2];
						var _g57 = _g35[0];
						var _g62 = _g59.t;
						var _g61 = _g59.p;
						var _g60 = _g59.e;
						if(_g60._hx_index == 0) {
							var _g63 = _g60.c;
							if(_g63._hx_index == 2) {
								var uv = _g35[1];
								var cid = _g63.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texture), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e13) {
									return _gthis.mapExpr(e13,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e14) {
								return _gthis.mapExpr(e14,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e15) {
							return _gthis.mapExpr(e15,true);
						});
					}
					break;
				case 64:
					if(_g35.length == 4) {
						var _g43 = _g35[3];
						var _g40 = _g35[0];
						var _g46 = _g43.t;
						var _g45 = _g43.p;
						var _g44 = _g43.e;
						if(_g44._hx_index == 0) {
							var _g47 = _g44.c;
							if(_g47._hx_index == 2) {
								var uv1 = _g35[1];
								var lod = _g35[2];
								var cid1 = _g47.v;
								var c1 = this.channelVars[cid1];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureLod), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c1), t : c1.type, p : e.p},this.mapExpr(uv1,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e16) {
									return _gthis.mapExpr(e16,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e17) {
								return _gthis.mapExpr(e17,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e18) {
							return _gthis.mapExpr(e18,true);
						});
					}
					break;
				case 65:
					if(_g35.length == 3) {
						var _g51 = _g35[2];
						var _g49 = _g35[0];
						var _g54 = _g51.t;
						var _g53 = _g51.p;
						var _g52 = _g51.e;
						if(_g52._hx_index == 0) {
							var _g55 = _g52.c;
							if(_g55._hx_index == 2) {
								var pos = _g35[1];
								var cid2 = _g55.v;
								var c2 = this.channelVars[cid2];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c2), t : c2.type, p : e.p},this.mapExpr(pos,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e19) {
									return _gthis.mapExpr(e19,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e20) {
								return _gthis.mapExpr(e20,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e21) {
							return _gthis.mapExpr(e21,true);
						});
					}
					break;
				case 66:
					if(_g35.length == 4) {
						var _g68 = _g35[3];
						var _g65 = _g35[0];
						var _g71 = _g68.t;
						var _g70 = _g68.p;
						var _g69 = _g68.e;
						if(_g69._hx_index == 0) {
							var _g72 = _g69.c;
							if(_g72._hx_index == 2) {
								var pos1 = _g35[1];
								var lod1 = _g35[2];
								var cid3 = _g72.v;
								var c3 = this.channelVars[cid3];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c3), t : c3.type, p : e.p},this.mapExpr(pos1,true),this.mapExpr(lod1,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e22) {
									return _gthis.mapExpr(e22,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e23) {
								return _gthis.mapExpr(e23,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e24) {
							return _gthis.mapExpr(e24,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e25) {
						return _gthis.mapExpr(e25,true);
					});
				}
			} else {
				return hxsl_Tools.map(e,function(e26) {
					return _gthis.mapExpr(e26,true);
				});
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var econd = _g.eif;
			var e27 = _g.econd;
			var e28 = this.mapExpr(e27,true);
			var econd1 = this.mapExpr(econd,isVar);
			var eelse1 = eelse == null ? null : this.mapExpr(eelse,isVar);
			if(!isVar && !hxsl_Tools.hasSideEffect(econd1) && (eelse1 == null || !hxsl_Tools.hasSideEffect(eelse1))) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e28.t, p : e28.p};
			}
			return { e : hxsl_TExprDef.TIf(e28,econd1,eelse1), p : e28.p, t : e28.t};
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v5 = _g.v;
			var it1 = this.mapExpr(it,true);
			var loop1 = this.mapExpr(loop,false);
			if(!hxsl_Tools.hasSideEffect(loop1)) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl_TExprDef.TFor(v5,it1,loop1), p : e.p, t : e.t};
		default:
			return hxsl_Tools.map(e,function(e29) {
				return _gthis.mapExpr(e29,true);
			});
		}
	}
	,__class__: hxsl_Dce
};
var hxsl_Eval = function() {
	this.varMap = new haxe_ds_ObjectMap();
	this.funMap = new haxe_ds_ObjectMap();
	this.constants = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Eval"] = hxsl_Eval;
hxsl_Eval.__name__ = "hxsl.Eval";
hxsl_Eval.prototype = {
	setConstant: function(v,c) {
		this.constants.h[v.id] = hxsl_TExprDef.TConst(c);
	}
	,mapVar: function(v) {
		var v2 = this.varMap.h[v.__id__];
		if(v2 != null) {
			if(v == v2) {
				return v2;
			} else {
				return this.mapVar(v2);
			}
		}
		if(v.parent != null) {
			this.mapVar(v.parent);
			v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				if(v == v2) {
					return v2;
				} else {
					return this.mapVar(v2);
				}
			}
		}
		var _g = v.type;
		var v21;
		if(_g._hx_index == 17) {
			var _g1 = _g.size;
			v21 = true;
		} else {
			v21 = false;
		}
		v2 = { id : v21 ? v.id : hxsl_Tools.allocVarId(), name : v.name, type : v.type, kind : v.kind};
		if(v.parent != null) {
			v2.parent = this.mapVar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		this.varMap.set(v,v2);
		this.varMap.set(v2,v2);
		var _g2 = v2.type;
		switch(_g2._hx_index) {
		case 13:
			var vl = _g2.vl;
			var _g21 = [];
			var _g3 = 0;
			while(_g3 < vl.length) {
				var v1 = vl[_g3];
				++_g3;
				_g21.push(this.mapVar(v1));
			}
			v2.type = hxsl_Type.TStruct(_g21);
			break;
		case 15:
			var _g8 = _g2.size;
			if(_g8._hx_index == 1) {
				var t = _g2.t;
				var vs = _g8.v;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _g22 = c.c;
						if(_g22._hx_index == 2) {
							var v3 = _g22.v;
							var _g23 = v2.type;
							var tmp;
							if(_g23._hx_index == 15) {
								var _g4 = _g23.size;
								var _g31 = _g23.t;
								tmp = true;
							} else {
								tmp = false;
							}
							v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v3)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v3));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs);
					var _g24 = v2.type;
					var tmp1;
					if(_g24._hx_index == 15) {
						var _g41 = _g24.size;
						var _g32 = _g24.t;
						tmp1 = true;
					} else {
						tmp1 = false;
					}
					v2.type = tmp1 ? hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2));
				}
			}
			break;
		case 16:
			var _g5 = _g2.size;
			if(_g5._hx_index == 1) {
				var t1 = _g2.t;
				var vs1 = _g5.v;
				var c1 = this.constants.h[vs1.id];
				if(c1 != null) {
					if(c1 == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs1.name,null);
					} else if(c1._hx_index == 0) {
						var _g25 = c1.c;
						if(_g25._hx_index == 2) {
							var v4 = _g25.v;
							var _g26 = v2.type;
							var tmp2;
							if(_g26._hx_index == 15) {
								var _g42 = _g26.size;
								var _g33 = _g26.t;
								tmp2 = true;
							} else {
								tmp2 = false;
							}
							v2.type = tmp2 ? hxsl_Type.TArray(t1,hxsl_SizeDecl.SConst(v4)) : hxsl_Type.TBuffer(t1,hxsl_SizeDecl.SConst(v4));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs1.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs1.name,null);
					}
				} else {
					var vs21 = this.mapVar(vs1);
					var _g27 = v2.type;
					var tmp3;
					if(_g27._hx_index == 15) {
						var _g43 = _g27.size;
						var _g34 = _g27.t;
						tmp3 = true;
					} else {
						tmp3 = false;
					}
					v2.type = tmp3 ? hxsl_Type.TArray(t1,hxsl_SizeDecl.SVar(vs21)) : hxsl_Type.TBuffer(t1,hxsl_SizeDecl.SVar(vs21));
				}
			}
			break;
		default:
		}
		return v2;
	}
	,'eval': function(s) {
		var funs = [];
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var f1 = f.kind;
			var f2 = this.mapVar(f.ref);
			var _g2 = [];
			var _g11 = 0;
			var _g21 = f.args;
			while(_g11 < _g21.length) {
				var a = _g21[_g11];
				++_g11;
				_g2.push(this.mapVar(a));
			}
			var f21 = { kind : f1, ref : f2, args : _g2, ret : f.ret, expr : f.expr};
			if(!this.inlineCalls || f.kind != hxsl_FunctionKind.Helper) {
				funs.push(f21);
			}
			this.funMap.set(f21.ref,f);
		}
		var _g22 = 0;
		var _g3 = funs.length;
		while(_g22 < _g3) {
			var i = _g22++;
			this.curFun = funs[i];
			this.curFun.expr = this.evalExpr(this.curFun.expr,false);
		}
		var s1 = s.name;
		var _g4 = [];
		var _g5 = 0;
		var _g6 = s.vars;
		while(_g5 < _g6.length) {
			var v = _g6[_g5];
			++_g5;
			_g4.push(this.mapVar(v));
		}
		return { name : s1, vars : _g4, funs : funs};
	}
	,hasReturn: function(e) {
		this.markReturn = false;
		this.hasReturnLoop(e);
		return this.markReturn;
	}
	,hasReturnLoop: function(e) {
		var _g = e.e;
		if(_g._hx_index == 12) {
			var _g1 = _g.e;
			this.markReturn = true;
		} else if(!this.markReturn) {
			hxsl_Tools.iter(e,$bind(this,this.hasReturnLoop));
		}
	}
	,handleReturn: function(e,isFinal) {
		if(isFinal == null) {
			isFinal = false;
		}
		var _g = e.e;
		switch(_g._hx_index) {
		case 3:
			var v = _g.e;
			var v1 = this.handleReturn(v,isFinal);
			return { e : hxsl_TExprDef.TParenthesis(v1), t : v1.t, p : e.p};
		case 4:
			var el = _g.el;
			var i = 0;
			var last = el.length;
			var out = [];
			_hx_loop1: while(i < last) {
				var e1 = el[i++];
				if(i == last) {
					out.push(this.handleReturn(e1,isFinal));
				} else {
					var _g1 = e1.e;
					switch(_g1._hx_index) {
					case 10:
						if(_g1.eelse == null) {
							var econd = _g1.econd;
							var eif = _g1.eif;
							if(isFinal && this.hasReturn(eif)) {
								out.push(this.handleReturn({ e : hxsl_TExprDef.TIf(econd,eif,{ e : hxsl_TExprDef.TBlock(el.slice(i)), t : e1.t, p : e1.p}), t : e1.t, p : e1.p}));
								break _hx_loop1;
							} else {
								out.push(this.handleReturn(e1));
							}
						} else {
							out.push(this.handleReturn(e1));
						}
						break;
					case 12:
						var e2 = _g1.e;
						out.push(this.handleReturn(e2,isFinal));
						break _hx_loop1;
					default:
						out.push(this.handleReturn(e1));
					}
				}
			}
			var t = isFinal ? out[out.length - 1].t : e.t;
			return { e : hxsl_TExprDef.TBlock(out), t : t, p : e.p};
		case 10:
			var eelse = _g.eelse;
			var eif1 = _g.eif;
			var cond = _g.econd;
			if(eelse != null && isFinal) {
				var cond1 = this.handleReturn(cond);
				var eif2 = this.handleReturn(eif1,isFinal);
				return { e : hxsl_TExprDef.TIf(cond1,eif2,this.handleReturn(eelse,isFinal)), t : eif2.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
			}
			break;
		case 12:
			var v2 = _g.e;
			if(!isFinal) {
				hxsl_Error.t("Cannot inline not final return",e.p);
			}
			if(v2 == null) {
				return { e : hxsl_TExprDef.TBlock([]), t : hxsl_Type.TVoid, p : e.p};
			}
			return this.handleReturn(v2,true);
		default:
			return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
		}
	}
	,handleReturnDef: function(e) {
		return this.handleReturn(e);
	}
	,evalCall: function(g,args,oldArgs,pos) {
		switch(g._hx_index) {
		case 38:
			if(args.length == 1) {
				var _g = args[0];
				var _g3 = _g.t;
				var _g2 = _g.p;
				var _g1 = _g.e;
				if(_g1._hx_index == 0) {
					var _g4 = _g1.c;
					if(_g4._hx_index == 2) {
						var i = _g4.v;
						return hxsl_TExprDef.TConst(hxsl_Const.CFloat(i));
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 63:case 64:
			var i1;
			var _g5 = args[0].e;
			if(_g5._hx_index == 0) {
				var _g11 = _g5.c;
				if(_g11._hx_index == 2) {
					var i2 = _g11.v;
					i1 = i2;
				} else {
					hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
				throw new js__$Boot_HaxeError("assert");
			}
			var channel = oldArgs[0];
			var _g31 = channel.e;
			var channel1;
			if(_g31._hx_index == 1) {
				var v = _g31.v;
				channel1 = hxsl_TExprDef.TVar(this.mapVar(v));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			channel = { e : channel1, t : channel.t, p : channel.p};
			var count;
			var _g51 = channel.t;
			if(_g51._hx_index == 17) {
				var i3 = _g51.size;
				count = i3;
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			var channelMode = Type.createEnumIndex(hxsl_Channel,i1 & 7,null);
			var targs = [channel];
			var _g7 = 1;
			var _g8 = args.length;
			while(_g7 < _g8) {
				var i4 = _g7++;
				targs.push(args[i4]);
			}
			targs.push({ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(i1 >> 3)), t : hxsl_Type.TInt, p : pos});
			var tget = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},targs), t : hxsl_Type.TVoid, p : pos};
			switch(channelMode._hx_index) {
			case 0:
				var zero = { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0.)), t : hxsl_Type.TFloat, p : pos};
				if(count == 1) {
					return zero.e;
				}
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4][count - 2]), t : hxsl_Type.TVoid, p : pos},[zero]);
			case 1:case 2:case 3:case 4:
				var tmp;
				switch(count) {
				case 1:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X];
						break;
					case 2:
						tmp = [hxsl_Component.Y];
						break;
					case 3:
						tmp = [hxsl_Component.Z];
						break;
					case 4:
						tmp = [hxsl_Component.W];
						break;
					default:
						throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 2:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 3:
						tmp = [hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 3:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
				}
				return hxsl_TExprDef.TSwiz(tget,tmp);
			case 5:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Unpack), t : hxsl_Type.TVoid, p : pos},[tget]);
			case 6:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.UnpackNormal), t : hxsl_Type.TVoid, p : pos},[tget]);
			}
			break;
		case 67:
			var args1 = args;
			var _g6 = 0;
			while(_g6 < args1.length) {
				var a = args1[_g6];
				++_g6;
				haxe_Log.trace(hxsl_Printer.toString(a),{ fileName : a.p.file, lineNumber : 0, className : null, methodName : null});
			}
			return hxsl_TExprDef.TBlock([]);
		default:
			return null;
		}
	}
	,constantsToString: function() {
		var _g = [];
		var c = this.constants.keys();
		while(c.hasNext()) {
			var c1 = c.next();
			_g.push(c1 + " => " + hxsl_Printer.toString({ e : this.constants.h[c1], t : hxsl_Type.TVoid, p : null},true));
		}
		return _g.toString();
	}
	,ifBlock: function(e) {
		var tmp;
		if(e != null) {
			var _g = e.e;
			var tmp1;
			if(_g._hx_index == 10) {
				var _g3 = _g.eelse;
				var _g2 = _g.eif;
				var _g1 = _g.econd;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = true;
		}
		if(tmp) {
			return e;
		}
		return { e : hxsl_TExprDef.TBlock([e]), t : e.t, p : e.p};
	}
	,evalExpr: function(e,isVal) {
		if(isVal == null) {
			isVal = true;
		}
		var _gthis = this;
		var d;
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var _g26 = _g.c;
			d = e.e;
			break;
		case 1:
			var v = _g.v;
			var c = this.constants.h[v.id];
			if(c != null) {
				d = c;
			} else {
				var v2 = this.mapVar(v);
				d = hxsl_TExprDef.TVar(v2);
			}
			break;
		case 2:
			var _g4 = _g.g;
			d = e.e;
			break;
		case 3:
			var e1 = _g.e;
			var e2 = this.evalExpr(e1,isVal);
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var _g11 = _g1.c;
				d = e2.e;
			} else {
				d = hxsl_TExprDef.TParenthesis(e2);
			}
			break;
		case 4:
			var el = _g.el;
			var out = [];
			var last = el.length - 1;
			var _g2 = 0;
			var _g12 = el.length;
			while(_g2 < _g12) {
				var i = _g2++;
				var isVal1 = isVal && i == last;
				var e3 = this.evalExpr(el[i],isVal1);
				var _g3 = e3.e;
				switch(_g3._hx_index) {
				case 0:
					var _g21 = _g3.c;
					if(!(!isVal1)) {
						out.push(e3);
					}
					break;
				case 1:
					var _g13 = _g3.v;
					if(!(!isVal1)) {
						out.push(e3);
					}
					break;
				default:
					out.push(e3);
				}
			}
			d = out.length == 1 && this.curFun.kind != hxsl_FunctionKind.Init ? out[0].e : hxsl_TExprDef.TBlock(out);
			break;
		case 5:
			var e21 = _g.e2;
			var e11 = _g.e1;
			var op = _g.op;
			var e12 = this.evalExpr(e11);
			var e22 = this.evalExpr(e21);
			switch(op._hx_index) {
			case 0:
				var _g5 = e22.e;
				var _g14 = e12.e;
				if(_g14._hx_index == 0) {
					var _g22 = _g14.c;
					switch(_g22._hx_index) {
					case 2:
						if(_g5._hx_index == 0) {
							var _g7 = _g5.c;
							if(_g7._hx_index == 2) {
								var a = _g22.v;
								var b = _g7.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a + b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g5._hx_index == 0) {
							var _g41 = _g5.c;
							if(_g41._hx_index == 3) {
								var a1 = _g22.v;
								var b1 = _g41.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a1 + b1));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 1:
				var _g6 = e22.e;
				var _g15 = e12.e;
				if(_g15._hx_index == 0) {
					var _g23 = _g15.c;
					switch(_g23._hx_index) {
					case 2:
						if(_g6._hx_index == 0) {
							var _g71 = _g6.c;
							if(_g71._hx_index == 2) {
								var a2 = _g23.v;
								var b2 = _g71.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a2 * b2 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g6._hx_index == 0) {
							var _g42 = _g6.c;
							if(_g42._hx_index == 3) {
								var a3 = _g23.v;
								var b3 = _g42.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a3 * b3));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 2:
				var _g8 = e22.e;
				var _g16 = e12.e;
				if(_g16._hx_index == 0) {
					var _g24 = _g16.c;
					switch(_g24._hx_index) {
					case 2:
						if(_g8._hx_index == 0) {
							var _g72 = _g8.c;
							if(_g72._hx_index == 2) {
								var a4 = _g24.v;
								var b4 = _g72.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a4 / b4 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g8._hx_index == 0) {
							var _g43 = _g8.c;
							if(_g43._hx_index == 3) {
								var a5 = _g24.v;
								var b5 = _g43.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a5 / b5));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 3:
				var _g9 = e22.e;
				var _g17 = e12.e;
				if(_g17._hx_index == 0) {
					var _g25 = _g17.c;
					switch(_g25._hx_index) {
					case 2:
						if(_g9._hx_index == 0) {
							var _g73 = _g9.c;
							if(_g73._hx_index == 2) {
								var a6 = _g25.v;
								var b6 = _g73.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a6 - b6 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g9._hx_index == 0) {
							var _g44 = _g9.c;
							if(_g44._hx_index == 3) {
								var a7 = _g25.v;
								var b7 = _g44.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a7 - b7));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 4:case 21:
				d = hxsl_TExprDef.TBinop(op,e12,e22);
				break;
			case 5:
				var _g10 = e22.e;
				var _g18 = e12.e;
				if(_g18._hx_index == 0) {
					var _g27 = _g18.c;
					switch(_g27._hx_index) {
					case 0:
						d = _g10._hx_index == 0 ? _g10.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g91 = _g27.b;
						if(_g10._hx_index == 0) {
							var _g101 = _g10.c;
							switch(_g101._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a8 = _g91;
								var b8 = _g101.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a8 == b8 ? 0 : 1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g121 = _g27.v;
						if(_g10._hx_index == 0) {
							var _g131 = _g10.c;
							switch(_g131._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a9 = _g121;
								var b9 = _g131.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a9 - b9 == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g61 = _g27.v;
						if(_g10._hx_index == 0) {
							var _g74 = _g10.c;
							switch(_g74._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a10 = _g61;
								var b10 = _g74.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a10 > b10 ? 1 : a10 == b10 ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g31 = _g27.v;
						if(_g10._hx_index == 0) {
							var _g45 = _g10.c;
							switch(_g45._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a11 = _g31;
								var b11 = _g45.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a11 > b11 ? 1 : a11 == b11 ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 6:
				var _g19 = e22.e;
				var _g110 = e12.e;
				if(_g110._hx_index == 0) {
					var _g28 = _g110.c;
					switch(_g28._hx_index) {
					case 0:
						d = _g19._hx_index == 0 ? _g19.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g92 = _g28.b;
						if(_g19._hx_index == 0) {
							var _g102 = _g19.c;
							switch(_g102._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a12 = _g92;
								var b12 = _g102.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a12 == b12 ? 0 : 1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g122 = _g28.v;
						if(_g19._hx_index == 0) {
							var _g132 = _g19.c;
							switch(_g132._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a13 = _g122;
								var b13 = _g132.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a13 - b13 != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g62 = _g28.v;
						if(_g19._hx_index == 0) {
							var _g75 = _g19.c;
							switch(_g75._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a14 = _g62;
								var b14 = _g75.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a14 > b14 ? 1 : a14 == b14 ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g32 = _g28.v;
						if(_g19._hx_index == 0) {
							var _g46 = _g19.c;
							switch(_g46._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a15 = _g32;
								var b15 = _g46.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a15 > b15 ? 1 : a15 == b15 ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 7:
				var _g20 = e22.e;
				var _g111 = e12.e;
				if(_g111._hx_index == 0) {
					var _g29 = _g111.c;
					switch(_g29._hx_index) {
					case 0:
						d = _g20._hx_index == 0 ? _g20.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g93 = _g29.b;
						if(_g20._hx_index == 0) {
							var _g103 = _g20.c;
							switch(_g103._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a16 = _g93;
								var b16 = _g103.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a16 == b16 ? 0 : 1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g123 = _g29.v;
						if(_g20._hx_index == 0) {
							var _g133 = _g20.c;
							switch(_g133._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a17 = _g123;
								var b17 = _g133.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a17 - b17 > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g63 = _g29.v;
						if(_g20._hx_index == 0) {
							var _g76 = _g20.c;
							switch(_g76._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a18 = _g63;
								var b18 = _g76.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a18 > b18 ? 1 : a18 == b18 ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g33 = _g29.v;
						if(_g20._hx_index == 0) {
							var _g47 = _g20.c;
							switch(_g47._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a19 = _g33;
								var b19 = _g47.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a19 > b19 ? 1 : a19 == b19 ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 8:
				var _g30 = e22.e;
				var _g112 = e12.e;
				if(_g112._hx_index == 0) {
					var _g210 = _g112.c;
					switch(_g210._hx_index) {
					case 0:
						d = _g30._hx_index == 0 ? _g30.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g94 = _g210.b;
						if(_g30._hx_index == 0) {
							var _g104 = _g30.c;
							switch(_g104._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a20 = _g94;
								var b20 = _g104.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a20 == b20 ? 0 : 1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g124 = _g210.v;
						if(_g30._hx_index == 0) {
							var _g134 = _g30.c;
							switch(_g134._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a21 = _g124;
								var b21 = _g134.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a21 - b21 >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g64 = _g210.v;
						if(_g30._hx_index == 0) {
							var _g77 = _g30.c;
							switch(_g77._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a22 = _g64;
								var b22 = _g77.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a22 > b22 ? 1 : a22 == b22 ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g34 = _g210.v;
						if(_g30._hx_index == 0) {
							var _g48 = _g30.c;
							switch(_g48._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a23 = _g34;
								var b23 = _g48.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a23 > b23 ? 1 : a23 == b23 ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 9:
				var _g35 = e22.e;
				var _g113 = e12.e;
				if(_g113._hx_index == 0) {
					var _g211 = _g113.c;
					switch(_g211._hx_index) {
					case 0:
						d = _g35._hx_index == 0 ? _g35.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g95 = _g211.b;
						if(_g35._hx_index == 0) {
							var _g105 = _g35.c;
							switch(_g105._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a24 = _g95;
								var b24 = _g105.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a24 == b24 ? 0 : 1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g125 = _g211.v;
						if(_g35._hx_index == 0) {
							var _g135 = _g35.c;
							switch(_g135._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a25 = _g125;
								var b25 = _g135.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a25 - b25 < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g65 = _g211.v;
						if(_g35._hx_index == 0) {
							var _g78 = _g35.c;
							switch(_g78._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a26 = _g65;
								var b26 = _g78.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a26 > b26 ? 1 : a26 == b26 ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g36 = _g211.v;
						if(_g35._hx_index == 0) {
							var _g49 = _g35.c;
							switch(_g49._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a27 = _g36;
								var b27 = _g49.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a27 > b27 ? 1 : a27 == b27 ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 10:
				var _g37 = e22.e;
				var _g114 = e12.e;
				if(_g114._hx_index == 0) {
					var _g212 = _g114.c;
					switch(_g212._hx_index) {
					case 0:
						d = _g37._hx_index == 0 ? _g37.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g96 = _g212.b;
						if(_g37._hx_index == 0) {
							var _g106 = _g37.c;
							switch(_g106._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a28 = _g96;
								var b28 = _g106.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a28 == b28 ? 0 : 1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g126 = _g212.v;
						if(_g37._hx_index == 0) {
							var _g136 = _g37.c;
							switch(_g136._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a29 = _g126;
								var b29 = _g136.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a29 - b29 <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g66 = _g212.v;
						if(_g37._hx_index == 0) {
							var _g79 = _g37.c;
							switch(_g79._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a30 = _g66;
								var b30 = _g79.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a30 > b30 ? 1 : a30 == b30 ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g38 = _g212.v;
						if(_g37._hx_index == 0) {
							var _g410 = _g37.c;
							switch(_g410._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a31 = _g38;
								var b31 = _g410.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a31 > b31 ? 1 : a31 == b31 ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 11:
				var _g39 = e22.e;
				var _g115 = e12.e;
				if(_g115._hx_index == 0) {
					var _g213 = _g115.c;
					if(_g213._hx_index == 2) {
						if(_g39._hx_index == 0) {
							var _g411 = _g39.c;
							if(_g411._hx_index == 2) {
								var a32 = _g213.v;
								var b32 = _g411.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a32 & b32));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 12:
				var _g40 = e22.e;
				var _g116 = e12.e;
				if(_g116._hx_index == 0) {
					var _g214 = _g116.c;
					if(_g214._hx_index == 2) {
						if(_g40._hx_index == 0) {
							var _g412 = _g40.c;
							if(_g412._hx_index == 2) {
								var a33 = _g214.v;
								var b33 = _g412.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a33 | b33));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 13:
				var _g50 = e22.e;
				var _g117 = e12.e;
				if(_g117._hx_index == 0) {
					var _g215 = _g117.c;
					if(_g215._hx_index == 2) {
						if(_g50._hx_index == 0) {
							var _g413 = _g50.c;
							if(_g413._hx_index == 2) {
								var a34 = _g215.v;
								var b34 = _g413.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a34 ^ b34));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 14:
				var _g51 = e22.e;
				var _g118 = e12.e;
				if(_g118._hx_index == 0) {
					var _g216 = _g118.c;
					if(_g216._hx_index == 1) {
						var _g310 = _g216.b;
						if(_g51._hx_index == 0) {
							var _g414 = _g51.c;
							if(_g414._hx_index == 1) {
								var a35 = _g310;
								var b35 = _g414.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a35 && b35));
							} else {
								var a36 = _g310;
								d = a36 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a36)) : e22.e;
							}
						} else {
							var a37 = _g310;
							d = a37 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a37)) : e22.e;
						}
					} else if(_g51._hx_index == 0) {
						var _g67 = _g51.c;
						if(_g67._hx_index == 1) {
							var a38 = _g67.b;
							d = a38 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a38)) : e12.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else if(_g51._hx_index == 0) {
					var _g81 = _g51.c;
					if(_g81._hx_index == 1) {
						var a39 = _g81.b;
						d = a39 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a39)) : e12.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 15:
				var _g52 = e22.e;
				var _g119 = e12.e;
				if(_g119._hx_index == 0) {
					var _g217 = _g119.c;
					if(_g217._hx_index == 1) {
						var _g311 = _g217.b;
						if(_g52._hx_index == 0) {
							var _g415 = _g52.c;
							if(_g415._hx_index == 1) {
								var a40 = _g311;
								var b36 = _g415.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a40 || b36));
							} else {
								var a41 = _g311;
								d = a41 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a41)) : e22.e;
							}
						} else {
							var a42 = _g311;
							d = a42 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a42)) : e22.e;
						}
					} else if(_g52._hx_index == 0) {
						var _g68 = _g52.c;
						if(_g68._hx_index == 1) {
							var a43 = _g68.b;
							d = a43 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a43)) : e12.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else if(_g52._hx_index == 0) {
					var _g82 = _g52.c;
					if(_g82._hx_index == 1) {
						var a44 = _g82.b;
						d = a44 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a44)) : e12.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 16:
				var _g53 = e22.e;
				var _g120 = e12.e;
				if(_g120._hx_index == 0) {
					var _g218 = _g120.c;
					if(_g218._hx_index == 2) {
						if(_g53._hx_index == 0) {
							var _g416 = _g53.c;
							if(_g416._hx_index == 2) {
								var a45 = _g218.v;
								var b37 = _g416.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a45 << b37));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 17:
				var _g54 = e22.e;
				var _g127 = e12.e;
				if(_g127._hx_index == 0) {
					var _g219 = _g127.c;
					if(_g219._hx_index == 2) {
						if(_g54._hx_index == 0) {
							var _g417 = _g54.c;
							if(_g417._hx_index == 2) {
								var a46 = _g219.v;
								var b38 = _g417.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a46 >> b38));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 18:
				var _g55 = e22.e;
				var _g128 = e12.e;
				if(_g128._hx_index == 0) {
					var _g220 = _g128.c;
					if(_g220._hx_index == 2) {
						if(_g55._hx_index == 0) {
							var _g418 = _g55.c;
							if(_g418._hx_index == 2) {
								var a47 = _g220.v;
								var b39 = _g418.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a47 >>> b39));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 19:
				var _g56 = e22.e;
				var _g129 = e12.e;
				if(_g129._hx_index == 0) {
					var _g221 = _g129.c;
					switch(_g221._hx_index) {
					case 2:
						if(_g56._hx_index == 0) {
							var _g710 = _g56.c;
							if(_g710._hx_index == 2) {
								var a48 = _g221.v;
								var b40 = _g710.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a48 % b40 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g56._hx_index == 0) {
							var _g419 = _g56.c;
							if(_g419._hx_index == 3) {
								var a49 = _g221.v;
								var b41 = _g419.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a49 % b41));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 20:
				var _g57 = op.op;
				d = hxsl_TExprDef.TBinop(op,e12,e22);
				break;
			case 22:
				throw new js__$Boot_HaxeError("assert");
			case 23:
				throw new js__$Boot_HaxeError("assert");
			}
			break;
		case 6:
			var e4 = _g.e1;
			var op1 = _g.op;
			var e5 = this.evalExpr(e4);
			var _g58 = e5.e;
			if(_g58._hx_index == 0) {
				var c1 = _g58.c;
				switch(op1._hx_index) {
				case 2:
					if(c1._hx_index == 1) {
						var b42 = c1.b;
						d = hxsl_TExprDef.TConst(hxsl_Const.CBool(!b42));
					} else {
						d = hxsl_TExprDef.TUnop(op1,e5);
					}
					break;
				case 3:
					switch(c1._hx_index) {
					case 2:
						var i1 = c1.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CInt(-i1));
						break;
					case 3:
						var f = c1.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(-f));
						break;
					default:
						d = hxsl_TExprDef.TUnop(op1,e5);
					}
					break;
				default:
					d = hxsl_TExprDef.TUnop(op1,e5);
				}
			} else {
				d = hxsl_TExprDef.TUnop(op1,e5);
			}
			break;
		case 7:
			var init = _g.init;
			var v1 = _g.v;
			d = hxsl_TExprDef.TVarDecl(this.mapVar(v1),init == null ? null : this.evalExpr(init));
			break;
		case 8:
			var eargs = _g.args;
			var c2 = _g.e;
			var c3 = this.evalExpr(c2);
			var _g59 = [];
			var _g130 = 0;
			while(_g130 < eargs.length) {
				var a50 = eargs[_g130];
				++_g130;
				_g59.push(this.evalExpr(a50));
			}
			var args = _g59;
			var _g222 = c3.e;
			switch(_g222._hx_index) {
			case 1:
				if(!this.inlineCalls) {
					d = hxsl_TExprDef.TCall(c3,args);
				} else {
					var v3 = _g222.v;
					if(this.funMap.h.__keys__[v3.__id__] != null) {
						var f1 = this.funMap.h[v3.__id__];
						var outExprs = [];
						var undo = [];
						var _g223 = 0;
						var _g312 = f1.args.length;
						while(_g223 < _g312) {
							var i2 = _g223++;
							var v4 = [f1.args[i2]];
							var e6 = args[i2];
							var _g224 = e6.e;
							switch(_g224._hx_index) {
							case 0:
								var _g107 = _g224.c;
								var old = [this.constants.h[v4[0].id]];
								undo.push((function(old1,v5) {
									return function() {
										if(old1[0] == null) {
											_gthis.constants.remove(v5[0].id);
										} else {
											_gthis.constants.h[v5[0].id] = old1[0];
										}
									};
								})(old,v4));
								this.constants.h[v4[0].id] = e6.e;
								break;
							case 1:
								var _g313 = _g224.v;
								var _g97 = _g313.type;
								var _g83 = _g313.qualifiers;
								var _g711 = _g313.parent;
								var _g69 = _g313.name;
								var _g420 = _g313.id;
								switch(_g313.kind._hx_index) {
								case 0:case 1:case 2:
									var old2 = [this.constants.h[v4[0].id]];
									undo.push((function(old3,v6) {
										return function() {
											if(old3[0] == null) {
												_gthis.constants.remove(v6[0].id);
											} else {
												_gthis.constants.h[v6[0].id] = old3[0];
											}
										};
									})(old2,v4));
									this.constants.h[v4[0].id] = e6.e;
									break;
								default:
									var old4 = [this.varMap.h[v4[0].__id__]];
									if(old4[0] == null) {
										undo.push((function(v7) {
											return function() {
												_gthis.varMap.remove(v7[0]);
											};
										})(v4));
									} else {
										this.varMap.remove(v4[0]);
										undo.push((function(old5,v8) {
											return function() {
												_gthis.varMap.set(v8[0],old5[0]);
											};
										})(old4,v4));
									}
									var v21 = this.mapVar(v4[0]);
									outExprs.push({ e : hxsl_TExprDef.TVarDecl(v21,e6), t : hxsl_Type.TVoid, p : e6.p});
								}
								break;
							default:
								var old6 = [this.varMap.h[v4[0].__id__]];
								if(old6[0] == null) {
									undo.push((function(v9) {
										return function() {
											_gthis.varMap.remove(v9[0]);
										};
									})(v4));
								} else {
									this.varMap.remove(v4[0]);
									undo.push((function(old7,v10) {
										return function() {
											_gthis.varMap.set(v10[0],old7[0]);
										};
									})(old6,v4));
								}
								var v22 = this.mapVar(v4[0]);
								outExprs.push({ e : hxsl_TExprDef.TVarDecl(v22,e6), t : hxsl_Type.TVoid, p : e6.p});
							}
						}
						var e7 = this.handleReturn(this.evalExpr(f1.expr,false),true);
						var _g421 = 0;
						while(_g421 < undo.length) {
							var u = undo[_g421];
							++_g421;
							u();
						}
						var _g510 = e7.e;
						if(_g510._hx_index == 4) {
							var el1 = _g510.el;
							var _g511 = 0;
							while(_g511 < el1.length) {
								var e8 = el1[_g511];
								++_g511;
								outExprs.push(e8);
							}
						} else {
							outExprs.push(e7);
						}
						d = hxsl_TExprDef.TBlock(outExprs);
					} else {
						d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c3) + "'",c3.p);
					}
				}
				break;
			case 2:
				var g = _g222.g;
				var v11 = this.evalCall(g,args,eargs,e.p);
				d = v11 != null ? v11 : hxsl_TExprDef.TCall(c3,args);
				break;
			default:
				d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c3) + "'",c3.p);
			}
			break;
		case 9:
			var r = _g.regs;
			var e9 = _g.e;
			d = hxsl_TExprDef.TSwiz(this.evalExpr(e9),r.slice());
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			var econd1 = this.evalExpr(econd);
			var _g60 = econd1.e;
			if(_g60._hx_index == 0) {
				var _g137 = _g60.c;
				if(_g137._hx_index == 1) {
					var b43 = _g137.b;
					d = b43 ? this.evalExpr(eif,isVal).e : eelse == null ? hxsl_TExprDef.TConst(hxsl_Const.CNull) : this.evalExpr(eelse,isVal).e;
				} else if(isVal && eelse != null && this.eliminateConditionals) {
					d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
				} else {
					eif = this.evalExpr(eif,isVal);
					if(eelse != null) {
						eelse = this.evalExpr(eelse,isVal);
						var _g70 = eelse.e;
						if(_g70._hx_index == 0 && _g70.c._hx_index == 0) {
							eelse = null;
						}
					}
					eif = this.ifBlock(eif);
					eelse = this.ifBlock(eelse);
					d = hxsl_TExprDef.TIf(econd1,eif,eelse);
				}
			} else if(isVal && eelse != null && this.eliminateConditionals) {
				d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
			} else {
				eif = this.evalExpr(eif,isVal);
				if(eelse != null) {
					eelse = this.evalExpr(eelse,isVal);
					var _g80 = eelse.e;
					if(_g80._hx_index == 0 && _g80.c._hx_index == 0) {
						eelse = null;
					}
				}
				eif = this.ifBlock(eif);
				eelse = this.ifBlock(eelse);
				d = hxsl_TExprDef.TIf(econd1,eif,eelse);
			}
			break;
		case 11:
			d = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			var e10 = _g.e;
			d = hxsl_TExprDef.TReturn(e10 == null ? null : this.evalExpr(e10));
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v12 = _g.v;
			var v23 = this.mapVar(v12);
			var it1 = this.evalExpr(it);
			var e13;
			var _g84 = it1.e;
			if(_g84._hx_index == 5) {
				var _g314 = _g84.e2;
				var _g225 = _g84.e1;
				if(_g84.op._hx_index == 21) {
					var _g610 = _g225.t;
					var _g512 = _g225.p;
					var _g422 = _g225.e;
					if(_g422._hx_index == 0) {
						var _g712 = _g422.c;
						if(_g712._hx_index == 2) {
							var _g1110 = _g314.t;
							var _g108 = _g314.p;
							var _g98 = _g314.e;
							if(_g98._hx_index == 0) {
								var _g1210 = _g98.c;
								if(_g1210._hx_index == 2) {
									var start = _g712.v;
									var len = _g1210.v;
									if(this.unrollLoops) {
										var out1 = [];
										var _g85 = start;
										var _g138 = len;
										while(_g85 < _g138) {
											var i3 = _g85++;
											this.constants.h[v12.id] = hxsl_TExprDef.TConst(hxsl_Const.CInt(i3));
											out1.push(this.evalExpr(loop,false));
										}
										this.constants.remove(v12.id);
										e13 = hxsl_TExprDef.TBlock(out1);
									} else {
										e13 = hxsl_TExprDef.TFor(v23,it1,this.ifBlock(this.evalExpr(loop,false)));
									}
								} else {
									e13 = hxsl_TExprDef.TFor(v23,it1,this.ifBlock(this.evalExpr(loop,false)));
								}
							} else {
								e13 = hxsl_TExprDef.TFor(v23,it1,this.ifBlock(this.evalExpr(loop,false)));
							}
						} else {
							e13 = hxsl_TExprDef.TFor(v23,it1,this.ifBlock(this.evalExpr(loop,false)));
						}
					} else {
						e13 = hxsl_TExprDef.TFor(v23,it1,this.ifBlock(this.evalExpr(loop,false)));
					}
				} else {
					e13 = hxsl_TExprDef.TFor(v23,it1,this.ifBlock(this.evalExpr(loop,false)));
				}
			} else {
				e13 = hxsl_TExprDef.TFor(v23,it1,this.ifBlock(this.evalExpr(loop,false)));
			}
			this.varMap.remove(v12);
			d = e13;
			break;
		case 14:
			d = hxsl_TExprDef.TContinue;
			break;
		case 15:
			d = hxsl_TExprDef.TBreak;
			break;
		case 16:
			var e23 = _g.index;
			var e14 = _g.e;
			var e15 = this.evalExpr(e14);
			var e24 = this.evalExpr(e23);
			var _g86 = e24.e;
			var _g139 = e15.e;
			if(_g139._hx_index == 17) {
				if(_g86._hx_index == 0) {
					var _g315 = _g86.c;
					if(_g315._hx_index == 2) {
						var el2 = _g139.el;
						var i4 = _g315.v;
						d = i4 >= 0 && i4 < el2.length ? el2[i4].e : hxsl_TExprDef.TArray(e15,e24);
					} else {
						d = hxsl_TExprDef.TArray(e15,e24);
					}
				} else {
					d = hxsl_TExprDef.TArray(e15,e24);
				}
			} else {
				d = hxsl_TExprDef.TArray(e15,e24);
			}
			break;
		case 17:
			var el3 = _g.el;
			var _g87 = [];
			var _g140 = 0;
			while(_g140 < el3.length) {
				var e16 = el3[_g140];
				++_g140;
				_g87.push(this.evalExpr(e16));
			}
			d = hxsl_TExprDef.TArrayDecl(_g87);
			break;
		case 18:
			var def = _g.def;
			var cases = _g.cases;
			var e17 = _g.e;
			var e18 = this.evalExpr(e17);
			var _g88 = [];
			var _g141 = 0;
			while(_g141 < cases.length) {
				var c4 = cases[_g141];
				++_g141;
				var _g142 = [];
				var _g226 = 0;
				var _g316 = c4.values;
				while(_g226 < _g316.length) {
					var v13 = _g316[_g226];
					++_g226;
					_g142.push(this.evalExpr(v13));
				}
				_g88.push({ values : _g142, expr : this.evalExpr(c4.expr,isVal)});
			}
			var cases1 = _g88;
			var def1 = def == null ? null : this.evalExpr(def,isVal);
			var hasCase = false;
			var _g227 = e18.e;
			if(_g227._hx_index == 0) {
				var c5 = _g227.c;
				if(c5._hx_index == 2) {
					var val = c5.v;
					var _g228 = 0;
					while(_g228 < cases1.length) {
						var c6 = cases1[_g228];
						++_g228;
						var _g229 = 0;
						var _g317 = c6.values;
						while(_g229 < _g317.length) {
							var v14 = _g317[_g229];
							++_g229;
							var _g230 = v14.e;
							if(_g230._hx_index == 0) {
								var cst = _g230.c;
								switch(cst._hx_index) {
								case 2:
									var k = cst.v;
									if(k == val) {
										return c6.expr;
									}
									break;
								case 3:
									var k1 = cst.v;
									if(k1 == val) {
										return c6.expr;
									}
									break;
								default:
								}
							} else {
								hasCase = true;
							}
						}
					}
				} else {
					throw new js__$Boot_HaxeError("Unsupported switch constant " + Std.string(c5));
				}
			} else {
				hasCase = true;
			}
			d = hasCase ? hxsl_TExprDef.TSwitch(e18,cases1,def1) : def1 == null ? hxsl_TExprDef.TBlock([]) : def1.e;
			break;
		case 19:
			var normalWhile = _g.normalWhile;
			var loop1 = _g.loop;
			var cond = _g.e;
			var cond1 = this.evalExpr(cond);
			var loop2 = this.evalExpr(loop1,false);
			d = hxsl_TExprDef.TWhile(cond1,this.ifBlock(loop2),normalWhile);
			break;
		case 20:
			var e19 = _g.e;
			var args1 = _g.args;
			var name = _g.m;
			var e25;
			if(name == "unroll") {
				var old8 = this.unrollLoops;
				this.unrollLoops = true;
				e25 = this.evalExpr(e19,isVal);
				this.unrollLoops = false;
			} else {
				e25 = this.evalExpr(e19,isVal);
			}
			d = hxsl_TExprDef.TMeta(name,args1,e25);
			break;
		}
		return { e : d, t : e.t, p : e.p};
	}
	,__class__: hxsl_Eval
};
var hxsl__$Flatten_Alloc = function(g,t,pos,size) {
	this.g = g;
	this.t = t;
	this.pos = pos;
	this.size = size;
};
$hxClasses["hxsl._Flatten.Alloc"] = hxsl__$Flatten_Alloc;
hxsl__$Flatten_Alloc.__name__ = "hxsl._Flatten.Alloc";
hxsl__$Flatten_Alloc.prototype = {
	__class__: hxsl__$Flatten_Alloc
};
var hxsl_ARead = $hxEnums["hxsl.ARead"] = { __ename__ : true, __constructs__ : ["AIndex","AOffset"]
	,AIndex: ($_=function(a) { return {_hx_index:0,a:a,__enum__:"hxsl.ARead",toString:$estr}; },$_.__params__ = ["a"],$_)
	,AOffset: ($_=function(a,stride,delta) { return {_hx_index:1,a:a,stride:stride,delta:delta,__enum__:"hxsl.ARead",toString:$estr}; },$_.__params__ = ["a","stride","delta"],$_)
};
hxsl_ARead.__empty_constructs__ = [];
var hxsl_Flatten = function() {
};
$hxClasses["hxsl.Flatten"] = hxsl_Flatten;
hxsl_Flatten.__name__ = "hxsl.Flatten";
hxsl_Flatten.prototype = {
	flatten: function(s,kind,constsToGlobal) {
		this.globals = [];
		this.params = [];
		this.outVars = [];
		if(constsToGlobal) {
			this.consts = [];
			var p = s.funs[0].expr.p;
			var gc = { id : hxsl_Tools.allocVarId(), name : "__consts__", kind : hxsl_VarKind.Global, type : null};
			this.econsts = { e : hxsl_TExprDef.TVar(gc), t : null, p : p};
			var s1 = s.name;
			var s2 = s.vars.slice();
			var _g = [];
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				_g.push(this.mapFun(f,$bind(this,this.mapConsts)));
			}
			s = { name : s1, vars : s2, funs : _g};
			var _g3 = 0;
			var _g4 = s.vars;
			while(_g3 < _g4.length) {
				var v = _g4[_g3];
				++_g3;
				var _g31 = v.type;
				if(_g31._hx_index == 9) {
					var _g41 = _g31.size;
					this.allocConst(255,p);
				}
			}
			if(this.consts.length > 0) {
				gc.type = this.econsts.t = hxsl_Type.TArray(hxsl_Type.TFloat,hxsl_SizeDecl.SConst(this.consts.length));
				s.vars.push(gc);
			}
		}
		this.varMap = new haxe_ds_ObjectMap();
		this.allocData = new haxe_ds_ObjectMap();
		var _g5 = 0;
		var _g11 = s.vars;
		while(_g5 < _g11.length) {
			var v1 = _g11[_g5];
			++_g5;
			this.gatherVar(v1);
		}
		var prefix;
		switch(kind._hx_index) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
		this.pack(prefix + "Globals",hxsl_VarKind.Global,this.globals,hxsl_VecType.VFloat);
		this.pack(prefix + "Params",hxsl_VarKind.Param,this.params,hxsl_VecType.VFloat);
		var allVars = this.globals.concat(this.params);
		var textures = this.packTextures(prefix + "Textures",allVars,hxsl_Type.TSampler2D).concat(this.packTextures(prefix + "TexturesCube",allVars,hxsl_Type.TSamplerCube)).concat(this.packTextures(prefix + "TexturesArray",allVars,hxsl_Type.TSampler2DArray));
		this.packBuffers(allVars);
		var _g21 = [];
		var _g32 = 0;
		var _g42 = s.funs;
		while(_g32 < _g42.length) {
			var f1 = _g42[_g32];
			++_g32;
			_g21.push(this.mapFun(f1,$bind(this,this.mapExpr)));
		}
		var funs = _g21;
		var _g51 = 0;
		while(_g51 < textures.length) {
			var t = textures[_g51];
			++_g51;
			t.pos >>= 2;
		}
		return { name : s.name, vars : this.outVars, funs : funs};
	}
	,mapFun: function(f,mapExpr) {
		return { kind : f.kind, ret : f.ret, args : f.args, ref : f.ref, expr : mapExpr(f.expr)};
	}
	,mapExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var a = this.varMap.h[v.__id__];
			e = a == null ? e : this.access(a,v.type,e.p,hxsl_ARead.AIndex(a));
			break;
		case 16:
			var _g1 = _g.e;
			var _g5 = _g1.t;
			var _g3 = _g1.e;
			if(_g3._hx_index == 1) {
				var eindex = _g.index;
				var vp = _g1.p;
				var v1 = _g3.v;
				var _g2 = eindex.e;
				var e1;
				if(_g2._hx_index == 0) {
					var _g11 = _g2.c;
					if(_g11._hx_index == 2) {
						var _g21 = _g11.v;
						e1 = true;
					} else {
						e1 = false;
					}
				} else {
					e1 = false;
				}
				if(!e1) {
					var a1 = this.varMap.h[v1.__id__];
					if(a1 == null) {
						e = e;
					} else {
						var _g31 = v1.type;
						if(_g31._hx_index == 15) {
							var _g51 = _g31.size;
							var t = _g31.t;
							var stride = this.varSize(t,a1.t);
							if(stride == 0 || (stride & 3) != 0) {
								throw new js__$Boot_HaxeError(new hxsl_Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
							}
							stride >>= 2;
							eindex = this.mapExpr(eindex);
							var toInt = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : vp},[eindex]), t : hxsl_Type.TInt, p : vp};
							e = this.access(a1,t,vp,hxsl_ARead.AOffset(a1,stride,stride == 1 ? toInt : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpMult,toInt,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(stride)), t : hxsl_Type.TInt, p : vp}), t : hxsl_Type.TInt, p : vp}));
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
					}
				} else {
					e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
				}
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		default:
			e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
		}
		return this.optimize(e);
	}
	,mapConsts: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 2:
				var v = c.v;
				return this.allocConst(v,e.p);
			case 3:
				var v1 = c.v;
				return this.allocConst(v1,e.p);
			default:
				return e;
			}
			break;
		case 2:
			var g = _g.g;
			switch(g._hx_index) {
			case 0:
				this.allocConst(Math.PI / 180,e.p);
				break;
			case 1:
				this.allocConst(180 / Math.PI,e.p);
				break;
			case 9:
				this.allocConst(1.4426950408889634,e.p);
				break;
			case 10:
				this.allocConst(0.6931471805599453,e.p);
				break;
			case 24:
				this.allocConst(1,e.p);
				break;
			case 26:
				this.allocConst(2.0,e.p);
				this.allocConst(3.0,e.p);
				break;
			case 54:
				this.allocConsts([1,255,65025,16581375],e.p);
				this.allocConsts([0.00392156862745098,0.00392156862745098,0.00392156862745098,0],e.p);
				break;
			case 55:
				this.allocConsts([1,0.00392156862745098,1.5378700499807768e-005,6.0308629411010845e-008],e.p);
				break;
			case 56:
				this.allocConst(1,e.p);
				this.allocConst(0.5,e.p);
				break;
			case 57:
				this.allocConst(0.5,e.p);
				break;
			case 58:
				this.allocConsts([0.5,0.5],e.p);
				this.allocConsts([0.5,-0.5],e.p);
				break;
			case 59:
				this.allocConsts([2,-2],e.p);
				this.allocConsts([-1,1],e.p);
				break;
			default:
			}
			break;
		case 5:
			var _g12 = _g.e2;
			var _g11 = _g.e1;
			if(_g.op._hx_index == 1) {
				var _g14 = _g12.p;
				var _g13 = _g12.e;
				if(_g12.t._hx_index == 8) {
					this.allocConst(1,e.p);
				}
			}
			break;
		case 8:
			var _g17 = _g.args;
			var _g16 = _g.e;
			var _g20 = _g16.t;
			var _g19 = _g16.p;
			var _g18 = _g16.e;
			if(_g18._hx_index == 2) {
				if(_g18.g._hx_index == 42) {
					if(_g17.length == 2) {
						var _g23 = _g17[1];
						var _g22 = _g17[0];
						var _g26 = _g22.t;
						var _g25 = _g22.p;
						var _g24 = _g22.e;
						if(_g24._hx_index == 1) {
							var _g27 = _g24.v;
							var _g33 = _g27.type;
							var _g32 = _g27.qualifiers;
							var _g31 = _g27.parent;
							var _g30 = _g27.name;
							var _g28 = _g27.id;
							switch(_g27.kind._hx_index) {
							case 0:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g59 = _g23.t;
											var _g58 = _g23.p;
											var _g57 = _g23.e;
											if(_g57._hx_index == 0) {
												var _g60 = _g57.c;
												if(_g60._hx_index == 2) {
													if(_g60.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 1:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g38 = _g23.t;
											var _g37 = _g23.p;
											var _g36 = _g23.e;
											if(_g36._hx_index == 0) {
												var _g39 = _g36.c;
												if(_g39._hx_index == 2) {
													if(_g39.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 2:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g52 = _g23.t;
											var _g51 = _g23.p;
											var _g50 = _g23.e;
											if(_g50._hx_index == 0) {
												var _g53 = _g50.c;
												if(_g53._hx_index == 2) {
													if(_g53.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 3:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g45 = _g23.t;
											var _g44 = _g23.p;
											var _g43 = _g23.e;
											if(_g43._hx_index == 0) {
												var _g46 = _g43.c;
												if(_g46._hx_index == 2) {
													if(_g46.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							default:
							}
						}
					}
				}
			}
			break;
		case 16:
			var _g2 = _g.index;
			var _g1 = _g.e;
			var _g5 = _g2.t;
			var _g4 = _g2.p;
			var _g3 = _g2.e;
			if(_g3._hx_index == 0) {
				var _g6 = _g3.c;
				if(_g6._hx_index == 2) {
					var _g7 = _g6.v;
					var ea = _g1;
					var eindex = _g2;
					return { e : hxsl_TExprDef.TArray(this.mapConsts(ea),eindex), t : e.t, p : e.p};
				} else {
					var ea1 = _g1;
					var eindex1 = _g2;
					var _g8 = ea1.t;
					if(_g8._hx_index == 15) {
						var _g21 = _g8.size;
						var t = _g8.t;
						var stride = this.varSize(t,hxsl_VecType.VFloat) >> 2;
						this.allocConst(stride,e.p);
					}
				}
			} else {
				var ea2 = _g1;
				var eindex2 = _g2;
				var _g9 = ea2.t;
				if(_g9._hx_index == 15) {
					var _g29 = _g9.size;
					var t1 = _g9.t;
					var stride1 = this.varSize(t1,hxsl_VecType.VFloat) >> 2;
					this.allocConst(stride1,e.p);
				}
			}
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapConsts));
	}
	,allocConst: function(v,p) {
		var index = this.consts.indexOf(v);
		if(index < 0) {
			index = this.consts.length;
			this.consts.push(v);
		}
		return { e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
	}
	,allocConsts: function(va,p) {
		var _gthis = this;
		var pad = va.length - 1 & 3;
		var index = -1;
		var _g = 0;
		var _g1 = this.consts.length - (va.length - 1);
		while(_g < _g1) {
			var i = _g++;
			if(i >> 2 != i + pad >> 2) {
				continue;
			}
			var found = true;
			var _g2 = 0;
			var _g11 = va.length;
			while(_g2 < _g11) {
				var j = _g2++;
				if(this.consts[i + j] != va[j]) {
					found = false;
					break;
				}
			}
			if(found) {
				index = i;
				break;
			}
		}
		if(index < 0) {
			while(this.consts.length >> 2 != this.consts.length + pad >> 2) this.consts.push(0);
			index = this.consts.length;
			var _g21 = 0;
			while(_g21 < va.length) {
				var v = va[_g21];
				++_g21;
				this.consts.push(v);
			}
		}
		switch(va.length) {
		case 1:
			return { e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
		case 2:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec2), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(2,hxsl_VecType.VFloat), p : p};
		case 3:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec3), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 2)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(3,hxsl_VecType.VFloat), p : p};
		case 4:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 3)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 4)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : p};
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,access: function(a,t,pos,acc) {
		var _gthis = this;
		switch(t._hx_index) {
		case 6:
			var tmp = this.access(a,hxsl_Type.TMat3x4,pos,acc);
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3), t : hxsl_Type.TFun([]), p : pos},[tmp]), t : hxsl_Type.TMat3, p : pos};
		case 7:
			var tmp1 = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4);
			var tmp2 = hxsl_Type.TFun([]);
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a1.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a2 = acc.a;
				var index = a2.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a2.g), t : a2.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a2.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc._hx_index) {
			case 0:
				var a3 = acc.a;
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a3.g), t : a3.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a3.pos >> 2) + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a3.t), p : pos};
				break;
			case 1:
				var delta1 = acc.delta;
				var stride1 = acc.stride;
				var a4 = acc.a;
				var index1 = (a4.pos >> 2) + 1;
				var offset1 = index1 == 0 ? delta1 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a4.g), t : a4.g.type, p : pos},offset1), t : hxsl_Type.TVec(4,a4.t), p : pos};
				break;
			}
			var tmp5;
			switch(acc._hx_index) {
			case 0:
				var a5 = acc.a;
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a5.g), t : a5.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a5.pos >> 2) + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a5.t), p : pos};
				break;
			case 1:
				var delta2 = acc.delta;
				var stride2 = acc.stride;
				var a6 = acc.a;
				var index2 = (a6.pos >> 2) + 2;
				var offset2 = index2 == 0 ? delta2 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta2,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a6.g), t : a6.g.type, p : pos},offset2), t : hxsl_Type.TVec(4,a6.t), p : pos};
				break;
			}
			var tmp6;
			switch(acc._hx_index) {
			case 0:
				var a7 = acc.a;
				tmp6 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a7.g), t : a7.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a7.pos >> 2) + 3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a7.t), p : pos};
				break;
			case 1:
				var delta3 = acc.delta;
				var stride3 = acc.stride;
				var a8 = acc.a;
				var index3 = (a8.pos >> 2) + 3;
				var offset3 = index3 == 0 ? delta3 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta3,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp6 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a8.g), t : a8.g.type, p : pos},offset3), t : hxsl_Type.TVec(4,a8.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp1, t : tmp2, p : pos},[tmp3,tmp4,tmp5,tmp6]), t : hxsl_Type.TMat4, p : pos};
		case 8:
			var tmp7 = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3x4);
			var tmp8 = hxsl_Type.TFun([]);
			var tmp9;
			switch(acc._hx_index) {
			case 0:
				var a9 = acc.a;
				tmp9 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a9.g), t : a9.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a9.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a9.t), p : pos};
				break;
			case 1:
				var delta4 = acc.delta;
				var stride4 = acc.stride;
				var a10 = acc.a;
				var index4 = a10.pos >> 2;
				var offset4 = index4 == 0 ? delta4 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta4,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index4)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp9 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a10.g), t : a10.g.type, p : pos},offset4), t : hxsl_Type.TVec(4,a10.t), p : pos};
				break;
			}
			var tmp10;
			switch(acc._hx_index) {
			case 0:
				var a11 = acc.a;
				tmp10 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a11.g), t : a11.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a11.pos >> 2) + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a11.t), p : pos};
				break;
			case 1:
				var delta5 = acc.delta;
				var stride5 = acc.stride;
				var a12 = acc.a;
				var index5 = (a12.pos >> 2) + 1;
				var offset5 = index5 == 0 ? delta5 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta5,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index5)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp10 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a12.g), t : a12.g.type, p : pos},offset5), t : hxsl_Type.TVec(4,a12.t), p : pos};
				break;
			}
			var tmp11;
			switch(acc._hx_index) {
			case 0:
				var a13 = acc.a;
				tmp11 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a13.g), t : a13.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a13.pos >> 2) + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a13.t), p : pos};
				break;
			case 1:
				var delta6 = acc.delta;
				var stride6 = acc.stride;
				var a14 = acc.a;
				var index6 = (a14.pos >> 2) + 2;
				var offset6 = index6 == 0 ? delta6 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta6,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index6)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp11 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a14.g), t : a14.g.type, p : pos},offset6), t : hxsl_Type.TVec(4,a14.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp7, t : tmp8, p : pos},[tmp9,tmp10,tmp11]), t : hxsl_Type.TMat3x4, p : pos};
		case 15:
			var _g1 = t.size;
			if(_g1._hx_index == 0) {
				var t1 = t.t;
				var len = _g1.v;
				var stride7 = a.size / len | 0;
				var _g = [];
				var _g11 = 0;
				var _g2 = len;
				while(_g11 < _g2) {
					var i = _g11++;
					var a15 = new hxsl__$Flatten_Alloc(a.g,a.t,a.pos + stride7 * i,stride7);
					_g.push(this.access(a15,t1,pos,hxsl_ARead.AIndex(a15)));
				}
				var earr = _g;
				return { e : hxsl_TExprDef.TArrayDecl(earr), t : t1, p : pos};
			} else {
				if(hxsl_Tools.isSampler(t)) {
					var e;
					switch(acc._hx_index) {
					case 0:
						var a16 = acc.a;
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a16.g), t : a16.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a16.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a16.t), p : pos};
						break;
					case 1:
						var delta7 = acc.delta;
						var stride8 = acc.stride;
						var a17 = acc.a;
						var index7 = a17.pos >> 2;
						var offset7 = index7 == 0 ? delta7 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta7,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index7)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a17.g), t : a17.g.type, p : pos},offset7), t : hxsl_Type.TVec(4,a17.t), p : pos};
						break;
					}
					e.t = t;
					return e;
				}
				var size = this.varSize(t,a.t);
				if(size > 4) {
					return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
				}
				var e1;
				switch(acc._hx_index) {
				case 0:
					var a18 = acc.a;
					e1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a18.g), t : a18.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a18.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a18.t), p : pos};
					break;
				case 1:
					var delta8 = acc.delta;
					var stride9 = acc.stride;
					var a19 = acc.a;
					var index8 = a19.pos >> 2;
					var offset8 = index8 == 0 ? delta8 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta8,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index8)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a19.g), t : a19.g.type, p : pos},offset8), t : hxsl_Type.TVec(4,a19.t), p : pos};
					break;
				}
				if(size == 4) {
					if((a.pos & 3) != 0) {
						throw new js__$Boot_HaxeError("assert");
					}
				} else {
					var sw = [];
					var _g3 = 0;
					var _g12 = size;
					while(_g3 < _g12) {
						var i1 = _g3++;
						sw.push(hxsl_Tools.SWIZ[i1 + (a.pos & 3)]);
					}
					e1 = { e : hxsl_TExprDef.TSwiz(e1,sw), t : t, p : pos};
				}
				switch(t._hx_index) {
				case 1:
					e1.t = hxsl_Type.TFloat;
					e1 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e1]), t : t, p : pos};
					break;
				case 5:
					if(t.t._hx_index == 0) {
						var size1 = t.size;
						e1.t = hxsl_Type.TVec(size1,hxsl_VecType.VFloat);
						e1 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size1 - 2]), t : hxsl_Type.TFun([]), p : pos},[e1]), t : t, p : pos};
					}
					break;
				default:
				}
				return e1;
			}
			break;
		default:
			if(hxsl_Tools.isSampler(t)) {
				var e2;
				switch(acc._hx_index) {
				case 0:
					var a20 = acc.a;
					e2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a20.g), t : a20.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a20.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a20.t), p : pos};
					break;
				case 1:
					var delta9 = acc.delta;
					var stride10 = acc.stride;
					var a21 = acc.a;
					var index9 = a21.pos >> 2;
					var offset9 = index9 == 0 ? delta9 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta9,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index9)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a21.g), t : a21.g.type, p : pos},offset9), t : hxsl_Type.TVec(4,a21.t), p : pos};
					break;
				}
				e2.t = t;
				return e2;
			}
			var size2 = this.varSize(t,a.t);
			if(size2 > 4) {
				return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
			}
			var e3;
			switch(acc._hx_index) {
			case 0:
				var a22 = acc.a;
				e3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a22.g), t : a22.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a22.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a22.t), p : pos};
				break;
			case 1:
				var delta10 = acc.delta;
				var stride11 = acc.stride;
				var a23 = acc.a;
				var index10 = a23.pos >> 2;
				var offset10 = index10 == 0 ? delta10 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta10,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index10)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				e3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a23.g), t : a23.g.type, p : pos},offset10), t : hxsl_Type.TVec(4,a23.t), p : pos};
				break;
			}
			if(size2 == 4) {
				if((a.pos & 3) != 0) {
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				var sw1 = [];
				var _g4 = 0;
				var _g13 = size2;
				while(_g4 < _g13) {
					var i2 = _g4++;
					sw1.push(hxsl_Tools.SWIZ[i2 + (a.pos & 3)]);
				}
				e3 = { e : hxsl_TExprDef.TSwiz(e3,sw1), t : t, p : pos};
			}
			switch(t._hx_index) {
			case 1:
				e3.t = hxsl_Type.TFloat;
				e3 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e3]), t : t, p : pos};
				break;
			case 5:
				if(t.t._hx_index == 0) {
					var size3 = t.size;
					e3.t = hxsl_Type.TVec(size3,hxsl_VecType.VFloat);
					e3 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size3 - 2]), t : hxsl_Type.TFun([]), p : pos},[e3]), t : t, p : pos};
				}
				break;
			default:
			}
			return e3;
		}
	}
	,optimize: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 8:
			var _g13 = _g.args;
			var _g12 = _g.e;
			var _g16 = _g12.t;
			var _g15 = _g12.p;
			var _g14 = _g12.e;
			if(_g14._hx_index == 2) {
				if(_g14.g._hx_index == 52) {
					if(_g13.length == 1) {
						var _g18 = _g13[0];
						var _g21 = _g18.t;
						var _g20 = _g18.p;
						var _g19 = _g18.e;
						if(_g19._hx_index == 8) {
							var _g22 = _g19.e;
							var _g26 = _g22.t;
							var _g25 = _g22.p;
							var _g24 = _g22.e;
							if(_g24._hx_index == 2) {
								if(_g24.g._hx_index == 51) {
									var args = _g19.args;
									var rem = 0;
									var size = 0;
									while(size < 4) {
										var t = args[args.length - 1 - rem].t;
										size += this.varSize(t,hxsl_VecType.VFloat);
										++rem;
									}
									if(size == 4) {
										var _g1 = 0;
										var _g11 = rem;
										while(_g1 < _g11) {
											var i = _g1++;
											args.pop();
										}
										var emat;
										var _g2 = e.e;
										if(_g2._hx_index == 8) {
											var _g4 = _g2.args;
											var e1 = _g2.e;
											emat = e1;
										} else {
											throw new js__$Boot_HaxeError("assert");
										}
										return { e : hxsl_TExprDef.TCall(emat,args), t : e.t, p : e.p};
									}
								}
							}
						}
					}
				}
			}
			break;
		case 16:
			var _g23 = _g.index;
			var _g17 = _g.e;
			var _g5 = _g17.t;
			var _g41 = _g17.p;
			var _g3 = _g17.e;
			if(_g3._hx_index == 17) {
				var _g9 = _g23.t;
				var _g8 = _g23.p;
				var _g7 = _g23.e;
				if(_g7._hx_index == 0) {
					var _g10 = _g7.c;
					if(_g10._hx_index == 2) {
						var el = _g3.el;
						var i1 = _g10.v;
						if(i1 >= 0 && i1 < el.length) {
							return el[i1];
						}
						hxsl_Error.t("Reading outside array bounds",e.p);
					}
				}
			}
			break;
		default:
		}
		return e;
	}
	,packTextures: function(name,vars,t) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			if(v.type != t) {
				var tmp;
				if(t == hxsl_Type.TSampler2D) {
					var _g1 = v.type;
					if(_g1._hx_index == 17) {
						var _g11 = _g1.size;
						tmp = true;
					} else {
						tmp = false;
					}
				} else {
					tmp = false;
				}
				if(!tmp) {
					continue;
				}
			}
			var a = new hxsl__$Flatten_Alloc(g,null,alloc.length << 2,1);
			a.v = v;
			this.varMap.set(v,a);
			alloc.push(a);
		}
		g.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(alloc.length));
		if(alloc.length > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return alloc;
	}
	,packBuffers: function(vars) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : "buffers", type : hxsl_Type.TVoid, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var _g1 = v.type;
			var tmp;
			if(_g1._hx_index == 16) {
				var _g2 = _g1.size;
				var _g11 = _g1.t;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				var a = new hxsl__$Flatten_Alloc(g,null,alloc.length,1);
				a.v = v;
				alloc.push(a);
				this.outVars.push(v);
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TBuffer(hxsl_Type.TVoid,hxsl_SizeDecl.SConst(0)),hxsl_SizeDecl.SConst(alloc.length));
		this.allocData.set(g,alloc);
	}
	,pack: function(name,kind,vars,t) {
		var alloc = [];
		var apos = 0;
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVec(0,t), kind : kind};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var tmp;
			if(!hxsl_Tools.isSampler(v.type)) {
				var _g1 = v.type;
				if(_g1._hx_index == 16) {
					var _g2 = _g1.size;
					var _g11 = _g1.t;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				continue;
			}
			var size = this.varSize(v.type,t);
			var best = null;
			var _g3 = 0;
			while(_g3 < alloc.length) {
				var a = alloc[_g3];
				++_g3;
				if(a.v == null && a.size >= size && (best == null || best.size > a.size)) {
					best = a;
				}
			}
			if(best != null) {
				var free = best.size - size;
				if(free > 0) {
					var i = alloc.indexOf(best);
					var a1 = new hxsl__$Flatten_Alloc(g,t,best.pos + size,free);
					alloc.splice(i + 1,0,a1);
					best.size = size;
				}
				best.v = v;
				this.varMap.set(v,best);
			} else {
				var a2 = new hxsl__$Flatten_Alloc(g,t,apos,size);
				apos += size;
				a2.v = v;
				this.varMap.set(v,a2);
				alloc.push(a2);
				var pad = (4 - size % 4) % 4;
				if(pad > 0) {
					var a3 = new hxsl__$Flatten_Alloc(g,t,apos,pad);
					apos += pad;
					alloc.push(a3);
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TVec(4,t),hxsl_SizeDecl.SConst(apos >> 2));
		if(apos > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return g;
	}
	,varSize: function(v,t) {
		switch(v._hx_index) {
		case 1:case 3:
			if(t == hxsl_VecType.VFloat) {
				return 1;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 5:
			var t2 = v.t;
			var n = v.size;
			if(t == t2) {
				return n;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 7:
			if(t == hxsl_VecType.VFloat) {
				return 16;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 6:case 8:
			if(t == hxsl_VecType.VFloat) {
				return 12;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 15:
			var _g3 = v.size;
			if(_g3._hx_index == 0) {
				var at = v.t;
				var n1 = _g3.v;
				return this.varSize(at,t) * n1;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		default:
			throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
		}
	}
	,gatherVar: function(v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.gatherVar(v1);
			}
		} else {
			switch(v.kind._hx_index) {
			case 0:
				if(hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.PerObject)) {
					this.params.push(v);
				} else {
					this.globals.push(v);
				}
				break;
			case 2:
				this.params.push(v);
				break;
			default:
				this.outVars.push(v);
			}
		}
	}
	,__class__: hxsl_Flatten
};
var hxsl_Globals = function() {
	this.channels = [];
	this.map = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Globals"] = hxsl_Globals;
hxsl_Globals.__name__ = "hxsl.Globals";
hxsl_Globals.allocID = function(path) {
	if(hxsl_Globals.MAP == null) {
		hxsl_Globals.MAP = new haxe_ds_StringMap();
		hxsl_Globals.ALL = [];
	}
	var _this = hxsl_Globals.MAP;
	var id = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
	if(id == null) {
		id = hxsl_Globals.ALL.length;
		hxsl_Globals.ALL.push(path);
		var _this1 = hxsl_Globals.MAP;
		if(__map_reserved[path] != null) {
			_this1.setReserved(path,id);
		} else {
			_this1.h[path] = id;
		}
	}
	return id;
};
hxsl_Globals.prototype = {
	set: function(path,v) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		this1.h[key] = v;
	}
	,allocChannelID: function(t) {
		var _g = 0;
		var _g1 = this.maxChannels;
		while(_g < _g1) {
			var i = _g++;
			if(this.channels[i] == t) {
				return i;
			}
		}
		if(this.maxChannels == 1 << hxsl_Tools.MAX_CHANNELS_BITS) {
			throw new js__$Boot_HaxeError("Too many unique channels");
		}
		var i1 = this.maxChannels++;
		this.channels[i1] = t;
		return i1;
	}
	,__class__: hxsl_Globals
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var hxsl_GlslOut = function() {
	this.outIndex = 0;
	this.uniformBuffer = 0;
	this.exprIds = 0;
	this.varNames = new haxe_ds_IntMap();
	this.allNames = new haxe_ds_StringMap();
};
$hxClasses["hxsl.GlslOut"] = hxsl_GlslOut;
hxsl_GlslOut.__name__ = "hxsl.GlslOut";
hxsl_GlslOut.prototype = {
	decl: function(s) {
		var _g = 0;
		var _g1 = this.decls;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d == s) {
				return;
			}
		}
		if(HxOverrides.cca(s,0) == 35) {
			this.decls.unshift(s);
		} else {
			this.decls.push(s);
		}
	}
	,addType: function(t) {
		switch(t._hx_index) {
		case 0:
			this.buf.b += Std.string("void");
			break;
		case 1:
			this.buf.b += Std.string("int");
			break;
		case 2:
			this.buf.b += Std.string("bool");
			break;
		case 3:
			this.buf.b += Std.string("float");
			break;
		case 4:
			this.buf.b += Std.string("string");
			break;
		case 5:
			var k = t.t;
			var size = t.size;
			switch(k._hx_index) {
			case 0:
				this.buf.b += Std.string("i");
				break;
			case 1:
				break;
			case 2:
				this.buf.b += Std.string("b");
				break;
			}
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(size);
			break;
		case 6:
			this.buf.b += Std.string("mat3");
			break;
		case 7:
			this.buf.b += Std.string("mat4");
			break;
		case 8:
			this.decl(hxsl_GlslOut.MAT34);
			this.buf.b += Std.string("_mat3x4");
			break;
		case 9:
			var n = t.size;
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(n);
			break;
		case 10:
			this.buf.b += Std.string("sampler2D");
			break;
		case 11:
			this.buf.b += Std.string("sampler2DArray");
			if(this.glES != null) {
				this.decl("precision lowp sampler2DArray;");
			}
			break;
		case 12:
			this.buf.b += Std.string("samplerCube");
			break;
		case 13:
			var vl = t.vl;
			this.buf.b += Std.string("struct { ");
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.addVar(v);
				this.buf.b += Std.string(";");
			}
			this.buf.b += Std.string(" }");
			break;
		case 14:
			var _g7 = t.variants;
			this.buf.b += Std.string("function");
			break;
		case 15:
			var size1 = t.size;
			var t1 = t.t;
			this.addType(t1);
			this.buf.b += Std.string("[");
			switch(size1._hx_index) {
			case 0:
				var _g1 = size1.v;
				if(_g1 == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var v1 = _g1;
						this.buf.b += Std.string(v1);
					}
				} else {
					var v2 = _g1;
					this.buf.b += Std.string(v2);
				}
				break;
			case 1:
				var v3 = size1.v;
				var v4 = this.varName(v3);
				this.buf.b += Std.string(v4);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var _g5 = t.size;
			var _g4 = t.t;
			throw new js__$Boot_HaxeError("assert");
		case 17:
			var n1 = t.size;
			this.buf.b += Std.string("channel" + n1);
			break;
		}
	}
	,addVar: function(v) {
		var _g = v.type;
		switch(_g._hx_index) {
		case 15:
			var size = _g.size;
			var t = _g.t;
			var old = v.type;
			v.type = t;
			this.addVar(v);
			v.type = old;
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _g1 = size.v;
				if(_g1 == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var n = _g1;
						this.buf.b += Std.string(n);
					}
				} else {
					var n1 = _g1;
					this.buf.b += Std.string(n1);
				}
				break;
			case 1:
				var v1 = size.v;
				var v2 = this.varName(v1);
				this.buf.b += Std.string(v2);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var size1 = _g.size;
			var t1 = _g.t;
			this.buf.b += Std.string("uniform_buffer" + this.uniformBuffer++);
			this.buf.b += Std.string(" { ");
			v.type = hxsl_Type.TArray(t1,size1);
			this.addVar(v);
			v.type = hxsl_Type.TBuffer(t1,size1);
			this.buf.b += Std.string("; }");
			break;
		default:
			this.addType(v.type);
			this.buf.b += Std.string(" ");
			var v3 = this.varName(v);
			this.buf.b += Std.string(v3);
		}
	}
	,addValue: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var name = "val" + this.exprIds++;
			var tmp = this.buf;
			this.buf = new StringBuf();
			this.addType(e.t);
			this.buf.b += Std.string(" ");
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("(void)");
			var el2 = el.slice();
			var last = el2[el2.length - 1];
			el2[el2.length - 1] = { e : hxsl_TExprDef.TReturn(last), t : e.t, p : last.p};
			var e2 = { t : hxsl_Type.TVoid, e : hxsl_TExprDef.TBlock(el2), p : e.p};
			this.addExpr(e2,"");
			this.exprValues.push(this.buf.b);
			this.buf = tmp;
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("()");
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			this.buf.b += Std.string("( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(" ) ? ");
			this.addValue(eif,tabs);
			this.buf.b += Std.string(" : ");
			this.addValue(eelse,tabs);
			break;
		case 20:
			var _g3 = _g.args;
			var _g2 = _g.m;
			var e1 = _g.e;
			this.addValue(e1,tabs);
			break;
		default:
			this.addExpr(e,tabs);
		}
	}
	,addBlock: function(e,tabs) {
		this.addExpr(e,tabs);
	}
	,getFunName: function(g,args,rt) {
		switch(g._hx_index) {
		case 20:
			if(rt == hxsl_Type.TInt && this.glES != null) {
				this.decl("int _imod( int x, int y ) { return int(mod(float(x),float(y))); }");
				return "_imod";
			}
			break;
		case 33:
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					return "textureCube";
				}
				break;
			case 17:
				var _g1 = _g.size;
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			default:
			}
			break;
		case 34:
			var _g2 = args[0].t;
			switch(_g2._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "textureCubeLodEXT";
				}
				break;
			case 17:
				var _g11 = _g2.size;
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			default:
			}
			break;
		case 35:case 36:
			return "texelFetch";
		case 50:
			if(args[0].t == hxsl_Type.TMat3x4) {
				this.decl(hxsl_GlslOut.MAT34);
				this.decl("mat3 _mat3( _mat3x4 v ) { return mat3(v.a.xyz,v.b.xyz,v.c.xyz); }");
				return "_mat3";
			}
			break;
		case 52:
			this.decl(hxsl_GlslOut.MAT34);
			if(args.length == 1) {
				this.decl("_mat3x4 mat_to_34( mat4 m ) { return _mat3x4(m[0],m[1],m[2]); }");
				return "mat_to_34";
			}
			break;
		case 54:
			this.decl("vec4 pack( float v ) { vec4 color = fract(v * vec4(1, 255, 255.*255., 255.*255.*255.)); return color - color.yzww * vec4(1. / 255., 1. / 255., 1. / 255., 0.); }");
			break;
		case 55:
			this.decl("float unpack( vec4 color ) { return dot(color,vec4(1., 1. / 255., 1. / (255. * 255.), 1. / (255. * 255. * 255.))); }");
			break;
		case 56:
			this.decl("vec4 packNormal( vec3 v ) { return vec4((v + vec3(1.)) * vec3(0.5),1.); }");
			break;
		case 57:
			this.decl("vec3 unpackNormal( vec4 v ) { return normalize((v.xyz - vec3(0.5)) * vec3(2.)); }");
			break;
		case 58:
			this.decl("vec2 screenToUv( vec2 v ) { return v * vec2(0.5,-0.5) + vec2(0.5,0.5); }");
			break;
		case 59:
			this.decl("vec2 uvToScreen( vec2 v ) { return v * vec2(2.,-2.) + vec2(-1., 1.); }");
			break;
		case 60:case 61:case 62:
			this.decl("#extension GL_OES_standard_derivatives:enable");
			break;
		default:
		}
		return hxsl_GlslOut.GLOBALS.get(g);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 0:
				this.buf.b += Std.string("null");
				break;
			case 1:
				var b = c.b;
				this.buf.b += Std.string(b);
				break;
			case 2:
				var v = c.v;
				this.buf.b += Std.string(v);
				break;
			case 3:
				var f = c.v;
				var str = "" + f;
				this.buf.b += Std.string(str);
				if(str.indexOf(".") == -1 && str.indexOf("e") == -1) {
					this.buf.b += Std.string(".");
				}
				break;
			case 4:
				var v1 = c.v;
				this.buf.b += Std.string("\"" + v1 + "\"");
				break;
			}
			break;
		case 1:
			var v2 = _g.v;
			var v3 = this.varName(v2);
			this.buf.b += Std.string(v3);
			break;
		case 2:
			var g = _g.g;
			var v4 = hxsl_GlslOut.GLOBALS.get(g);
			this.buf.b += Std.string(v4);
			break;
		case 3:
			var e1 = _g.e;
			this.buf.b += Std.string("(");
			this.addValue(e1,tabs);
			this.buf.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buf.b += Std.string("{\n");
			var t2 = tabs + "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e2 = el[_g1];
				++_g1;
				this.buf.b += Std.string(t2);
				this.addExpr(e2,t2);
				this.newLine(e2);
			}
			this.buf.b += Std.string(tabs);
			this.buf.b += Std.string("}");
			break;
		case 5:
			var e21 = _g.e2;
			var e11 = _g.e1;
			var op = _g.op;
			var _g2 = e21.t;
			var _g11 = e11.t;
			switch(op._hx_index) {
			case 1:
				if(_g11._hx_index == 5) {
					if(_g11.size == 3) {
						if(_g11.t._hx_index == 1) {
							if(_g2._hx_index == 8) {
								this.decl(hxsl_GlslOut.MAT34);
								this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
								var tmp;
								if(op._hx_index == 20) {
									var _g3 = op.op;
									tmp = true;
								} else {
									tmp = false;
								}
								if(tmp) {
									this.addValue(e11,tabs);
									this.buf.b += Std.string(" = ");
								}
								this.buf.b += Std.string("m3x4mult(");
								this.addValue(e11,tabs);
								this.buf.b += Std.string(",");
								this.addValue(e21,tabs);
								this.buf.b += Std.string(")");
							} else {
								this.addValue(e11,tabs);
								this.buf.b += Std.string(" ");
								var v5 = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v5);
								this.buf.b += Std.string(" ");
								this.addValue(e21,tabs);
							}
						} else {
							this.addValue(e11,tabs);
							this.buf.b += Std.string(" ");
							var v6 = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v6);
							this.buf.b += Std.string(" ");
							this.addValue(e21,tabs);
						}
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v7 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v7);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v8 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v8);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 5:
				if(_g11._hx_index == 5) {
					var _g31 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g5 = _g2.t;
						var _g4 = _g2.size;
						var n = _g11.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v9;
						switch(op._hx_index) {
						case 5:
							v9 = "equal";
							break;
						case 6:
							v9 = "notEqual";
							break;
						case 7:
							v9 = "greaterThan";
							break;
						case 8:
							v9 = "greaterThanEqual";
							break;
						case 9:
							v9 = "lessThan";
							break;
						case 10:
							v9 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v9);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v10 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v10);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v11 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v11);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 6:
				if(_g11._hx_index == 5) {
					var _g17 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g19 = _g2.t;
						var _g18 = _g2.size;
						var n1 = _g11.size;
						this.buf.b += Std.string("vec" + n1 + "(");
						var v12;
						switch(op._hx_index) {
						case 5:
							v12 = "equal";
							break;
						case 6:
							v12 = "notEqual";
							break;
						case 7:
							v12 = "greaterThan";
							break;
						case 8:
							v12 = "greaterThanEqual";
							break;
						case 9:
							v12 = "lessThan";
							break;
						case 10:
							v12 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v12);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v13 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v13);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v14 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v14);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 7:
				if(_g11._hx_index == 5) {
					var _g24 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g26 = _g2.t;
						var _g25 = _g2.size;
						var n2 = _g11.size;
						this.buf.b += Std.string("vec" + n2 + "(");
						var v15;
						switch(op._hx_index) {
						case 5:
							v15 = "equal";
							break;
						case 6:
							v15 = "notEqual";
							break;
						case 7:
							v15 = "greaterThan";
							break;
						case 8:
							v15 = "greaterThanEqual";
							break;
						case 9:
							v15 = "lessThan";
							break;
						case 10:
							v15 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v15);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v16 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v16);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v17 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v17);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 8:
				if(_g11._hx_index == 5) {
					var _g7 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g9 = _g2.t;
						var _g8 = _g2.size;
						var n3 = _g11.size;
						this.buf.b += Std.string("vec" + n3 + "(");
						var v18;
						switch(op._hx_index) {
						case 5:
							v18 = "equal";
							break;
						case 6:
							v18 = "notEqual";
							break;
						case 7:
							v18 = "greaterThan";
							break;
						case 8:
							v18 = "greaterThanEqual";
							break;
						case 9:
							v18 = "lessThan";
							break;
						case 10:
							v18 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v18);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v19 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v19);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v20 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v20);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 9:
				if(_g11._hx_index == 5) {
					var _g111 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g13 = _g2.t;
						var _g12 = _g2.size;
						var n4 = _g11.size;
						this.buf.b += Std.string("vec" + n4 + "(");
						var v21;
						switch(op._hx_index) {
						case 5:
							v21 = "equal";
							break;
						case 6:
							v21 = "notEqual";
							break;
						case 7:
							v21 = "greaterThan";
							break;
						case 8:
							v21 = "greaterThanEqual";
							break;
						case 9:
							v21 = "lessThan";
							break;
						case 10:
							v21 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v21);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v22 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v22);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v23 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v23);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 10:
				if(_g11._hx_index == 5) {
					var _g28 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g30 = _g2.t;
						var _g29 = _g2.size;
						var n5 = _g11.size;
						this.buf.b += Std.string("vec" + n5 + "(");
						var v24;
						switch(op._hx_index) {
						case 5:
							v24 = "equal";
							break;
						case 6:
							v24 = "notEqual";
							break;
						case 7:
							v24 = "greaterThan";
							break;
						case 8:
							v24 = "greaterThanEqual";
							break;
						case 9:
							v24 = "lessThan";
							break;
						case 10:
							v24 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v24);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v25 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v25);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v26 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v26);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 18:
				this.decl("int _ushr( int i, int j ) { return int(uint(i) >> uint(j)); }");
				this.buf.b += Std.string("_ushr(");
				this.addValue(e11,tabs);
				this.buf.b += Std.string(",");
				this.addValue(e21,tabs);
				this.buf.b += Std.string(")");
				break;
			case 19:
				if(e.t != hxsl_Type.TInt) {
					var tmp1;
					if(op._hx_index == 20) {
						var _g6 = op.op;
						tmp1 = true;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" = ");
					}
					this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e11,e21]), t : e.t, p : e.p},tabs);
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v27 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v27);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 20:
				switch(op.op._hx_index) {
				case 1:
					if(_g11._hx_index == 5) {
						if(_g11.size == 3) {
							if(_g11.t._hx_index == 1) {
								if(_g2._hx_index == 8) {
									this.decl(hxsl_GlslOut.MAT34);
									this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
									var tmp2;
									if(op._hx_index == 20) {
										var _g10 = op.op;
										tmp2 = true;
									} else {
										tmp2 = false;
									}
									if(tmp2) {
										this.addValue(e11,tabs);
										this.buf.b += Std.string(" = ");
									}
									this.buf.b += Std.string("m3x4mult(");
									this.addValue(e11,tabs);
									this.buf.b += Std.string(",");
									this.addValue(e21,tabs);
									this.buf.b += Std.string(")");
								} else {
									this.addValue(e11,tabs);
									this.buf.b += Std.string(" ");
									var v28 = hxsl_Printer.opStr(op);
									this.buf.b += Std.string(v28);
									this.buf.b += Std.string(" ");
									this.addValue(e21,tabs);
								}
							} else {
								this.addValue(e11,tabs);
								this.buf.b += Std.string(" ");
								var v29 = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v29);
								this.buf.b += Std.string(" ");
								this.addValue(e21,tabs);
							}
						} else {
							this.addValue(e11,tabs);
							this.buf.b += Std.string(" ");
							var v30 = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v30);
							this.buf.b += Std.string(" ");
							this.addValue(e21,tabs);
						}
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v31 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v31);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
					break;
				case 19:
					if(e.t != hxsl_Type.TInt) {
						var tmp3;
						if(op._hx_index == 20) {
							var _g14 = op.op;
							tmp3 = true;
						} else {
							tmp3 = false;
						}
						if(tmp3) {
							this.addValue(e11,tabs);
							this.buf.b += Std.string(" = ");
						}
						this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e11,e21]), t : e.t, p : e.p},tabs);
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v32 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v32);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
					break;
				default:
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v33 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v33);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			default:
				this.addValue(e11,tabs);
				this.buf.b += Std.string(" ");
				var v34 = hxsl_Printer.opStr(op);
				this.buf.b += Std.string(v34);
				this.buf.b += Std.string(" ");
				this.addValue(e21,tabs);
			}
			break;
		case 6:
			var e12 = _g.e1;
			var op1 = _g.op;
			var _this = this.buf;
			var _this1 = _this.b;
			var tmp4;
			switch(op1._hx_index) {
			case 0:
				tmp4 = "++";
				break;
			case 1:
				tmp4 = "--";
				break;
			case 2:
				tmp4 = "!";
				break;
			case 3:
				tmp4 = "-";
				break;
			case 4:
				tmp4 = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp4);
			this.addValue(e12,tabs);
			break;
		case 7:
			var init = _g.init;
			var v35 = _g.v;
			this.locals.h[v35.id] = v35;
			if(init != null) {
				var v36 = this.varName(v35);
				this.buf.b += Std.string(v36);
				this.buf.b += Std.string(" = ");
				this.addValue(init,tabs);
			} else {
				this.buf.b += Std.string("/*var*/");
			}
			break;
		case 8:
			var _g35 = _g.args;
			var _g34 = _g.e;
			var _g38 = _g34.t;
			var _g37 = _g34.p;
			var _g36 = _g34.e;
			if(_g36._hx_index == 2) {
				var _g39 = _g36.g;
				switch(_g39._hx_index) {
				case 35:
					var args = _g35;
					var g1 = _g39;
					var v37 = this.getFunName(g1,args,e.t);
					this.buf.b += Std.string(v37);
					this.buf.b += Std.string("(");
					var _g15 = 0;
					while(_g15 < args.length) {
						var e3 = args[_g15];
						++_g15;
						this.addValue(e3,tabs);
						this.buf.b += Std.string(", ");
					}
					this.buf.b += Std.string("0)");
					break;
				case 53:
					if(_g35.length == 1) {
						var e4 = _g35[0];
						this.buf.b += Std.string("clamp(");
						this.addValue(e4,tabs);
						this.buf.b += Std.string(", 0., 1.)");
					} else {
						var v38 = _g34;
						var args1 = _g35;
						var _g16 = v38.e;
						if(_g16._hx_index == 2) {
							var g2 = _g16.g;
							var v39 = this.getFunName(g2,args1,e.t);
							this.buf.b += Std.string(v39);
						} else {
							this.addValue(v38,tabs);
						}
						this.buf.b += Std.string("(");
						var first = true;
						var _g21 = 0;
						while(_g21 < args1.length) {
							var e5 = args1[_g21];
							++_g21;
							if(first) {
								first = false;
							} else {
								this.buf.b += Std.string(", ");
							}
							this.addValue(e5,tabs);
						}
						this.buf.b += Std.string(")");
					}
					break;
				default:
					var args2 = _g35;
					var v40 = _g34;
					var _g20 = v40.e;
					if(_g20._hx_index == 2) {
						var g3 = _g20.g;
						var v41 = this.getFunName(g3,args2,e.t);
						this.buf.b += Std.string(v41);
					} else {
						this.addValue(v40,tabs);
					}
					this.buf.b += Std.string("(");
					var first1 = true;
					var _g22 = 0;
					while(_g22 < args2.length) {
						var e6 = args2[_g22];
						++_g22;
						if(first1) {
							first1 = false;
						} else {
							this.buf.b += Std.string(", ");
						}
						this.addValue(e6,tabs);
					}
					this.buf.b += Std.string(")");
				}
			} else {
				var args3 = _g35;
				var v42 = _g34;
				var _g23 = v42.e;
				if(_g23._hx_index == 2) {
					var g4 = _g23.g;
					var v43 = this.getFunName(g4,args3,e.t);
					this.buf.b += Std.string(v43);
				} else {
					this.addValue(v42,tabs);
				}
				this.buf.b += Std.string("(");
				var first2 = true;
				var _g27 = 0;
				while(_g27 < args3.length) {
					var e7 = args3[_g27];
					++_g27;
					if(first2) {
						first2 = false;
					} else {
						this.buf.b += Std.string(", ");
					}
					this.addValue(e7,tabs);
				}
				this.buf.b += Std.string(")");
			}
			break;
		case 9:
			var regs = _g.regs;
			var e8 = _g.e;
			if(e8.t._hx_index == 3) {
				var _g32 = 0;
				while(_g32 < regs.length) {
					var r = regs[_g32];
					++_g32;
					if(r != hxsl_Component.X) {
						throw new js__$Boot_HaxeError("assert");
					}
				}
				switch(regs.length) {
				case 1:
					this.addValue(e8,tabs);
					break;
				case 2:
					this.decl("vec2 _vec2( float v ) { return vec2(v,v); }");
					this.buf.b += Std.string("_vec2(");
					this.addValue(e8,tabs);
					this.buf.b += Std.string(")");
					break;
				case 3:
					this.decl("vec3 _vec3( float v ) { return vec3(v,v,v); }");
					this.buf.b += Std.string("_vec3(");
					this.addValue(e8,tabs);
					this.buf.b += Std.string(")");
					break;
				case 4:
					this.decl("vec4 _vec4( float v ) { return vec4(v,v,v,v); }");
					this.buf.b += Std.string("_vec4(");
					this.addValue(e8,tabs);
					this.buf.b += Std.string(")");
					break;
				default:
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				this.addValue(e8,tabs);
				this.buf.b += Std.string(".");
				var _g33 = 0;
				while(_g33 < regs.length) {
					var r1 = regs[_g33];
					++_g33;
					var _this2 = this.buf;
					var _this3 = _this2.b;
					var tmp5;
					switch(r1._hx_index) {
					case 0:
						tmp5 = "x";
						break;
					case 1:
						tmp5 = "y";
						break;
					case 2:
						tmp5 = "z";
						break;
					case 3:
						tmp5 = "w";
						break;
					}
					_this2.b = _this3 + Std.string(tmp5);
				}
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			this.buf.b += Std.string("if( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(") ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				if(!this.isBlock(eif)) {
					this.buf.b += Std.string(";");
				}
				this.buf.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buf.b += Std.string("discard");
			break;
		case 12:
			var e9 = _g.e;
			if(e9 == null) {
				this.buf.b += Std.string("return");
			} else {
				this.buf.b += Std.string("return ");
				this.addValue(e9,tabs);
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v44 = _g.v;
			this.locals.h[v44.id] = v44;
			var _g40 = it.e;
			if(_g40._hx_index == 5) {
				if(_g40.op._hx_index == 21) {
					var e22 = _g40.e2;
					var e13 = _g40.e1;
					this.buf.b += Std.string("for(");
					this.buf.b += Std.string(v44.name + "=");
					this.addValue(e13,tabs);
					this.buf.b += Std.string(";" + v44.name + "<");
					this.addValue(e22,tabs);
					this.buf.b += Std.string(";" + v44.name + "++) ");
					this.addBlock(loop,tabs);
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			break;
		case 14:
			this.buf.b += Std.string("continue");
			break;
		case 15:
			this.buf.b += Std.string("break");
			break;
		case 16:
			var index = _g.index;
			var e10 = _g.e;
			this.addValue(e10,tabs);
			this.buf.b += Std.string("[");
			this.addValue(index,tabs);
			this.buf.b += Std.string("]");
			break;
		case 17:
			var el1 = _g.el;
			var _g41 = e.t;
			if(_g41._hx_index == 15) {
				var _g210 = _g41.size;
				var t = _g41.t;
				this.addType(t);
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			this.buf.b += Std.string("[" + el1.length + "]");
			this.buf.b += Std.string("(");
			var first3 = true;
			var _g310 = 0;
			while(_g310 < el1.length) {
				var e14 = el1[_g310];
				++_g310;
				if(first3) {
					first3 = false;
				} else {
					this.buf.b += Std.string(", ");
				}
				this.addValue(e14,tabs);
			}
			this.buf.b += Std.string(")");
			break;
		case 18:
			var _g161 = _g.def;
			var _g151 = _g.cases;
			var _g141 = _g.e;
			this.buf.b += Std.string("switch(...)");
			break;
		case 19:
			var _g112 = _g.loop;
			var _g101 = _g.e;
			if(_g.normalWhile == false) {
				var e15 = _g101;
				var loop1 = _g112;
				var old = tabs;
				tabs += "\t";
				this.buf.b += Std.string("do ");
				this.addBlock(loop1,tabs);
				this.buf.b += Std.string(" while( ");
				this.addValue(e15,tabs);
				this.buf.b += Std.string(" )");
			} else {
				var e16 = _g101;
				var loop2 = _g112;
				this.buf.b += Std.string("while( ");
				this.addValue(e16,tabs);
				this.buf.b += Std.string(" ) ");
				this.addBlock(loop2,tabs);
			}
			break;
		case 20:
			var _g71 = _g.args;
			var _g61 = _g.m;
			var e17 = _g.e;
			this.addExpr(e17,tabs);
			break;
		}
	}
	,varName: function(v) {
		if(v.kind == hxsl_VarKind.Output) {
			if(this.isVertex) {
				return "gl_Position";
			}
			if(this.glES != null && this.glES <= 2) {
				if(this.outIndexes == null) {
					return "gl_FragColor";
				}
				return "gl_FragData[" + this.outIndexes.h[v.id] + "]";
			}
		}
		var n = this.varNames.h[v.id];
		if(n != null) {
			return n;
		}
		n = v.name;
		var _this = hxsl_GlslOut.KWDS;
		if(__map_reserved[n] != null ? _this.existsReserved(n) : _this.h.hasOwnProperty(n)) {
			n = "_" + n;
		}
		var _this1 = this.allNames;
		if(__map_reserved[n] != null ? _this1.existsReserved(n) : _this1.h.hasOwnProperty(n)) {
			var k = 2;
			n += "_";
			while(true) {
				var _this2 = this.allNames;
				var key = n + k;
				if(!(__map_reserved[key] != null ? _this2.existsReserved(key) : _this2.h.hasOwnProperty(key))) {
					break;
				}
				++k;
			}
			n += k;
		}
		this.varNames.h[v.id] = n;
		var value = v.id;
		var _this3 = this.allNames;
		if(__map_reserved[n] != null) {
			_this3.setReserved(n,value);
		} else {
			_this3.h[n] = value;
		}
		return n;
	}
	,newLine: function(e) {
		if(this.isBlock(e)) {
			this.buf.b += Std.string("\n");
		} else {
			this.buf.b += Std.string(";\n");
		}
	}
	,isBlock: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var _g1 = _g.el;
			return true;
		case 13:
			var _g6 = _g.it;
			var _g5 = _g.v;
			var loop = _g.loop;
			return this.isBlock(loop);
		case 19:
			var _g2 = _g.e;
			if(_g.normalWhile == true) {
				var loop1 = _g.loop;
				return this.isBlock(loop1);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,initVar: function(v) {
		switch(v.kind._hx_index) {
		case 0:case 2:
			var _g = v.type;
			var tmp;
			if(_g._hx_index == 16) {
				var _g2 = _g.size;
				var _g1 = _g.t;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				this.buf.b += Std.string("layout(std140) ");
			}
			this.buf.b += Std.string("uniform ");
			break;
		case 1:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "attribute " : "in ");
			break;
		case 3:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "varying " : this.isVertex ? "out " : "in ");
			break;
		case 4:
			break;
		case 5:
			if(this.glES != null && this.glES <= 2) {
				this.outIndexes.h[v.id] = this.outIndex++;
				return;
			}
			if(this.isVertex) {
				return;
			}
			if(this.glES != null) {
				this.buf.b += Std.string("layout(location=" + this.outIndex++ + ") ");
			}
			this.buf.b += Std.string("out ");
			break;
		case 6:
			return;
		}
		if(v.qualifiers != null) {
			var _g11 = 0;
			var _g21 = v.qualifiers;
			while(_g11 < _g21.length) {
				var q = _g21[_g11];
				++_g11;
				if(q._hx_index == 6) {
					var p = q.p;
					switch(p._hx_index) {
					case 0:
						this.buf.b += Std.string("lowp ");
						break;
					case 1:
						this.buf.b += Std.string("mediump ");
						break;
					case 2:
						this.buf.b += Std.string("highp ");
						break;
					}
				}
			}
		}
		this.addVar(v);
		this.buf.b += Std.string(";\n");
	}
	,initVars: function(s) {
		this.outIndex = 0;
		this.uniformBuffer = 0;
		this.outIndexes = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.initVar(v);
		}
		this.buf.b += Std.string("\n");
		if(this.outIndex < 2) {
			this.outIndexes = null;
		} else if(!this.isVertex && (this.glES != null && this.glES <= 2)) {
			this.decl("#extension GL_EXT_draw_buffers : enable");
		}
	}
	,run: function(s) {
		this.locals = new haxe_ds_IntMap();
		this.decls = [];
		this.buf = new StringBuf();
		this.exprValues = [];
		this.decl("precision mediump float;");
		if(s.funs.length != 1) {
			throw new js__$Boot_HaxeError("assert");
		}
		var f = s.funs[0];
		this.isVertex = f.kind == hxsl_FunctionKind.Vertex;
		this.initVars(s);
		var tmp = this.buf;
		this.buf = new StringBuf();
		this.buf.b += Std.string("void main(void) {\n");
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				this.buf.b += Std.string("\t");
				this.addExpr(e,"\t");
				this.newLine(e);
			}
		} else {
			this.addExpr(f.expr,"");
		}
		this.buf.b += Std.string("}");
		this.exprValues.push(this.buf.b);
		this.buf = tmp;
		var locals = Lambda.array(this.locals);
		locals.sort(function(v1,v2) {
			return Reflect.compare(v1.name,v2.name);
		});
		var _g2 = 0;
		while(_g2 < locals.length) {
			var v = locals[_g2];
			++_g2;
			this.addVar(v);
			this.buf.b += Std.string(";\n");
		}
		this.buf.b += Std.string("\n");
		var _g3 = 0;
		var _g4 = this.exprValues;
		while(_g3 < _g4.length) {
			var e1 = _g4[_g3];
			++_g3;
			this.buf.b += Std.string(e1);
			this.buf.b += Std.string("\n\n");
		}
		if(this.glES != null) {
			this.decl("#version " + (this.version < 100 ? 100 : this.version) + (this.version > 150 ? " es" : ""));
		} else if(this.version != null) {
			this.decl("#version " + (this.version > 150 ? 150 : this.version));
		} else {
			this.decl("#version 130");
		}
		this.decls.push(this.buf.b);
		this.buf = null;
		return this.decls.join("\n");
	}
	,__class__: hxsl_GlslOut
};
var hxsl__$Linker_AllocatedVar = function() {
};
$hxClasses["hxsl._Linker.AllocatedVar"] = hxsl__$Linker_AllocatedVar;
hxsl__$Linker_AllocatedVar.__name__ = "hxsl._Linker.AllocatedVar";
hxsl__$Linker_AllocatedVar.prototype = {
	__class__: hxsl__$Linker_AllocatedVar
};
var hxsl__$Linker_ShaderInfos = function(n,v) {
	this.name = n;
	this.uid = hxsl__$Linker_ShaderInfos.UID++;
	this.vertex = v;
	this.processed = new haxe_ds_IntMap();
	this.usedFunctions = [];
	this.read = new haxe_ds_IntMap();
	this.write = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Linker.ShaderInfos"] = hxsl__$Linker_ShaderInfos;
hxsl__$Linker_ShaderInfos.__name__ = "hxsl._Linker.ShaderInfos";
hxsl__$Linker_ShaderInfos.prototype = {
	__class__: hxsl__$Linker_ShaderInfos
};
var hxsl_Linker = function(batchMode) {
	if(batchMode == null) {
		batchMode = false;
	}
	this.debugDepth = 0;
	this.batchMode = batchMode;
};
$hxClasses["hxsl.Linker"] = hxsl_Linker;
hxsl_Linker.__name__ = "hxsl.Linker";
hxsl_Linker.prototype = {
	error: function(msg,p) {
		return hxsl_Error.t(msg,p);
	}
	,mergeVar: function(path,v,v2,p) {
		switch(v.kind._hx_index) {
		case 0:case 1:case 3:case 4:case 5:
			break;
		case 2:case 6:
			throw new js__$Boot_HaxeError("assert");
		}
		if(v.kind != v2.kind && v.kind != hxsl_VarKind.Local && v2.kind != hxsl_VarKind.Local) {
			this.error("'" + path + "' kind does not match : " + Std.string(v.kind) + " should be " + Std.string(v2.kind),p);
		}
		var _g1 = v2.type;
		var _g2 = v.type;
		if(_g2._hx_index == 13) {
			if(_g1._hx_index == 13) {
				var fl1 = _g2.vl;
				var fl2 = _g1.vl;
				var _g11 = 0;
				while(_g11 < fl1.length) {
					var f1 = fl1[_g11];
					++_g11;
					var ft = null;
					var _g12 = 0;
					while(_g12 < fl2.length) {
						var f2 = fl2[_g12];
						++_g12;
						if(f1.name == f2.name) {
							ft = f2;
							break;
						}
					}
					if(ft == null) {
						fl2.push(this.allocVar(f1,p).v);
					} else {
						this.mergeVar(path + "." + ft.name,f1,ft,p);
					}
				}
			} else if(!Type.enumEq(v.type,v2.type)) {
				this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
			}
		} else if(!Type.enumEq(v.type,v2.type)) {
			this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
		}
	}
	,allocVar: function(v,p,path,parent) {
		var _gthis = this;
		if(v.parent != null && parent == null) {
			parent = this.allocVar(v.parent,p);
			var p1 = parent.v;
			path = p1.name;
			p1 = p1.parent;
			while(p1 != null) {
				path = p1.name + "." + path;
				p1 = p1.parent;
			}
		}
		var key = path == null ? v.name : path + "." + v.name;
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 4) {
					var n = q.n;
					key = n;
				}
			}
		}
		var _this = this.varMap;
		var v2 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		var vname = v.name;
		if(v2 != null) {
			var _g2 = 0;
			var _g11 = v2.merged;
			while(_g2 < _g11.length) {
				var vm = _g11[_g2];
				++_g2;
				if(vm == v) {
					return v2;
				}
			}
			var tmp;
			if(!(v.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v.kind == hxsl_VarKind.Function || v.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Private))) {
				var v1 = v2.v;
				tmp = v1.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v1.kind == hxsl_VarKind.Function || v1.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Private);
			} else {
				tmp = true;
			}
			if(tmp || v.kind == hxsl_VarKind.Param && v2.v.kind == hxsl_VarKind.Param) {
				var k = 2;
				while(true) {
					var _this1 = this.varMap;
					var key1 = key + k;
					var a = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
					if(a == null) {
						break;
					}
					var _g21 = 0;
					var _g3 = a.merged;
					while(_g21 < _g3.length) {
						var vm1 = _g3[_g21];
						++_g21;
						if(vm1 == v) {
							return a;
						}
					}
					++k;
				}
				vname += k;
				key += k;
			} else {
				v2.merged.push(v);
				this.mergeVar(key,v,v2.v,p);
				this.varIdMap.h[v.id] = v2.id;
				return v2;
			}
		}
		var vid = this.allVars.length + 1;
		var v21 = { id : vid, name : vname, type : v.type, kind : v.kind, qualifiers : v.qualifiers, parent : parent == null ? null : parent.v};
		var a1 = new hxsl__$Linker_AllocatedVar();
		a1.v = v21;
		a1.merged = [v];
		a1.path = key;
		a1.id = vid;
		a1.parent = parent;
		a1.instanceIndex = this.curInstance;
		this.allVars.push(a1);
		var _this2 = this.varMap;
		if(__map_reserved[key] != null) {
			_this2.setReserved(key,a1);
		} else {
			_this2.h[key] = a1;
		}
		var _g4 = v21.type;
		if(_g4._hx_index == 13) {
			var vl = _g4.vl;
			var _g5 = [];
			var _g12 = 0;
			while(_g12 < vl.length) {
				var v3 = vl[_g12];
				++_g12;
				_g5.push(this.allocVar(v3,p,key,a1).v);
			}
			v21.type = hxsl_Type.TStruct(_g5);
		}
		return a1;
	}
	,mapExprVar: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			if(!this.locals.h.hasOwnProperty(v.id)) {
				var v1 = this.allocVar(v,e.p);
				if(this.curShader != null && !this.curShader.write.h.hasOwnProperty(v1.id)) {
					this.curShader.read.h[v1.id] = v1;
					if(this.curShader.vertex == null && v1.v.kind == hxsl_VarKind.Var) {
						this.curShader.vertex = false;
					}
				}
				return { e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p};
			}
			break;
		case 5:
			var e2 = _g.e2;
			var e1 = _g.e1;
			var op = _g.op;
			var _g1 = e1.e;
			switch(op._hx_index) {
			case 4:
				switch(_g1._hx_index) {
				case 1:
					var _g11 = _g1.v;
					var v2 = _g11;
					if(!this.locals.h.hasOwnProperty(v2.id)) {
						var e21 = this.mapExprVar(e2);
						var v3 = this.allocVar(v2,e1.p);
						if(this.curShader != null) {
							this.curShader.write.h[v3.id] = v3;
						}
						return { e : hxsl_TExprDef.TBinop(op,{ e : hxsl_TExprDef.TVar(v3.v), t : v3.v.type, p : e.p},e21), t : e.t, p : e.p};
					} else {
						var v4 = _g11;
						if(!this.locals.h.hasOwnProperty(v4.id)) {
							var e11 = this.mapExprVar(e1);
							var e22 = this.mapExprVar(e2);
							var v5 = this.allocVar(v4,e11.p);
							if(this.curShader != null) {
								this.curShader.write.h[v5.id] = v5;
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e22), t : e.t, p : e.p};
						}
					}
					break;
				case 9:
					var _g3 = _g1.regs;
					var _g2 = _g1.e;
					var _g6 = _g2.t;
					var _g5 = _g2.p;
					var _g4 = _g2.e;
					if(_g4._hx_index == 1) {
						var v6 = _g4.v;
						if(!this.locals.h.hasOwnProperty(v6.id)) {
							var e12 = this.mapExprVar(e1);
							var e23 = this.mapExprVar(e2);
							var v7 = this.allocVar(v6,e12.p);
							if(this.curShader != null) {
								this.curShader.write.h[v7.id] = v7;
							}
							return { e : hxsl_TExprDef.TBinop(op,e12,e23), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			case 20:
				var _g8 = op.op;
				switch(_g1._hx_index) {
				case 1:
					var v8 = _g1.v;
					if(!this.locals.h.hasOwnProperty(v8.id)) {
						var e13 = this.mapExprVar(e1);
						var e24 = this.mapExprVar(e2);
						var v9 = this.allocVar(v8,e13.p);
						if(this.curShader != null) {
							this.curShader.write.h[v9.id] = v9;
						}
						return { e : hxsl_TExprDef.TBinop(op,e13,e24), t : e.t, p : e.p};
					}
					break;
				case 9:
					var _g111 = _g1.regs;
					var _g10 = _g1.e;
					var _g14 = _g10.t;
					var _g13 = _g10.p;
					var _g12 = _g10.e;
					if(_g12._hx_index == 1) {
						var v10 = _g12.v;
						if(!this.locals.h.hasOwnProperty(v10.id)) {
							var e14 = this.mapExprVar(e1);
							var e25 = this.mapExprVar(e2);
							var v11 = this.allocVar(v10,e14.p);
							if(this.curShader != null) {
								this.curShader.write.h[v11.id] = v11;
							}
							return { e : hxsl_TExprDef.TBinop(op,e14,e25), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			default:
			}
			break;
		case 7:
			var _g61 = _g.init;
			var v12 = _g.v;
			this.locals.h[v12.id] = true;
			break;
		case 11:
			if(this.curShader != null) {
				this.curShader.vertex = false;
				this.curShader.hasDiscard = true;
			}
			break;
		case 13:
			var _g41 = _g.loop;
			var _g31 = _g.it;
			var v13 = _g.v;
			this.locals.h[v13.id] = true;
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapExprVar));
	}
	,addShader: function(name,vertex,e,p) {
		var s = new hxsl__$Linker_ShaderInfos(name,vertex);
		this.curShader = s;
		s.priority = p;
		s.body = this.mapExprVar(e);
		this.shaders.push(s);
		this.curShader = null;
		return s;
	}
	,sortByPriorityDesc: function(s1,s2) {
		if(s1.priority == s2.priority) {
			return s1.uid - s2.uid;
		}
		return s2.priority - s1.priority;
	}
	,buildDependency: function(s,v,isWritten) {
		var found = !isWritten;
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var parent = _g1[_g];
			++_g;
			if(parent == s) {
				found = true;
				continue;
			} else if(!found) {
				continue;
			}
			if(!parent.write.h.hasOwnProperty(v.id)) {
				continue;
			}
			if(s.vertex) {
				if(parent.vertex == false) {
					continue;
				}
				if(parent.vertex == null) {
					parent.vertex = true;
				}
			}
			s.deps.set(parent,true);
			this.debugDepth++;
			this.initDependencies(parent);
			this.debugDepth--;
			if(!parent.read.h.hasOwnProperty(v.id)) {
				return;
			}
		}
		if(v.v.kind == hxsl_VarKind.Var) {
			this.error("Variable " + v.path + " required by " + s.name + " is missing initializer",null);
		}
	}
	,initDependencies: function(s) {
		if(s.deps != null) {
			return;
		}
		s.deps = new haxe_ds_ObjectMap();
		var r = s.read.iterator();
		while(r.hasNext()) {
			var r1 = r.next();
			this.buildDependency(s,r1,s.write.h.hasOwnProperty(r1.id));
		}
		if(s.vertex == null) {
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.vertex == false) {
					s.vertex = false;
					break;
				}
			}
		}
		if(s.vertex) {
			var d2 = s.deps.keys();
			while(d2.hasNext()) {
				var d3 = d2.next();
				if(d3.vertex == null) {
					d3.vertex = true;
				}
			}
		}
	}
	,collect: function(cur,out,vertex) {
		if(cur.onStack) {
			this.error("Loop in shader dependencies (" + cur.name + ")",null);
		}
		if(cur.marked == vertex) {
			return;
		}
		cur.marked = vertex;
		cur.onStack = true;
		var _g = [];
		var d = cur.deps.keys();
		while(d.hasNext()) {
			var d1 = d.next();
			_g.push(d1);
		}
		var deps = _g;
		deps.sort($bind(this,this.sortByPriorityDesc));
		var _g1 = 0;
		while(_g1 < deps.length) {
			var d2 = deps[_g1];
			++_g1;
			this.collect(d2,out,vertex);
		}
		if(cur.vertex == null) {
			cur.vertex = vertex;
		}
		if(cur.vertex == vertex) {
			out.push(cur);
		}
		cur.onStack = false;
	}
	,uniqueLocals: function(expr,locals) {
		var _g = expr.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var _g1 = new haxe_ds_StringMap();
			var k = locals.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				if(__map_reserved[k1] != null) {
					_g1.setReserved(k1,true);
				} else {
					_g1.h[k1] = true;
				}
			}
			var locals1 = _g1;
			var _g11 = 0;
			while(_g11 < el.length) {
				var e = el[_g11];
				++_g11;
				this.uniqueLocals(e,locals1);
			}
			break;
		case 7:
			var _g3 = _g.init;
			var v = _g.v;
			var key = v.name;
			if(__map_reserved[key] != null ? locals.existsReserved(key) : locals.h.hasOwnProperty(key)) {
				var k2 = 2;
				while(true) {
					var key1 = v.name + k2;
					if(!(__map_reserved[key1] != null ? locals.existsReserved(key1) : locals.h.hasOwnProperty(key1))) {
						break;
					}
					++k2;
				}
				v.name += k2;
			}
			var key2 = v.name;
			if(__map_reserved[key2] != null) {
				locals.setReserved(key2,true);
			} else {
				locals.h[key2] = true;
			}
			break;
		default:
			var f = $bind(this,this.uniqueLocals);
			var locals2 = locals;
			hxsl_Tools.iter(expr,function(expr1) {
				f(expr1,locals2);
			});
		}
	}
	,link: function(shadersData) {
		var _gthis = this;
		this.varMap = new haxe_ds_StringMap();
		this.varIdMap = new haxe_ds_IntMap();
		this.allVars = [];
		this.shaders = [];
		this.locals = new haxe_ds_IntMap();
		var dupShaders = new haxe_ds_ObjectMap();
		var _g = [];
		var _g1 = 0;
		while(_g1 < shadersData.length) {
			var s = shadersData[_g1];
			++_g1;
			var s1 = s;
			var sreal = s1;
			if(dupShaders.h.__keys__[s1.__id__] != null) {
				s1 = hxsl_Clone.shaderData(s1);
			}
			dupShaders.set(s1,sreal);
			_g.push(s1);
		}
		shadersData = _g;
		this.curInstance = 0;
		var outVars = [];
		var _g2 = 0;
		while(_g2 < shadersData.length) {
			var s2 = shadersData[_g2];
			++_g2;
			this.isBatchShader = this.batchMode && StringTools.startsWith(s2.name,"batchShader_");
			var _g21 = 0;
			var _g3 = s2.vars;
			while(_g21 < _g3.length) {
				var v = _g3[_g21];
				++_g21;
				var v2 = this.allocVar(v,null);
				if(this.isBatchShader && v2.v.kind == hxsl_VarKind.Param && !StringTools.startsWith(v2.path,"Batch_")) {
					v2.v.kind = hxsl_VarKind.Local;
				}
				if(v.kind == hxsl_VarKind.Output) {
					outVars.push(v);
				}
			}
			var _g4 = 0;
			var _g5 = s2.funs;
			while(_g4 < _g5.length) {
				var f = _g5[_g4];
				++_g4;
				var v1 = this.allocVar(f.ref,f.expr.p);
				v1.kind = f.kind;
			}
			this.curInstance++;
		}
		var priority = 0;
		var initPrio_init = [-3000];
		var initPrio_vert = [-2000];
		var initPrio_frag = [-1000];
		var _g31 = 0;
		while(_g31 < shadersData.length) {
			var s3 = shadersData[_g31];
			++_g31;
			var _g32 = 0;
			var _g41 = s3.funs;
			while(_g32 < _g41.length) {
				var f1 = _g41[_g32];
				++_g32;
				var v3 = this.allocVar(f1.ref,f1.expr.p);
				if(v3.kind == null) {
					throw new js__$Boot_HaxeError("assert");
				}
				switch(v3.kind._hx_index) {
				case 0:case 1:
					this.addShader(s3.name + "." + (v3.kind == hxsl_FunctionKind.Vertex ? "vertex" : "fragment"),v3.kind == hxsl_FunctionKind.Vertex,f1.expr,priority);
					break;
				case 2:
					var prio;
					var status;
					switch(f1.ref.name) {
					case "__init__fragment":
						prio = initPrio_frag;
						status = false;
						break;
					case "__init__vertex":
						prio = initPrio_vert;
						status = true;
						break;
					default:
						prio = initPrio_init;
						status = null;
					}
					var _g42 = f1.expr.e;
					if(_g42._hx_index == 4) {
						var el = _g42.el;
						var index = 0;
						var _g43 = 0;
						while(_g43 < el.length) {
							var e = el[_g43];
							++_g43;
							this.addShader(s3.name + "." + f1.ref.name + index++,status,e,prio[0]++);
						}
					} else {
						this.addShader(s3.name + "." + f1.ref.name,status,f1.expr,prio[0]++);
					}
					break;
				case 3:
					throw new js__$Boot_HaxeError("Unexpected helper function in linker " + v3.v.name);
				}
			}
			++priority;
		}
		this.shaders.sort($bind(this,this.sortByPriorityDesc));
		var entry = new hxsl__$Linker_ShaderInfos("<entry>",false);
		entry.deps = new haxe_ds_ObjectMap();
		var _g44 = 0;
		while(_g44 < outVars.length) {
			var v4 = outVars[_g44];
			++_g44;
			this.buildDependency(entry,this.allocVar(v4,null),false);
		}
		var _g51 = 0;
		var _g6 = this.shaders;
		while(_g51 < _g6.length) {
			var s4 = _g6[_g51];
			++_g51;
			if(s4.hasDiscard) {
				this.initDependencies(s4);
				entry.deps.set(s4,true);
			}
		}
		var _g7 = 0;
		var _g8 = this.shaders;
		while(_g7 < _g8.length) {
			var s5 = _g8[_g7];
			++_g7;
			if(s5.vertex != null) {
				continue;
			}
			var onlyParams = true;
			var r = s5.read.iterator();
			while(r.hasNext()) {
				var r1 = r.next();
				if(r1.v.kind != hxsl_VarKind.Param) {
					onlyParams = false;
					break;
				}
			}
			if(onlyParams) {
				s5.vertex = false;
			}
		}
		var v5 = [];
		var f2 = [];
		this.collect(entry,v5,true);
		this.collect(entry,f2,false);
		if(f2.pop() != entry) {
			throw new js__$Boot_HaxeError("assert");
		}
		var _g9 = 0;
		var _g10 = this.shaders;
		while(_g9 < _g10.length) {
			var s6 = _g10[_g9];
			++_g9;
			s6.marked = null;
		}
		var _g11 = 0;
		var _g12 = v5.concat(f2);
		while(_g11 < _g12.length) {
			var s7 = _g12[_g11];
			++_g11;
			var d = s7.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.marked == null) {
					this.error(d1.name + " needed by " + s7.name + " is unreachable",null);
				}
			}
			s7.marked = true;
		}
		var outVars1 = [];
		var varMap_h = { };
		var addVar = null;
		addVar = function(v6) {
			if(varMap_h.hasOwnProperty(v6.id)) {
				return;
			}
			varMap_h[v6.id] = true;
			if(v6.v.parent != null) {
				addVar(v6.parent);
			} else {
				outVars1.push(v6.v);
			}
		};
		var _g13 = 0;
		var _g14 = v5.concat(f2);
		while(_g13 < _g14.length) {
			var s8 = _g14[_g13];
			++_g13;
			var v7 = s8.read.iterator();
			while(v7.hasNext()) {
				var v8 = v7.next();
				addVar(v8);
			}
			var v9 = s8.write.iterator();
			while(v9.hasNext()) {
				var v10 = v9.next();
				addVar(v10);
			}
		}
		var cleanVar = null;
		cleanVar = function(v11) {
			var _g15 = v11.type;
			if(_g15._hx_index == 13) {
				var vl = _g15.vl;
				if(v11.kind != hxsl_VarKind.Input) {
					var vout = [];
					var _g151 = 0;
					while(_g151 < vl.length) {
						var v12 = vl[_g151];
						++_g151;
						if(varMap_h.hasOwnProperty(v12.id)) {
							cleanVar(v12);
							vout.push(v12);
						}
					}
					v11.type = hxsl_Type.TStruct(vout);
				}
			}
		};
		var _g152 = 0;
		while(_g152 < outVars1.length) {
			var v13 = outVars1[_g152];
			++_g152;
			cleanVar(v13);
		}
		var build = function(kind,name,a) {
			var v14 = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TFun([{ ret : hxsl_Type.TVoid, args : []}]), kind : hxsl_VarKind.Function};
			outVars1.push(v14);
			var exprs = [];
			var _g16 = 0;
			while(_g16 < a.length) {
				var s9 = a[_g16];
				++_g16;
				var _g161 = s9.body.e;
				if(_g161._hx_index == 4) {
					var el1 = _g161.el;
					var _g162 = 0;
					while(_g162 < el1.length) {
						var e1 = el1[_g162];
						++_g162;
						exprs.push(e1);
					}
				} else {
					exprs.push(s9.body);
				}
			}
			var expr = { e : hxsl_TExprDef.TBlock(exprs), t : hxsl_Type.TVoid, p : exprs.length == 0 ? null : exprs[0].p};
			_gthis.uniqueLocals(expr,new haxe_ds_StringMap());
			return { kind : kind, ref : v14, ret : hxsl_Type.TVoid, args : [], expr : expr};
		};
		var funs = [build(hxsl_FunctionKind.Vertex,"vertex",v5),build(hxsl_FunctionKind.Fragment,"fragment",f2)];
		var s10 = dupShaders.keys();
		while(s10.hasNext()) {
			var s11 = s10.next();
			var sreal1 = dupShaders.h[s11.__id__];
			if(s11 == sreal1) {
				continue;
			}
			var _g163 = 0;
			var _g17 = s11.vars.length;
			while(_g163 < _g17) {
				var i = _g163++;
				this.allocVar(s11.vars[i],null).merged.unshift(sreal1.vars[i]);
			}
		}
		return { name : "out", vars : outVars1, funs : funs};
	}
	,__class__: hxsl_Linker
};
var hxsl_Output = $hxEnums["hxsl.Output"] = { __ename__ : true, __constructs__ : ["Const","Value","PackNormal","PackFloat","Vec2","Vec3","Vec4","Swiz"]
	,Const: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Value: ($_=function(v,size) { return {_hx_index:1,v:v,size:size,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v","size"],$_)
	,PackNormal: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,PackFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Vec2: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Vec3: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Vec4: ($_=function(a) { return {_hx_index:6,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Swiz: ($_=function(a,swiz) { return {_hx_index:7,a:a,swiz:swiz,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a","swiz"],$_)
};
hxsl_Output.__empty_constructs__ = [];
var hxsl_Printer = function(varId) {
	if(varId == null) {
		varId = false;
	}
	this.varId = varId;
};
$hxClasses["hxsl.Printer"] = hxsl_Printer;
hxsl_Printer.__name__ = "hxsl.Printer";
hxsl_Printer.opStr = function(op) {
	switch(op._hx_index) {
	case 0:
		return "+";
	case 1:
		return "*";
	case 2:
		return "/";
	case 3:
		return "-";
	case 4:
		return "=";
	case 5:
		return "==";
	case 6:
		return "!=";
	case 7:
		return ">";
	case 8:
		return ">=";
	case 9:
		return "<";
	case 10:
		return "<=";
	case 11:
		return "&";
	case 12:
		return "|";
	case 13:
		return "^";
	case 14:
		return "&&";
	case 15:
		return "||";
	case 16:
		return "<<";
	case 17:
		return ">>";
	case 18:
		return ">>>";
	case 19:
		return "%";
	case 20:
		var op1 = op.op;
		return hxsl_Printer.opStr(op1) + "=";
	case 21:
		return "...";
	case 22:
		return "=>";
	case 23:
		return " in ";
	}
};
hxsl_Printer.toString = function(e,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).exprString(e);
};
hxsl_Printer.shaderToString = function(s,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).shaderString(s);
};
hxsl_Printer.prototype = {
	shaderString: function(s) {
		this.buffer = new StringBuf();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addVar(v,hxsl_VarKind.Var);
			this.buffer.b += Std.string(";\n");
		}
		if(s.vars.length > 0) {
			this.buffer.b += Std.string("\n");
		}
		var _g2 = 0;
		var _g3 = s.funs;
		while(_g2 < _g3.length) {
			var f = _g3[_g2];
			++_g2;
			this.addFun(f);
			this.buffer.b += Std.string("\n\n");
		}
		return this.buffer.b;
	}
	,exprString: function(e) {
		this.buffer = new StringBuf();
		this.addExpr(e,"");
		return this.buffer.b;
	}
	,addVar: function(v,defKind,tabs,parent) {
		if(tabs == null) {
			tabs = "";
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				var v1;
				switch(q._hx_index) {
				case 0:
					var max = q.max;
					v1 = "const" + (max == null ? "" : "(" + max + ")");
					break;
				case 1:
					v1 = "private";
					break;
				case 2:
					v1 = "nullable";
					break;
				case 3:
					v1 = "perObject";
					break;
				case 4:
					var n = q.n;
					v1 = "name('" + n + "')";
					break;
				case 5:
					v1 = "shared";
					break;
				case 6:
					var p = q.p;
					v1 = $hxEnums[p.__enum__].__constructs__[p._hx_index].toLowerCase() + "p";
					break;
				case 7:
					var max1 = q.max;
					var min = q.min;
					v1 = "range(" + min + "," + max1 + ")";
					break;
				case 8:
					v1 = "ignore";
					break;
				case 9:
					var n1 = q.v;
					v1 = "perInstance(" + n1 + ")";
					break;
				}
				this.buffer.b += Std.string("@" + v1 + " ");
			}
		}
		if(v.kind != defKind) {
			switch(v.kind._hx_index) {
			case 0:
				this.buffer.b += Std.string("@global ");
				break;
			case 1:
				this.buffer.b += Std.string("@input ");
				break;
			case 2:
				this.buffer.b += Std.string("@param ");
				break;
			case 3:
				this.buffer.b += Std.string("@var ");
				break;
			case 4:
				this.buffer.b += Std.string("@local ");
				break;
			case 5:
				this.buffer.b += Std.string("@output ");
				break;
			case 6:
				this.buffer.b += Std.string("@function ");
				break;
			}
		}
		this.buffer.b += Std.string("var ");
		if(v.parent == parent) {
			this.buffer.b += Std.string(v.name + (this.varId ? "@" + v.id : ""));
		} else {
			this.addVarName(v);
		}
		this.buffer.b += Std.string(" : ");
		var _g2 = v.type;
		if(_g2._hx_index == 13) {
			var vl = _g2.vl;
			this.buffer.b += Std.string("{");
			var first = true;
			var _g3 = 0;
			while(_g3 < vl.length) {
				var v2 = vl[_g3];
				++_g3;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addVar(v2,v2.kind,tabs,v2);
			}
			this.buffer.b += Std.string("}");
		} else {
			var v3 = hxsl_Tools.toString(v.type);
			this.buffer.b += Std.string(v3);
		}
	}
	,addFun: function(f) {
		this.buffer.b += Std.string("function " + f.ref.name + "(");
		var first = true;
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(first) {
				this.buffer.b += Std.string(" ");
				first = false;
			} else {
				this.buffer.b += Std.string(", ");
			}
			this.addVar(a,hxsl_VarKind.Local);
		}
		if(f.args.length > 0) {
			this.buffer.b += Std.string(" ");
		}
		var v = ") : " + hxsl_Tools.toString(f.ret) + " ";
		this.buffer.b += Std.string(v);
		this.addExpr(f.expr,"");
	}
	,addVarName: function(v) {
		if(v.parent != null) {
			this.addVarName(v.parent);
			this.buffer.b += Std.string(".");
		}
		this.buffer.b += Std.string(v.name);
		if(this.varId) {
			this.buffer.b += Std.string("@" + v.id);
		}
	}
	,addConst: function(c) {
		var _this = this.buffer;
		var _this1 = _this.b;
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "null";
			break;
		case 1:
			var b = c.b;
			tmp = b;
			break;
		case 2:
			var i = c.v;
			tmp = i;
			break;
		case 3:
			var f = c.v;
			tmp = f;
			break;
		case 4:
			var s = c.v;
			tmp = "\"" + s + "\"";
			break;
		}
		_this.b = _this1 + Std.string(tmp);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			this.addConst(c);
			break;
		case 1:
			var v = _g.v;
			this.addVarName(v);
			break;
		case 2:
			var g = _g.g;
			var v1 = hxsl_Tools2.toString(g);
			this.buffer.b += Std.string(v1);
			break;
		case 3:
			var e1 = _g.e;
			this.buffer.b += Std.string("(");
			this.addExpr(e1,tabs);
			this.buffer.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buffer.b += Std.string("{");
			tabs += "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e2 = el[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.addExpr(e2,tabs);
				this.buffer.b += Std.string(";");
			}
			tabs = HxOverrides.substr(tabs,1,null);
			if(el.length > 0) {
				this.buffer.b += Std.string("\n" + tabs);
			}
			this.buffer.b += Std.string("}");
			break;
		case 5:
			var e21 = _g.e2;
			var e11 = _g.e1;
			var op = _g.op;
			this.addExpr(e11,tabs);
			var v2 = " " + hxsl_Printer.opStr(op) + " ";
			this.buffer.b += Std.string(v2);
			this.addExpr(e21,tabs);
			break;
		case 6:
			var e3 = _g.e1;
			var op1 = _g.op;
			var _this = this.buffer;
			var _this1 = _this.b;
			var tmp;
			switch(op1._hx_index) {
			case 0:
				tmp = "++";
				break;
			case 1:
				tmp = "--";
				break;
			case 2:
				tmp = "!";
				break;
			case 3:
				tmp = "-";
				break;
			case 4:
				tmp = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp);
			this.addExpr(e3,tabs);
			break;
		case 7:
			var init = _g.init;
			var v3 = _g.v;
			this.addVar(v3,hxsl_VarKind.Local,tabs);
			if(init != null) {
				this.buffer.b += Std.string(" = ");
				this.addExpr(init,tabs);
			}
			break;
		case 8:
			var el1 = _g.args;
			var e4 = _g.e;
			this.addExpr(e4,tabs);
			this.buffer.b += Std.string("(");
			var first = true;
			var _g2 = 0;
			while(_g2 < el1.length) {
				var e5 = el1[_g2];
				++_g2;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e5,tabs);
			}
			this.buffer.b += Std.string(")");
			break;
		case 9:
			var regs = _g.regs;
			var e6 = _g.e;
			this.addExpr(e6,tabs);
			this.buffer.b += Std.string(".");
			var _g3 = 0;
			while(_g3 < regs.length) {
				var r = regs[_g3];
				++_g3;
				this.buffer.b += Std.string(hxsl_Printer.SWIZ[r._hx_index]);
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var cond = _g.econd;
			this.buffer.b += Std.string("if( ");
			this.addExpr(cond,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				this.buffer.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buffer.b += Std.string("discard");
			break;
		case 12:
			var e7 = _g.e;
			this.buffer.b += Std.string("return");
			if(e7 != null) {
				this.buffer.b += Std.string(" ");
				this.addExpr(e7,tabs);
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v4 = _g.v;
			this.buffer.b += Std.string("for( ");
			this.addVarName(v4);
			this.buffer.b += Std.string(" in ");
			this.addExpr(it,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(loop,tabs);
			break;
		case 14:
			this.buffer.b += Std.string("continue");
			break;
		case 15:
			this.buffer.b += Std.string("break");
			break;
		case 16:
			var e22 = _g.index;
			var e12 = _g.e;
			this.addExpr(e12,tabs);
			this.buffer.b += Std.string("[");
			this.addExpr(e22,tabs);
			this.buffer.b += Std.string("]");
			break;
		case 17:
			var el2 = _g.el;
			this.buffer.b += Std.string("[");
			var first1 = true;
			var _g4 = 0;
			while(_g4 < el2.length) {
				var e8 = el2[_g4];
				++_g4;
				if(first1) {
					first1 = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e8,tabs);
			}
			this.buffer.b += Std.string("]");
			break;
		case 18:
			var def = _g.def;
			var cases = _g.cases;
			var e9 = _g.e;
			this.buffer.b += Std.string("switch( ");
			this.addExpr(e9,tabs);
			this.buffer.b += Std.string(") {");
			var old = tabs;
			var _g5 = 0;
			while(_g5 < cases.length) {
				var c1 = cases[_g5];
				++_g5;
				this.buffer.b += Std.string("\n" + tabs);
				this.buffer.b += Std.string("case ");
				var first2 = true;
				var _g6 = 0;
				var _g11 = c1.values;
				while(_g6 < _g11.length) {
					var v5 = _g11[_g6];
					++_g6;
					if(first2) {
						first2 = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addExpr(v5,tabs);
				}
				tabs += "\t";
				this.buffer.b += Std.string(":\n" + tabs);
				this.addExpr(c1.expr,tabs);
				tabs = old;
			}
			if(def != null) {
				this.buffer.b += Std.string("\n" + tabs);
				tabs += "\t";
				this.buffer.b += Std.string("default:\n" + tabs);
				this.addExpr(def,tabs);
				tabs = old;
			}
			this.buffer.b += Std.string("\n" + tabs + "}");
			break;
		case 19:
			var _g111 = _g.loop;
			var _g10 = _g.e;
			if(_g.normalWhile == false) {
				var e10 = _g10;
				var loop1 = _g111;
				var old1 = tabs;
				tabs += "\t";
				this.buffer.b += Std.string("do {\n" + tabs);
				this.addExpr(loop1,tabs);
				tabs = old1;
				this.buffer.b += Std.string("\n" + tabs + "} while( ");
				this.addExpr(e10,tabs);
				this.buffer.b += Std.string(" )");
			} else {
				var e13 = _g10;
				var loop2 = _g111;
				this.buffer.b += Std.string("while( ");
				this.addExpr(e13,tabs);
				var old2 = tabs;
				tabs += "\t";
				this.buffer.b += Std.string(" ) {\n" + tabs);
				this.addExpr(loop2,tabs);
				tabs = old2;
				this.buffer.b += Std.string("\n" + tabs + "}");
			}
			break;
		case 20:
			var e14 = _g.e;
			var args = _g.args;
			var m = _g.m;
			this.buffer.b += Std.string(m);
			if(args.length > 0) {
				this.buffer.b += Std.string("(");
				var first3 = true;
				var _g7 = 0;
				while(_g7 < args.length) {
					var c2 = args[_g7];
					++_g7;
					if(first3) {
						first3 = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addConst(c2);
				}
				this.buffer.b += Std.string(")");
			}
			this.buffer.b += Std.string(" ");
			this.addExpr(e14,tabs);
			break;
		}
	}
	,__class__: hxsl_Printer
};
var hxsl_AllocParam = function(name,pos,instance,index,type) {
	this.name = name;
	this.pos = pos;
	this.instance = instance;
	this.index = index;
	this.type = type;
};
$hxClasses["hxsl.AllocParam"] = hxsl_AllocParam;
hxsl_AllocParam.__name__ = "hxsl.AllocParam";
hxsl_AllocParam.prototype = {
	__class__: hxsl_AllocParam
};
var hxsl_AllocGlobal = function(pos,path,type) {
	this.pos = pos;
	this.path = path;
	this.gid = hxsl_Globals.allocID(path);
	this.type = type;
};
$hxClasses["hxsl.AllocGlobal"] = hxsl_AllocGlobal;
hxsl_AllocGlobal.__name__ = "hxsl.AllocGlobal";
hxsl_AllocGlobal.prototype = {
	__class__: hxsl_AllocGlobal
};
var hxsl_RuntimeShaderData = function() {
};
$hxClasses["hxsl.RuntimeShaderData"] = hxsl_RuntimeShaderData;
hxsl_RuntimeShaderData.__name__ = "hxsl.RuntimeShaderData";
hxsl_RuntimeShaderData.prototype = {
	__class__: hxsl_RuntimeShaderData
};
var hxsl_ShaderInstanceDesc = function(shader,bits) {
	this.shader = shader;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderInstanceDesc"] = hxsl_ShaderInstanceDesc;
hxsl_ShaderInstanceDesc.__name__ = "hxsl.ShaderInstanceDesc";
hxsl_ShaderInstanceDesc.prototype = {
	__class__: hxsl_ShaderInstanceDesc
};
var hxsl_RuntimeShader = function() {
	this.id = hxsl_RuntimeShader.UID++;
};
$hxClasses["hxsl.RuntimeShader"] = hxsl_RuntimeShader;
hxsl_RuntimeShader.__name__ = "hxsl.RuntimeShader";
hxsl_RuntimeShader.prototype = {
	__class__: hxsl_RuntimeShader
};
var hxsl_Serializer = function() {
};
$hxClasses["hxsl.Serializer"] = hxsl_Serializer;
hxsl_Serializer.__name__ = "hxsl.Serializer";
hxsl_Serializer.prototype = {
	readVarInt: function() {
		var b = this.input.readByte();
		if(b < 128) {
			return b;
		}
		if(b == 255) {
			return this.input.readInt32();
		}
		return (b & 127) << 8 | this.input.readByte();
	}
	,readType: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Type.TVoid;
		case 1:
			return hxsl_Type.TInt;
		case 2:
			return hxsl_Type.TBool;
		case 3:
			return hxsl_Type.TFloat;
		case 4:
			return hxsl_Type.TString;
		case 5:
			var bits = this.input.readByte();
			var v = hxsl_Serializer.TVECS.h[bits];
			if(v == null) {
				v = hxsl_Type.TVec(bits & 7,Type.createEnumIndex(hxsl_VecType,bits >> 3,null));
				hxsl_Serializer.TVECS.h[bits] = v;
			}
			return v;
		case 6:
			return hxsl_Type.TMat3;
		case 7:
			return hxsl_Type.TMat4;
		case 8:
			return hxsl_Type.TMat3x4;
		case 9:
			return hxsl_Type.TBytes(this.input.readInt32());
		case 10:
			return hxsl_Type.TSampler2D;
		case 11:
			return hxsl_Type.TSampler2DArray;
		case 12:
			return hxsl_Type.TSamplerCube;
		case 13:
			var id = this.readVarInt();
			var t = this.types[id];
			if(t != null) {
				return t;
			}
			var f = $bind(this,this.readVar);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			t = hxsl_Type.TStruct(_g);
			this.types[id] = t;
			return t;
		case 14:
			return hxsl_Type.TFun(null);
		case 15:
			var t1 = this.readType();
			var v1 = this.readVar();
			return hxsl_Type.TArray(t1,v1 == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v1));
		case 16:
			var t2 = this.readType();
			var v2 = this.readVar();
			return hxsl_Type.TBuffer(t2,v2 == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v2));
		case 17:
			return hxsl_Type.TChannel(this.input.readByte());
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,readString: function() {
		var len = this.readVarInt();
		var s = this.input.read(len).getString(0,len);
		return s;
	}
	,readConst: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Const.CNull;
		case 1:
			return hxsl_Const.CBool(this.input.readByte() != 0);
		case 2:
			return hxsl_Const.CInt(this.input.readInt32());
		case 3:
			return hxsl_Const.CFloat(this.input.readDouble());
		case 4:
			return hxsl_Const.CString(this.readString());
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,readExpr: function() {
		var _gthis = this;
		var k = this.input.readByte();
		if(k-- == 0) {
			return null;
		}
		var e;
		switch(k) {
		case 0:
			e = hxsl_TExprDef.TConst(this.readConst());
			break;
		case 1:
			e = hxsl_TExprDef.TVar(this.readVar());
			break;
		case 2:
			e = hxsl_TExprDef.TGlobal(hxsl_Serializer.TGLOBALS[this.input.readByte()]);
			break;
		case 3:
			e = hxsl_TExprDef.TParenthesis(this.readExpr());
			break;
		case 4:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TBlock(_g);
			break;
		case 5:
			var op = this.input.readByte();
			e = hxsl_TExprDef.TBinop(op >= 128 ? haxe_macro_Binop.OpAssignOp(hxsl_Serializer.BOPS[op & 127]) : hxsl_Serializer.BOPS[op],this.readExpr(),this.readExpr());
			break;
		case 6:
			e = hxsl_TExprDef.TUnop(hxsl_Serializer.UNOPS[this.input.readByte()],this.readExpr());
			break;
		case 7:
			e = hxsl_TExprDef.TVarDecl(this.readVar(),this.readExpr());
			break;
		case 8:
			var e1 = this.readExpr();
			var f1 = $bind(this,this.readExpr);
			var _g3 = [];
			var _g11 = 0;
			var _g21 = this.readVarInt();
			while(_g11 < _g21) {
				var i1 = _g11++;
				_g3.push(f1());
			}
			e = hxsl_TExprDef.TCall(e1,_g3);
			break;
		case 9:
			var e2 = this.readExpr();
			var bits = this.input.readUInt16();
			var swiz = hxsl_Serializer.TSWIZ.h[bits];
			if(swiz == null) {
				var _g4 = [];
				var _g12 = 0;
				var _g22 = (bits & 3) + 1;
				while(_g12 < _g22) {
					var i2 = _g12++;
					_g4.push(hxsl_Serializer.REGS[bits >> i2 * 2 + 2 & 3]);
				}
				swiz = _g4;
				hxsl_Serializer.TSWIZ.h[bits] = swiz;
			}
			e = hxsl_TExprDef.TSwiz(e2,swiz);
			break;
		case 10:
			e = hxsl_TExprDef.TIf(this.readExpr(),this.readExpr(),this.readExpr());
			break;
		case 11:
			e = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			e = hxsl_TExprDef.TReturn(this.readExpr());
			break;
		case 13:
			e = hxsl_TExprDef.TFor(this.readVar(),this.readExpr(),this.readExpr());
			break;
		case 14:
			e = hxsl_TExprDef.TContinue;
			break;
		case 15:
			e = hxsl_TExprDef.TBreak;
			break;
		case 16:
			e = hxsl_TExprDef.TArray(this.readExpr(),this.readExpr());
			break;
		case 17:
			var f2 = $bind(this,this.readExpr);
			var _g5 = [];
			var _g13 = 0;
			var _g23 = this.readVarInt();
			while(_g13 < _g23) {
				var i3 = _g13++;
				_g5.push(f2());
			}
			e = hxsl_TExprDef.TArrayDecl(_g5);
			break;
		case 18:
			var e3 = this.readExpr();
			var _g6 = [];
			var _g14 = 0;
			var _g24 = this.readVarInt();
			while(_g14 < _g24) {
				var i4 = _g14++;
				var f3 = $bind(_gthis,_gthis.readExpr);
				var _g7 = [];
				var _g15 = 0;
				var _g25 = _gthis.readVarInt();
				while(_g15 < _g25) {
					var i5 = _g15++;
					_g7.push(f3());
				}
				_g6.push({ values : _g7, expr : _gthis.readExpr()});
			}
			e = hxsl_TExprDef.TSwitch(e3,_g6,this.readExpr());
			break;
		case 19:
			e = hxsl_TExprDef.TWhile(this.readExpr(),this.readExpr(),this.input.readByte() != 0);
			break;
		case 20:
			var e4 = this.readString();
			var f4 = $bind(this,this.readConst);
			var _g8 = [];
			var _g16 = 0;
			var _g26 = this.readVarInt();
			while(_g16 < _g26) {
				var i6 = _g16++;
				_g8.push(f4());
			}
			e = hxsl_TExprDef.TMeta(e4,_g8,this.readExpr());
			break;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
		return { e : e, t : this.readType(), p : null};
	}
	,readVar: function() {
		var id = this.readVarInt();
		if(id == 0) {
			return null;
		}
		var v = this.varMap.h[id];
		if(v != null) {
			return v;
		}
		v = { id : hxsl_Tools.allocVarId(), name : this.readString(), type : null, kind : null};
		this.varMap.h[id] = v;
		v.type = this.readType();
		v.kind = hxsl_Serializer.VKINDS[this.input.readByte()];
		v.parent = this.readVar();
		var nq = this.input.readByte();
		if(nq > 0) {
			v.qualifiers = [];
			var _g = 0;
			var _g1 = nq;
			while(_g < _g1) {
				var i = _g++;
				var qid = this.input.readByte();
				var q;
				switch(qid) {
				case 0:
					var n = this.input.readInt32();
					q = hxsl_VarQualifier.Const(n == 0 ? null : n);
					break;
				case 1:
					q = hxsl_VarQualifier.Private;
					break;
				case 2:
					q = hxsl_VarQualifier.Nullable;
					break;
				case 3:
					q = hxsl_VarQualifier.PerObject;
					break;
				case 4:
					q = hxsl_VarQualifier.Name(this.readString());
					break;
				case 5:
					q = hxsl_VarQualifier.Shared;
					break;
				case 6:
					q = hxsl_VarQualifier.Precision(hxsl_Serializer.PRECS[this.input.readByte()]);
					break;
				case 7:
					q = hxsl_VarQualifier.Range(this.input.readDouble(),this.input.readDouble());
					break;
				case 8:
					q = hxsl_VarQualifier.Ignore;
					break;
				case 9:
					q = hxsl_VarQualifier.PerInstance(this.input.readInt32());
					break;
				default:
					throw new js__$Boot_HaxeError("assert");
				}
				v.qualifiers.push(q);
			}
		}
		return v;
	}
	,readFun: function() {
		var tmp = hxsl_Serializer.FKIND[this.input.readByte()];
		var tmp1 = this.readVar();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { kind : tmp, ref : tmp1, args : _g, ret : this.readType(), expr : this.readExpr()};
	}
	,unserialize: function(data) {
		this.input = new haxe_io_BytesInput(haxe_crypto_Base64.decode(data,false));
		if(this.input.readByte() != (hxsl_Serializer.SIGN & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 8 & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 16 & 255)) {
			throw new js__$Boot_HaxeError("Invalid HXSL data");
		}
		this.varMap = new haxe_ds_IntMap();
		this.types = [];
		var tmp = this.readString();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		var tmp1 = _g;
		var f1 = $bind(this,this.readFun);
		var _g3 = [];
		var _g11 = 0;
		var _g21 = this.readVarInt();
		while(_g11 < _g21) {
			var i1 = _g11++;
			_g3.push(f1());
		}
		return { name : tmp, vars : tmp1, funs : _g3};
	}
	,__class__: hxsl_Serializer
};
var hxsl_ShaderList = function(s,n) {
	this.s = s;
	this.next = n;
};
$hxClasses["hxsl.ShaderList"] = hxsl_ShaderList;
hxsl_ShaderList.__name__ = "hxsl.ShaderList";
hxsl_ShaderList.addSort = function(s,shaders) {
	var prev = null;
	var hd = shaders;
	while(hd != null && hd.s.priority < s.priority) {
		prev = hd;
		hd = hd.next;
	}
	if(prev == null) {
		return new hxsl_ShaderList(s,shaders);
	}
	prev.next = new hxsl_ShaderList(s,prev.next);
	return shaders;
};
hxsl_ShaderList.prototype = {
	__class__: hxsl_ShaderList
};
var hxsl_ShaderInstance = function(shader) {
	this.id = hxsl_Tools.allocVarId();
	this.shader = shader;
	this.params = new haxe_ds_IntMap();
};
$hxClasses["hxsl.ShaderInstance"] = hxsl_ShaderInstance;
hxsl_ShaderInstance.__name__ = "hxsl.ShaderInstance";
hxsl_ShaderInstance.prototype = {
	__class__: hxsl_ShaderInstance
};
var hxsl_ShaderGlobal = function(v,gid) {
	this.v = v;
	this.globalId = gid;
};
$hxClasses["hxsl.ShaderGlobal"] = hxsl_ShaderGlobal;
hxsl_ShaderGlobal.__name__ = "hxsl.ShaderGlobal";
hxsl_ShaderGlobal.prototype = {
	__class__: hxsl_ShaderGlobal
};
var hxsl_ShaderConst = function(v,pos,bits) {
	this.v = v;
	this.pos = pos;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderConst"] = hxsl_ShaderConst;
hxsl_ShaderConst.__name__ = "hxsl.ShaderConst";
hxsl_ShaderConst.prototype = {
	__class__: hxsl_ShaderConst
};
var hxsl_SharedShader = function(src) {
	this.instanceCache = new haxe_ds_IntMap();
	this.consts = null;
	this.globals = [];
	if(src == "") {
		return;
	}
	this.data = new hxsl_Serializer().unserialize(src);
	this.initialize();
};
$hxClasses["hxsl.SharedShader"] = hxsl_SharedShader;
hxsl_SharedShader.__name__ = "hxsl.SharedShader";
hxsl_SharedShader.prototype = {
	initialize: function() {
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.browseVar(v);
		}
	}
	,makeInstance: function(constBits) {
		var $eval = new hxsl_Eval();
		var c = this.consts;
		while(c != null) {
			var c1 = c.v;
			var _g = c.v.type;
			var tmp;
			switch(_g._hx_index) {
			case 1:
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			case 2:
				tmp = hxsl_Const.CBool((constBits >>> c.pos & 1) != 0);
				break;
			case 17:
				var _g1 = _g.size;
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
			$eval.setConstant(c1,tmp);
			c = c.next;
		}
		$eval.inlineCalls = true;
		$eval.unrollLoops = hxsl_SharedShader.UNROLL_LOOPS;
		var i = new hxsl_ShaderInstance($eval.eval(this.data));
		this.paramsCount = 0;
		var _g2 = 0;
		var _g11 = this.data.vars;
		while(_g2 < _g11.length) {
			var v = _g11[_g2];
			++_g2;
			this.addParam($eval,i,v);
		}
		this.instanceCache.h[constBits] = i;
		return i;
	}
	,addParam: function($eval,i,v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.addParam($eval,i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.h[$eval.varMap.h[v.__id__].id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	,browseVar: function(v,path) {
		v.id = hxsl_Tools.allocVarId();
		if(path == null) {
			path = hxsl_Tools.getName(v);
		} else {
			path += "." + v.name;
		}
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var vs = vl[_g1];
				++_g1;
				this.browseVar(vs,path);
			}
		} else {
			var globalId = 0;
			if(v.kind == hxsl_VarKind.Global) {
				globalId = hxsl_Globals.allocID(path);
				this.globals.push(new hxsl_ShaderGlobal(v,globalId));
			}
			if(!hxsl_Tools.isConst(v)) {
				return;
			}
			var bits = hxsl_Tools.getConstBits(v);
			if(bits > 0) {
				var pos = this.consts == null ? 0 : this.consts.pos + this.consts.bits;
				var c = new hxsl_ShaderConst(v,pos,bits);
				c.globalId = globalId;
				c.next = this.consts;
				this.consts = c;
			}
		}
	}
	,__class__: hxsl_SharedShader
};
var hxsl__$Splitter_VarProps = function(v) {
	this.v = v;
	this.read = 0;
	this.write = 0;
};
$hxClasses["hxsl._Splitter.VarProps"] = hxsl__$Splitter_VarProps;
hxsl__$Splitter_VarProps.__name__ = "hxsl._Splitter.VarProps";
hxsl__$Splitter_VarProps.prototype = {
	__class__: hxsl__$Splitter_VarProps
};
var hxsl_Splitter = function() {
};
$hxClasses["hxsl.Splitter"] = hxsl_Splitter;
hxsl_Splitter.__name__ = "hxsl.Splitter";
hxsl_Splitter.prototype = {
	split: function(s) {
		var vfun = null;
		var vvars = new haxe_ds_IntMap();
		var ffun = null;
		var fvars = new haxe_ds_IntMap();
		this.varNames = new haxe_ds_StringMap();
		this.varMap = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			switch(f.kind._hx_index) {
			case 0:
				this.vars = vvars;
				vfun = f;
				this.checkExpr(f.expr);
				break;
			case 1:
				this.vars = fvars;
				ffun = f;
				this.checkExpr(f.expr);
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
		}
		vfun = { ret : vfun.ret, ref : vfun.ref, kind : vfun.kind, args : vfun.args, expr : this.mapVars(vfun.expr)};
		var _g2 = 0;
		var _g3 = Lambda.array(vvars);
		while(_g2 < _g3.length) {
			var inf = _g3[_g2];
			++_g2;
			var v = inf.v;
			switch(v.kind._hx_index) {
			case 3:case 4:
				v.kind = fvars.h.hasOwnProperty(v.id) ? hxsl_VarKind.Var : hxsl_VarKind.Local;
				break;
			default:
			}
			switch(v.kind._hx_index) {
			case 3:case 5:
				if(inf.read > 0 || inf.write > 1) {
					var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
					this.vars = vvars;
					var ninf = this.get(nv);
					v.kind = hxsl_VarKind.Local;
					var p = vfun.expr.p;
					var e = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : nv.type, p : p},{ e : hxsl_TExprDef.TVar(v), t : v.type, p : p}), t : nv.type, p : p};
					this.addExpr(vfun,e);
					this.checkExpr(e);
					if(nv.kind == hxsl_VarKind.Var) {
						var old = fvars.h[v.id];
						this.varMap.set(v,nv);
						fvars.remove(v.id);
						var np = new hxsl__$Splitter_VarProps(nv);
						np.read = old.read;
						np.write = old.write;
						fvars.h[nv.id] = np;
					}
				}
				break;
			default:
			}
		}
		var finits = [];
		var todo = [];
		var inf1 = fvars.iterator();
		while(inf1.hasNext()) {
			var inf2 = inf1.next();
			var v1 = inf2.v;
			switch(v1.kind._hx_index) {
			case 1:
				var nv1 = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Var, type : v1.type};
				this.uniqueName(nv1);
				var i = vvars.h[v1.id];
				if(i == null) {
					i = new hxsl__$Splitter_VarProps(v1);
					vvars.h[v1.id] = i;
				}
				i.read++;
				var vp = new hxsl__$Splitter_VarProps(nv1);
				vp.write = 1;
				vvars.h[nv1.id] = vp;
				var fp = new hxsl__$Splitter_VarProps(nv1);
				fp.read = 1;
				todo.push(fp);
				this.addExpr(vfun,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv1), t : v1.type, p : vfun.expr.p},{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : vfun.expr.p}), t : v1.type, p : vfun.expr.p});
				this.varMap.set(v1,nv1);
				inf2.local = true;
				break;
			case 3:
				if(inf2.write > 0) {
					var nv2 = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Local, type : v1.type};
					this.uniqueName(nv2);
					finits.push({ e : hxsl_TExprDef.TVarDecl(nv2,{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : ffun.expr.p}), t : hxsl_Type.TVoid, p : ffun.expr.p});
					this.varMap.set(v1,nv2);
				}
				break;
			default:
			}
		}
		var _g4 = 0;
		while(_g4 < todo.length) {
			var v2 = todo[_g4];
			++_g4;
			fvars.h[v2.v.id] = v2;
		}
		var v3 = vvars.iterator();
		while(v3.hasNext()) {
			var v4 = v3.next();
			this.checkVar(v4,true,vvars,vfun.expr.p);
		}
		var v5 = fvars.iterator();
		while(v5.hasNext()) {
			var v6 = v5.next();
			this.checkVar(v6,false,vvars,ffun.expr.p);
		}
		var v7 = this.varMap.keys();
		while(v7.hasNext()) {
			var v8 = v7.next();
			var v21 = this.varMap.h[this.varMap.h[v8.__id__].__id__];
			if(v21 != null) {
				this.varMap.set(v8,v21);
			}
		}
		ffun = { ret : ffun.ret, ref : ffun.ref, kind : ffun.kind, args : ffun.args, expr : this.mapVars(ffun.expr)};
		var _g5 = ffun.expr.e;
		if(_g5._hx_index == 4) {
			var el = _g5.el;
			var _g51 = 0;
			while(_g51 < finits.length) {
				var e1 = finits[_g51];
				++_g51;
				el.unshift(e1);
			}
		} else {
			finits.push(ffun.expr);
			ffun.expr = { e : hxsl_TExprDef.TBlock(finits), t : hxsl_Type.TVoid, p : ffun.expr.p};
		}
		var _g7 = [];
		var v9 = vvars.iterator();
		while(v9.hasNext()) {
			var v10 = v9.next();
			if(!v10.local) {
				_g7.push(v10.v);
			}
		}
		var vvars1 = _g7;
		var _g8 = [];
		var v11 = fvars.iterator();
		while(v11.hasNext()) {
			var v12 = v11.next();
			if(!v12.local) {
				_g8.push(v12.v);
			}
		}
		var fvars1 = _g8;
		vvars1.sort(function(v13,v22) {
			return v13.id - v22.id;
		});
		fvars1.sort(function(v14,v23) {
			return v14.id - v23.id;
		});
		return { vertex : { name : "vertex", vars : vvars1, funs : [vfun]}, fragment : { name : "fragment", vars : fvars1, funs : [ffun]}};
	}
	,addExpr: function(f,e) {
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			el.push(e);
		} else {
			f.expr = { e : hxsl_TExprDef.TBlock([f.expr,e]), t : hxsl_Type.TVoid, p : f.expr.p};
		}
	}
	,checkVar: function(v,vertex,vvars,p) {
		switch(v.v.kind._hx_index) {
		case 3:
			if(!vertex) {
				var i = vvars.h[v.v.id];
				if(i == null || i.write == 0) {
					throw new js__$Boot_HaxeError(new hxsl_Error("Varying " + v.v.name + " is not written by vertex shader",p));
				}
			}
			break;
		case 4:
			if(v.requireInit) {
				throw new js__$Boot_HaxeError(new hxsl_Error("Variable " + v.v.name + " is used without being initialized",p));
			}
			break;
		default:
		}
	}
	,mapVars: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return e;
			} else {
				return { e : hxsl_TExprDef.TVar(v2), t : e.t, p : e.p};
			}
			break;
		case 7:
			var init = _g.init;
			var v1 = _g.v;
			var v21 = this.varMap.h[v1.__id__];
			if(v21 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TVarDecl(v21,this.mapVars(init)), t : e.t, p : e.p};
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v3 = _g.v;
			var v22 = this.varMap.h[v3.__id__];
			if(v22 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TFor(v22,this.mapVars(it),this.mapVars(loop)), t : e.t, p : e.p};
			}
			break;
		default:
			return hxsl_Tools.map(e,$bind(this,this.mapVars));
		}
	}
	,get: function(v) {
		var i = this.vars.h[v.id];
		if(i == null) {
			var v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				return this.get(v2);
			}
			var oldName = v.name;
			this.uniqueName(v);
			if(v.kind == hxsl_VarKind.Local && oldName != v.name) {
				var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
				this.varMap.set(v,nv);
				v.name = oldName;
				v = nv;
			}
			i = new hxsl__$Splitter_VarProps(v);
			this.vars.h[v.id] = i;
		}
		return i;
	}
	,uniqueName: function(v) {
		if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
			return;
		}
		v.parent = null;
		var key = v.name;
		var _this = this.varNames;
		var n = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(n != null && n != v) {
			var prefix = v.name;
			while(HxOverrides.cca(prefix,prefix.length - 1) >= 48 && HxOverrides.cca(prefix,prefix.length - 1) <= 57) prefix = HxOverrides.substr(prefix,0,-1);
			var k = prefix == v.name ? 2 : Std.parseInt(HxOverrides.substr(v.name,prefix.length,null));
			while(true) {
				var _this1 = this.varNames;
				var key1 = prefix + k;
				if(!(__map_reserved[key1] != null ? _this1.existsReserved(key1) : _this1.h.hasOwnProperty(key1))) {
					break;
				}
				++k;
			}
			v.name = prefix + k;
		}
		var key2 = v.name;
		var _this2 = this.varNames;
		if(__map_reserved[key2] != null) {
			_this2.setReserved(key2,v);
		} else {
			_this2.h[key2] = v;
		}
	}
	,checkExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var inf = this.get(v);
			if(inf.write == 0) {
				inf.requireInit = true;
			}
			inf.read++;
			break;
		case 5:
			var _g9 = _g.e2;
			var _g8 = _g.e1;
			var _g7 = _g.op;
			switch(_g7._hx_index) {
			case 4:
				var _g12 = _g8.t;
				var _g11 = _g8.p;
				var _g10 = _g8.e;
				switch(_g10._hx_index) {
				case 1:
					var e1 = _g9;
					var v1 = _g10.v;
					var inf1 = this.get(v1);
					inf1.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _g15 = _g10.regs;
					var _g14 = _g10.e;
					var _g18 = _g14.t;
					var _g17 = _g14.p;
					var _g16 = _g14.e;
					if(_g16._hx_index == 1) {
						var e2 = _g9;
						var v2 = _g16.v;
						var inf2 = this.get(v2);
						inf2.write++;
						this.checkExpr(e2);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			case 20:
				var _g20 = _g7.op;
				var _g23 = _g8.t;
				var _g22 = _g8.p;
				var _g21 = _g8.e;
				switch(_g21._hx_index) {
				case 1:
					var e3 = _g9;
					var v3 = _g21.v;
					var inf3 = this.get(v3);
					if(inf3.write == 0) {
						inf3.requireInit = true;
					}
					inf3.read++;
					inf3.write++;
					this.checkExpr(e3);
					break;
				case 9:
					var _g26 = _g21.regs;
					var _g25 = _g21.e;
					var _g29 = _g25.t;
					var _g28 = _g25.p;
					var _g27 = _g25.e;
					if(_g27._hx_index == 1) {
						var e4 = _g9;
						var v4 = _g27.v;
						var inf4 = this.get(v4);
						if(inf4.write == 0) {
							inf4.requireInit = true;
						}
						inf4.read++;
						inf4.write++;
						this.checkExpr(e4);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			default:
				hxsl_Tools.iter(e,$bind(this,this.checkExpr));
			}
			break;
		case 7:
			var init = _g.init;
			var v5 = _g.v;
			var inf5 = this.get(v5);
			inf5.local = true;
			if(init != null) {
				this.checkExpr(init);
				inf5.write++;
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v6 = _g.v;
			this.checkExpr(it);
			var inf6 = this.get(v6);
			inf6.local = true;
			inf6.write++;
			this.checkExpr(loop);
			break;
		default:
			hxsl_Tools.iter(e,$bind(this,this.checkExpr));
		}
	}
	,__class__: hxsl_Splitter
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name1 = "experimental-webgl";
	var ctx1 = canvas.getContext(name1,attribs);
	if(ctx1 != null) {
		return ctx1;
	}
	return null;
};
Math.__name__ = "Math";
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var __map_reserved = {};
haxe_Resource.content = [{ name : "R_sounds_fireball_mp3", data : "SUQzAwAAAAAAEFRDT04AAAAGAAAAQmx1ZXP/+mDAVVoAAAicGVxUkYACcyFuNztAAgBa8MEmLkYrRo0aBAgBAEAQB8HwfB8HAQBAEAQB8HwfB8CAh3/KDAwD79H+BAQBAECAPh/R7/8HwfB8HwICAIBiBwfP0cDgcDgcDgcjkcjERBgHswrmlRAKcy9ZkqKFwMXwhq2p7ph6BRgOCVrKmyA270DIu06kgMORAzR4BwpS0XU4XNAZIAAEsBRIi+7pQMqDBQuG/AEgQHh3SSWyu4XDgYgMDbhABSgXUVsikr8MKADCwsXEblMU8XHqVZv4fIIUJAvoEUEpiyyD7KV//QZy4XGNxwPmAlFCDviSYMvWJGIAABaqpJptoJtsSAj/+mLATxQGAA7Je3NY8wAR3yKvtwyQA1qkti0NWjVNBrr2vFx+k/S3RgSgB6R3MSpI0yTj8//Raao2JZ38NdPk4TJFoETP/90lRxrGttXk5X///du2u+MdszlNU7////FXrxObWvLZT7LZX/////N6JU1ZzzM1Rx9GmGnWcWgayzrAEaklt1u1232+3//+wDf9XCTjarkjkt9F1ZNRxlGXRRyoxGThMTIkKGPuPPOhFnIoUpXGPsMkwaRI17SWl6j/GuiVISEotq1xy4xut9S8FCyaFC985bFpqU9RVKXqX8pNImWYwhGS0TQUl2FNS6L4NX9dD//6P9QABMSCWSi0Wi0Wi0Wg//pgwLJJBoAO7TF5uLWAEcYp7isYMANFssYNbfzQEVXx2WGIefDwaECAr32OxgIpJBB/3h4Y8dJqHkm/+Oxjx2UajpLTUdv/7zTeaZ01JqxqTf/95pycmVkSacRNWf//smWTLJlE1YqasVRj///6nqep6lFsIhIFRCd//1BogMQxQCENOvUSiUbjcbsY3fKEgZbVdbn1nW7lmCBDuggIDKyCDiAYc2fZAN9QtABBEXXFjlRJ4kWLsn7p6JYbhEJiIntGYIgvKSCzPM5MzYiJxZ13TNEmke9vbJ+2SIURHyczEDERELLpwwRWSsmGOr6PckdRABWxe41WkIljNaQDQNFpI13C//pgwLxxCQONsMNUXZQACaeXKoqwgAFqFWJc+0DVjQdE1sSQcLMSSHsKSb8OaK1JorcW00tktezXTQjRwzbKrftdyatSsw/k1OSC5dNQm8fx51B1B3qjchX3/oLiK7Kz0F4mv5rwpIFL/LYK83L4PzfN1WkgjSVPZOCPOm8TJKaajrv2K1WH5Ro4UCc+0EMe7jDbeDT3WxROxTlC4RJhEhX4W4S6d7R73it47dbSJtOTJoA5ABXBXBbqT8/ztnPyf5v0fgIzEdl5GMnP0fouuRfS6pHOg015Z5FYiuqCCDDTUPIJNKXNdOhlDGowEoDBT2uVAsCz0RkEHCbiINKiSIu02iRH//pgwJXbFAAR2VlQWYSAAeUfqIs2kAAQFDRvTSK6WmcyJGhNxJYsyVVczJ1HWDBVgplxZrG4TnlxwtSayStbcpVsd37Zd+HV0MV0NVL+V5W379bLoHwQSSUpTxjHPcd91Lfl5Xry8Jq49O2p7LvECg7CqjCCSCDGNOue7/+gEMIMEA8gPL+h5wtY34RSub5pvay9HUh1r1N197g5KSITHg0YSlUidNINIESKVSlFltAgWRFEXlLyWVe9B1K6UpepfkZCTEiAjjVRrsy/l/VNObtLPkfjN5n////ZbQJKttoJoGjHiv4bBBpoLijxURJYlP+ZFEjkGgACKjWrFYrHW7JZLYIB//piwFriBwAOnSdxuJQAEe4magMysADKE7YGm897mE70SlRCMG55hKC4QA0DwUEW70KowQxQ8R2i6Ds8XShp4wultZrMIo96hJTuKhr93MMgepe+OqmJWrvp3tPYZCVdTNq0WlMtJu/+lOPQeQRjpMFxpVg4t/LpBsoaACQG2ZswZO3p0ABFc9eYI2ZBGr2hqy2LMRZMueNyoAQcuTqCQfF40CBqKo3Xs6O4PBsUxDmysjacHCFKiQVTf3wzu3GrCMUKGEdV/TJl+w64yQckd///qrmOObWQtJq7UP///vr+ePe5p9oJhUL/9XxUGx4qBx4hf////y6yFQAAAgggWEy4VE6xQP/6YMDTmgYADs2VX1jzgAnRJCufMGAB5Ip0/A1RMpGKr9DGp9SuGd25Q9ADggOOOvEciGkoc1kFgmHx90SlLMLhoJzSaaURjKRgcHVJltk9mOa5UaniQg1e32/fj5Bxq44hpfa3bWnfyY45EuOFJNyioza7UX//6sXMHlPLoax5CCABMgEAkWVEomgOa+rZWCHKmqbkcSd6Uz1WGMaWyawDHvN/C0Lk6qp3RMUo6X+a06m9z/k/e+vf+RF3Xz96143cpnTgzJZqf92/j1nvf78ZnmaqvTNkNuSzvl53vVAHxTSliosJo0xrvyh4B8kfBDbwoFF/khBL0TQGhCK5mB5FeD5Mkv/6YMCIcgeADzVdXPjzAAHMoKx3HrAA0bYMQ+pIvZZ1UzerCtIt1WBm42/VwIwrKiv+mL2DNNl6/n+1njD8rHlv//+nDIE3TOeH3Z///5ApR861T/Xx2Zv///+gjAWkTCFEE9mcrd/855/89u3C0JCGMTTJ4EEGCyYwGhKdBpbXf0ABAIBgQCgUik1CtVqSF1JuDU5pq2yefPYUVwY3upLCSb3WOwvHYdh07aVBHPu7cyey9kj4jLY5jn3PJByzdsfu5qPPm90aNXiaipb//0ocdvTey/c7rd/HPPFWsIAYFwu2Emd9eaqtPhXOpTAQiExIkw8yAAAkp2Kabcklt00LgeAQW//6YMCUSQgAD1E/X1jzAAnTKqxrHmAAgzKZePo6ApDj21GdGrT5aUJoDNiy/BjptHsf0Vzf1oe34pFArx8fNa6jWGOvC92/jN1fPDrTmE2Q+Pf2NjIu7+W0HIoUeq07h7m/cY2a2Q74+/TTk1ENhWJGrF2rMqt+0jAOJC7Kp+9WQbAAAA5JKTkkbjtttjCbqNnH69e7c4mMK6ZldfPEWvtUhK4Kruvl+ubk9q+q5TvON3ntPYfjkl3SGNr9+S8hFsRI37bnO3Z++MfHreVnx+W2M3Z+//TlSsLz2vbush91/+379q7ydXKQzy5djwoIXD1Hm3Ci+qoAAAAsBRyRySy3Xbbbcf/6YsDmSgcADXEZabjBgAmCBynPsDAB1uVBKCpdXHse2lJrXnV793CjJWYWhYZAwZlVTQj3cGin3PKukE6AgZtSvx8nMxSatqUZqSp6Fue7sJKVF/41qvaiZFu5juZSgr/wrG+/wEf0f4Ycd2tTzsioL/IUUAEpuRkgQ5ga84jA79S+W0NLbtS+vZqZChyCmCYhCgAQKC4CBEX1zt23k15oe22NN6sw2U1LXphudJLWnrJzpYS6diRBFoQUcsxoWpDunqLr1+an8Yrc7TDGufUgtfZk2wBWs14h0BYNpUwtYQg6B6R8EUJIjiYPKHSUhYdepUraGm0HZHQJDBVg2ZysrDn9IyD/+mDAOzYYgwz4o0ZMpGXJppCoSrCQAVOkqbGZLkwJkN3hxxh0kuWTJvHngt9SYqZs7+W6JNubgUct+7d3Ne7sRWH9BelDr7VXJFH8ijQEVs7FDSyFBMmbLYak8l98XYl83Vq7sBNC9r0scK3GFdxI+NOzqIZbdeSTcd3zmha2NJQpfLIEYxiSM1iYOeHshLGWYFgJYU0rRja6q/tct3WrCRFibRjCe0823WK1OcBJOetJpvnSu9Z1ACASLSjUbkdjkdksjAVFkY0hqqBrae30zPVwaGLvKAGMA2q/ZbIGR8Cajq0p1sQFXESxyGUzGVxuIGxAExKTAzftXZeOV/hCmW1Jvd3/+mDAhaAmgA8dFWG4xIAZpSdraxJgA6vK31/tkA+hRDrIpVD2Rjn9b6zLv5lIyhtQfVROZJVfl7LrTtWXuxx736q4Ag199e23JJJJLAARSFoAIPQjW0rly1wfOuVknJSenBgr7L1qFk1hJpidzlUYh09JSVm+cetWMr7QLJQVQk6dNtq+3zI6sCrLR3XV23zye2gVG3p1xJ1uj23v33G/Kb0zvdwYctjcLrnSqgABklAB1KeaD6xC3rgvw1i85cO08ZzxgOlloNxQR3aHNPCKA5JhiBg57EDRtmF2zHIQj741RkebNc7G/yv0k907rlog8FjwiBkCBgDsQWvFSxKEzIJAM+X/+mDAHs8sAAwkuUBZhAABexpl5zCwACHklYz9/TtYhIACAAEEHCAAABCkaUgBazWvvariMa/5S8F+U/4dqDbxBtII2RNfy0jD+Ow6keS/y4pGuA+S1v/+0xEGcGw1uNKW//uXYfk9TdzpbX/+zZeupT/97HnEkTwl/yl72U/VEYjfQ6wBUm5lnS7LuJfOq+zXoetY8rUxAICFKVkMyGf8pfKWUrIapZStNUv///+n9WlLQ0pXKVpqlf9HQxnUsxphRpaGoYxspZS0NKVylabKbrmNMZ1KxgzIY31KWhpRKgJMQU1FMy45OC4yqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+mDAapBDA8w9orgdgQAAAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo"},{ name : "R_sounds_euryfind_mp3", data : ""},{ name : "R_graphics_adam_jawbreaker_png", data : "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAoCAYAAABOzvzpAAACyUlEQVR42t2aPU4DMRCF9yo03CFIgERNR5eWkiNQpMk9OAEFPXcDOdJIbx/z579sSKRRNnF21/N55o3tzfL2vvvx7Ob28WT7/evPw/3zycoxfo92PBxWxm3fXx8r499zG/YF27S+4nUiv8SWFgDFzgGAHd4UADqNtjUADwiD6QIgELwIaHEwao/6ZwHB7xAAt3cD4M73OpwB4o1oBK8LgGZbA6jViWYAOPKzIoDbMimRcbhLBNFpFsLyeRQA6/ysBmT0wgWAZU5TUFR4mQsgADy/JeRFSK0RZ/h3L7smh00AKHAaYVR6Hnn5rhUAVhINAJfaXgjHzycbAEYEdggd9ABowDwA7By3S7QxAIm4DAR02ATAxiMuny0A7OAoANpkC1OwAIggMIA/KeCJCN5QjrHz6MSMMsgARAskEgRANh0EhryrADAdvBy3AGCUjACgVSE5RgAeBHZ8BYDLngWAQ9HK2ZEAilMYBVwJshFg6YAJoNyMgXBOewBGrQ1KHwSCVgZrIJga4J2oTYAwJCOHoqm0ZQjRur9EyDAAfIHyOZoJclREKp81vqfVzgBqISzsML9HI8XlztOErHGueztStSKYWgvghbSwtzZELgEAQ2DVNydCFj1tL6BmNcg13Kom1nS3NwK0kV8B8PI/sykaAYjOz1pvCljRsFiOXxMAzXFTA/giWwLgvcdeAK4IRhqQeS7gzQNqAWj36U2BKgDZFGgFoK3wRkRAbSk0l8MzAXjmldsREcDlcBn5aGxrADWLIHMxdC4RzKaB9QSqVQQvBkBNBfAsm/vp/YDaFDjXPCADIIJQ2vn9ogFYS3Fsz1YBTAP8TTeA3pmcN7La8wAPgFrno1crgBarXQzhcrxVBKcAmG0jV4NNADBf/hOArhSwNgysEJxhEQAtBcK5fguAmv8HjLJWkR0GoPUPElcPILMxOhNAVAZ7AfwCuItRdfU/RQUAAAAASUVORK5CYII"},{ name : "R_graphics_wombats_png", data : ""}];
haxe_ds_ObjectMap.count = 0;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
haxe_MainLoop.add(hxd_System.updateCursor,-1);
var hx__registerFont;
hx__registerFont = function(name,data) {
	var s = window.document.createElement("style");
	s.type = "text/css";
	s.innerHTML = "@font-face{ font-family: " + name + "; src: url('data:font/ttf;base64," + data + "') format('truetype'); }";
	window.document.getElementsByTagName("head")[0].appendChild(s);
	var div = window.document.createElement("div");
	div.style.fontFamily = name;
	div.style.opacity = 0;
	div.style.width = "1px";
	div.style.height = "1px";
	div.style.position = "fixed";
	div.style.bottom = "0px";
	div.style.right = "0px";
	div.innerHTML = ".";
	div.className = "hx__loadFont";
	window.document.body.appendChild(div);
};
js_Boot.__toStr = ({ }).toString;
Main.firstcall = true;
TestLevel.firstcall = true;
TestLevel.temp = 0;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
format_mp3_MPEG.Reserved = 1;
format_mp3_MPEG.V1_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.V2_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.SamplingRates = [[format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_Bad]];
format_mp3_CLayer.LReserved = 0;
h3d_Buffer.GUID = 0;
h3d_Engine.SOFTWARE_DRIVER = false;
h3d_Engine.ANTIALIASING = 0;
h3d_impl_InputNames.UID = 0;
h3d_impl_InputNames.CACHE = new haxe_ds_StringMap();
h3d_impl_GlDriver.ALLOW_WEBGL2 = true;
h3d_impl_GlDriver.outOfMemoryCheck = false;
h3d_impl_GlDriver.TFILTERS = [[[9728,9728],[9729,9729]],[[9728,9984],[9729,9985]],[[9728,9986],[9729,9987]]];
h3d_impl_GlDriver.TWRAP = [33071,10497];
h3d_impl_GlDriver.FACES = [0,1028,1029,1032];
h3d_impl_GlDriver.BLEND = [1,0,770,768,772,774,771,769,773,775,32769,32771,32770,32772,776];
h3d_impl_GlDriver.COMPARE = [519,512,514,517,516,518,513,515];
h3d_impl_GlDriver.STENCIL_OP = [7680,0,7681,7682,34055,7683,34056,5386];
h3d_impl_GlDriver.OP = [32774,32778,32779,32775,32776];
h3d_impl_GlDriver.CUBE_FACES = [34069,34070,34071,34072,34073,34074];
h3d_impl_GlDriver.CBUFFERS = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 32) {
			var i = _g1++;
			var _g11 = [];
			var _g2 = 0;
			var _g3 = i;
			while(_g2 < _g3) {
				var k = _g2++;
				_g11.push(36064 + k);
			}
			_g.push(_g11);
		}
	}
	$r = _g;
	return $r;
}(this));
h3d_impl_MemoryManager.ALL_FLAGS = h3d_BufferFlag.__empty_constructs__.slice();
h3d_mat_Defaults.defaultKillAlphaThreshold = 0.5;
h3d_mat_Defaults.loadingTextureColor = -65281;
h3d_mat_MaterialSetup.current = new h3d_mat_MaterialSetup("Default");
h3d_mat_Texture.UID = 0;
h3d_mat_Texture.PREVENT_AUTO_DISPOSE = 2147483647;
h3d_mat_Texture.nativeFormat = hxd_PixelFormat.RGBA;
h3d_pass_Blur.__meta__ = { obj : { ignore : ["shader"]}};
h3d_shader_ScreenShader.SRC = "HXSLF2gzZC5zaGFkZXIuU2NyZWVuU2hhZGVyBwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACghfX2luaXRfXw4GAAALBnZlcnRleA4GAAACAgoAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAALAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAA";
h3d_pass__$Border_BorderShader.SRC = "HXSLHWgzZC5wYXNzLl9Cb3JkZXIuQm9yZGVyU2hhZGVyCQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgVjb2xvcgUMAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMAgoFDAUMAA";
h3d_pass__$Copy_ArrayCopyShader.SRC = "HXSLHmgzZC5wYXNzLl9Db3B5LkFycmF5Q29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQsCAAALBWxheWVyAQIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFAQYEAggFDAkDIQ4CAgoLCQMpDgICCQUKCQMmDgECCwEDBQsFDAUMAA";
h3d_pass__$Copy_CopyShader.SRC = "HXSLGWgzZC5wYXNzLl9Db3B5LkNvcHlTaGFkZXIJAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMCQMhDgICCgoCCQUKBQwFDAA";
h3d_pass__$CubeCopy_CubeCopyShader.SRC = "HXSLIWgzZC5wYXNzLl9DdWJlQ29weS5DdWJlQ29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQwCAAALA21hdAYCAAAMCF9faW5pdF9fDgYAAA0GdmVydGV4DgYAAA4IZnJhZ21lbnQOBgAAAwIMAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADQAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDgAABQIIDwJ1dgUKBAAABgMGAQIJBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgAGBAIIBQwJAyEOAgIKDAkDHw4BBgEJAykOAgIPBQoBAwAAAAAAAPA/AwULAgsGBQsFCwUMBQwA";
h3d_pass_Default.__meta__ = { fields : { cameraView : { global : ["camera.view"]}, cameraNear : { global : ["camera.zNear"]}, cameraFar : { global : ["camera.zFar"]}, cameraProj : { global : ["camera.proj"]}, cameraPos : { global : ["camera.position"]}, cameraProjDiag : { global : ["camera.projDiag"]}, cameraProjFlip : { global : ["camera.projFlip"]}, cameraViewProj : { global : ["camera.viewProj"]}, cameraInverseViewProj : { global : ["camera.inverseViewProj"]}, globalTime : { global : ["global.time"]}, pixelSize : { global : ["global.pixelSize"]}, globalModelView : { global : ["global.modelView"]}, globalModelViewInverse : { global : ["global.modelViewInverse"]}}};
h3d_pass__$HardwarePick_FixedColor.SRC = "HXSLIWgzZC5wYXNzLl9IYXJkd2FyZVBpY2suRml4ZWRDb2xvcgUBB2NvbG9ySUQFDAIAAAIIdmlld3BvcnQFDAIAAAMGb3V0cHV0DQECBAhwb3NpdGlvbgUMBAMABQdjb2xvcklEBQwEAwAEAAAGBnZlcnRleA4GAAAHCGZyYWdtZW50DgYAAAIABgAABQEGBAIEBQwGAQQGAAIEBQwGAQkDKg4DCgICBQwRAAUKAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMCgIEBQwMAAMFDAUMBQwJAyoOAwoCAgUMOQAFCgEDAAAAAAAA8D8DAQMAAAAAAADwPwMFDAUMBQwAAQcAAAUBBgQCBQUMAgEFDAUMAA";
h3d_pass_ShaderManager.STRICT = true;
h3d_shader_AmbientLight.SRC = "HXSLF2gzZC5zaGFkZXIuQW1iaWVudExpZ2h0CgEGZ2xvYmFsDQECAgxhbWJpZW50TGlnaHQFCwABAAMQcGVyUGl4ZWxMaWdodGluZwIAAQEAAAAAAAAAAAQKcGl4ZWxDb2xvcgUMBAAABQ9saWdodFBpeGVsQ29sb3IFCwQAAAYKbGlnaHRDb2xvcgULBAAABwhhZGRpdGl2ZQICAAEAAAAAAAgIX19pbml0X18OBgAACRBfX2luaXRfX2ZyYWdtZW50DgYAAAoJY2FsY0xpZ2h0DgYAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAABQIIAAAFAQYEAgYFCwsCBwICAgULCQMpDgEBAwAAAAAAAAAAAwULBQsFCwACCQAABQEGBAIFBQsLAgcCAgIFCwkDKQ4BAQMAAAAAAAAAAAMFCwULBQsAAwoBDQpsaWdodENvbG9yBQsEAAAFCwUBDQsCBwICDQULBAYAAgIFCwYBCQMWDgIEBgMBAwAAAAAAAPA/AwICBQsFCwULAQMAAAAAAAAAAAMFCwINBQsFCwULBQsFCwAAAAsAAAUBCwcCAgMCAgaBCgIEBQySAAULCQIKDgECBgULBQsFCwAAAAEMAAAFAQsCAwIGgQoCBAUMkgAFCwkCCg4BAgUFCwULBQsAAAA";
h3d_shader_Base2d.SRC = "HXSLEWgzZC5zaGFkZXIuQmFzZTJkGgEFaW5wdXQNAQMCCHBvc2l0aW9uBQoBAQADAnV2BQoBAQAEBWNvbG9yBQwBAQABAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgEdGltZQMAAAAJBnpWYWx1ZQMCAAAKB3RleHR1cmUKAgAACw5zcHJpdGVQb3NpdGlvbgUMBAAADBBhYnNvbHV0ZVBvc2l0aW9uBQwEAAANCnBpeGVsQ29sb3IFDAQAAA4MdGV4dHVyZUNvbG9yBQwEAAAPDGNhbGN1bGF0ZWRVVgUKAwAAEAppc1JlbGF0aXZlAgIAAQAAAAAAEQVjb2xvcgUMAgAAEg9hYnNvbHV0ZU1hdHJpeEEFCwIAABMPYWJzb2x1dGVNYXRyaXhCBQsCAAAUDWZpbHRlck1hdHJpeEEFCwIAABUNZmlsdGVyTWF0cml4QgULAgAAFghoYXNVVlBvcwICAAEAAAAAABcFdXZQb3MFDAIAABgJa2lsbEFscGhhAgIAAQAAAAAAGQpwaXhlbEFsaWduAgIAAQAAAAAAGhBoYWxmUGl4ZWxJbnZlcnNlBQoCAAAbCHZpZXdwb3J0BQwCAAAcDm91dHB1dFBvc2l0aW9uBQwEAAAdCF9faW5pdF9fDgYAAB4GdmVydGV4DgYAAB8IZnJhZ21lbnQOBgAAAwIdAAAFBgYEAgsFDAkDKg4DAgIFCgIJAwEDAAAAAAAA8D8DBQwFDAsCEAIFAwYECgIMBQwAAAMJAx0OAgkDKQ4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwISBQsDAwYECgIMBQwEAAMJAx0OAgkDKQ4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwITBQsDAwYECgIMBQw5AAUKCgILBQw5AAUKBQoABgQCDAUMAgsFDAUMAAYEAg8FCgsCFgIGAAYBAgMFCgoCFwUMOQAFCgUKCgIXBQwRAAUKBQoCAwUKBQoFCgYEAg0FDAsCEAIGAQIRBQwCBAUMBQwCBAUMBQwFDAYEAg4FDAkDIQ4CAgoKAg8FCgUMBQwGgQINBQwCDgUMBQwAAB4AAAUFCCADdG1wBQsEAAAJAykOAgoCDAUMEQAFCgEDAAAAAAAA8D8DBQsABgQCHAUMCQMqDgMJAx0OAgIgBQsCFAULAwkDHQ4CAiAFCwIVBQsDCgIMBQw5AAUKBQwFDAYECgIcBQwRAAUKBgEEBgAKAhwFDBEABQoKAhsFDBEABQoFCgUKCgIbBQw5AAUKBQoFCgsCGQIGgwoCHAUMEQAFCgIaBQoFCgAABgQCBgUMAhwFDAUMAAEfAAAFAgsGDgIYAgYJCgINBQwMAAMBA/yp8dJNYlA/AwICDAAAAAYEAgcFDAINBQwFDAA";
h3d_shader_BaseMesh.SRC = "HXSLE2gzZC5zaGFkZXIuQmFzZU1lc2gXAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQVjb2xvcgUMAgAAJg1zcGVjdWxhclBvd2VyAwIAAQcAAAAAAAAAAAAAAAAAAFlAJw5zcGVjdWxhckFtb3VudAMCAAEHAAAAAAAAAAAAAAAAAAAkQCgNc3BlY3VsYXJDb2xvcgULAgAAKQhfX2luaXRfXw4GAAAqEF9faW5pdF9fZnJhZ21lbnQOBgAAKwZ2ZXJ0ZXgOBgAALAhmcmFnbWVudA4GAAAEAikAAAULBgQCGgULAhIFCwULBgQCGwULBgECGgULCQM0DgECDwcIBQsFCwYEAh4FDAYBCQMqDgICGwULAQMAAAAAAADwPwMFDAIHBwUMBQwGBAIdBQsJAx8OAQQGAQITBQsJAzIOAQIPBwYFCwULBQsFCwYEAgsFCwkDHw4BBAYDAgQFCwIbBQsFCwULBQsFCwYEAh8FDAIlBQwFDAYEAiIDAiYDAwYEAiMFCwYBAigFCwInAwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCJAMGAgkDGw4BBgMCGwULAgQFCwULAwIKAwMDAAIqAAAFBQYEAh0FCwkDHw4BAh0FCwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCIgMCJgMDBgQCIwULBgECKAULAicDBQsFCwAAKwAABQIGBAIVBQwGAQIeBQwJAyoOBAEDAAAAAAAA8D8DAgUDAQMAAAAAAADwPwMBAwAAAAAAAPA/AwUMBQwFDAYEAhwFCwIbBQsFCwABLAAABQQGBAIWBQwCHwUMBQwGBAIXAwIgAwMGBAIYBQsCHQULBQsGBAIZAwIkAwMA";
h3d_shader_Blur.SRC = "HXSLD2gzZC5zaGFkZXIuQmx1choBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoVY2FtZXJhSW52ZXJzZVZpZXdQcm9qBwIAAAsHdGV4dHVyZQoCAAAMDGRlcHRoVGV4dHVyZQoCAAANB1F1YWxpdHkBAgABAAAAAAAOB2lzRGVwdGgCAgABAAAAAAAPBnZhbHVlcw8DDQIAABAHb2Zmc2V0cw8DDQIAABEFcGl4ZWwFCgIAABINaGFzRml4ZWRDb2xvcgICAAEAAAAAABMQc21vb3RoRml4ZWRDb2xvcgICAAEAAAAAABQKZml4ZWRDb2xvcgUMAgAAFRBpc0RlcHRoRGVwZW5kYW50AgIAAQAAAAAAFgloYXNOb3JtYWwCAgABAAAAAAAXDW5vcm1hbFRleHR1cmUKAgAAGAZpc0N1YmUCAgABAAAAAAAZC2N1YmVUZXh0dXJlDAIAABoHY3ViZURpcgYCAAAbCF9faW5pdF9fDgYAABwGdmVydGV4DgYAAB0IZnJhZ21lbnQOBgAAHgtnZXRQb3NpdGlvbg4GAAAEAhsAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAcAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEdAAAFAgsCFQIFBggfBHBjdXIFCwQAAAkCHg4BAgMFCgULAAggBGNjdXIFDAQAAAkDIQ4CAgsKAgMFCgUMAAghBWNvbG9yBQwEAAAJAyoOBAEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQwACCIEbmN1cgULBAAACQM5DgEJAyEOAgIXCgIDBQoFDAULABUGdW5yb2xsAA4jAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUICCQCdXYFCgQAAAYAAgMFCgYBAhEFChECEA8DDQsGCQIjAQECAAAAAAECBwMCIwEBAiMBAQMFCgUKAAglAWMFDAQAAAkDIQ4CAgsKAiQFCgUMAAgmAXAFCwQAAAkCHg4BAiQFCgULAAgnAWQDBAAACQMdDgIEBgMCJgULAh8FCwULBQsGAwImBQsCHwULBQsDAAgoAW4FCwQAAAkDOQ4BCQMhDgICFwoCJAUKBQwFCwAGBAIlBQwJAxgOAwIgBQwCJQUMCQMdDgICIgULAigFCwMFDAUMBgQCJQUMCQMYDgMCJQUMAiAFDAkDFQ4CBAYBCQMWDgIEBgMCJwMBA/yp8dJNYlA/AwMDAQMAAAAAAAAAAAMDAQMAAAAAAGr4QAMDAwEDAAAAAAAA8D8DAwUMBQwGgAIhBQwGAQIlBQwRAg8PAw0LBgkCIwEBAgAAAAABAgcDAiMBAQIjAQEDBQwFDAAAAAYEAggFDAIhBQwFDAALAg4CBQMIKQN2YWwDBAAAAQMAAAAAAAAAAAMAFQZ1bnJvbGwADioBaQEEAAAGFQYABwMCDQEBAQIBAAAAAQECDQEPAQAABQELAhgCBoACKQMGAQkDNw4BCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwDEQIPDwMNCwYJAioBAQIAAAAAAQIHAwIqAQECKgEBAwMDBoACKQMGAQkDNw4BCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFDAMRAg8PAw0LBgkCKgEBAgAAAAABAgcDAioBAQIqAQEDAwMAAAAABgQCCAUMCQM2DgEJAxUOAgIpAwEDyxpQyv//7z8DAwUMBQwABQMIKwVjb2xvcgUMBAAACQMqDgQBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMABUGdW5yb2xsAA4sAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUBCwIYAgaAAisFDAYBCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwRAg8PAw0LBgkCLAEBAgAAAAABAgcDAiwBAQIsAQEDBQwFDAaAAisFDAYBCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFDBECDw8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFDAUMAAAAAAYEAggFDAIrBQwFDAAAAAsCEgIFAgsCEwIGgQoCCAUMDAADCgIUBQwMAAMDBgQKAggFDAwAAwYBCgIUBQwMAAMJAyYOAQYHCgIIBQwMAAMBAwAAAAAAAAAAAwIDAwMABgQKAggFDJIABQsGAQoCFAUMkgAFCwoCCAUMDAADBQsFCwAAAAADHgEtAnV2BQoEAAAFCwUECC4FZGVwdGgDBAAACQM3DgEJAyEOAgIMCgItBQoFDAMACC8EdGVtcAUMBAAABgEJAyoOAwkDOw4BAi0FCgUKAi4DAQMAAAAAAADwPwMFDAIKBwUMAAgwCG9yaWdpbldTBQsEAAAGAgoCLwUMkgAFCwoCLwUMDAADBQsADQIwBQsAAA";
h3d_shader_ColorAdd.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JBZGQDAQpwaXhlbENvbG9yBQwEAAACBWNvbG9yBQsCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGgAoCAQUMkgAFCwICBQsFCwA";
h3d_shader_ColorKey.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JLZXkDAQhjb2xvcktleQUMAgAAAgx0ZXh0dXJlQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAggEBWNkaWZmBQwEAAAGAwICBQwCAQUMBQwACwYJCQMdDgICBAUMAgQFDAMBA/Fo44i1+OQ+AwIMAAAAAA";
h3d_shader_ColorMatrix.SRC = "HXSLFmgzZC5zaGFkZXIuQ29sb3JNYXRyaXgDAQpwaXhlbENvbG9yBQwEAAACBm1hdHJpeAcCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGBAIBBQwJAyoOAgoEBgEJAyoOAgoCAQUMkgAFCwEDAAAAAAAA8D8DBQwCAgcFDAUMkgAFCwoEBgECAQUMAgIHBQwFDAwAAwUMBQwA";
h3d_shader_DirShadow.SRC = "HXSLFGgzZC5zaGFkZXIuRGlyU2hhZG93EgEGZW5hYmxlAgIAAQAAAAAAAgdVU0VfRVNNAgIAAQAAAAAAAwtzaGFkb3dQb3dlcgMCAAAEB1VTRV9QQ0YCAgABAAAAAAAFCnBjZlF1YWxpdHkBAgABAAAAAAAGCHBjZlNjYWxlAwIAAAcJc2hhZG93UmVzBQoCAAAICXNoYWRvd01hcBEBAgAACQpzaGFkb3dQcm9qCAIAAAoKc2hhZG93QmlhcwMCAAALE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAwGc2hhZG93AwQAAA0JZGlyU2hhZG93AwQAAA4OcG9pc3NvbkRpc2tMb3cPBQwABAIAAA8PcG9pc3NvbkRpc2tIaWdoDwUMAAwCAAAQE3BvaXNzb25EaXNrVmVyeUhpZ2gPBQwAQAIAABEEcmFuZA4GAAASCGZyYWdtZW50DgYAAAIDEQETAXYDBAAAAwUCCBQCZHADBAAACQMdDgIJAyoOAQITAwUMCQMqDgQBA18pyxDH+ilAAwED9P3UeOmOU0ADAQOiRbbz/ZRGQAMBA1CNl24Sq1dAAwUMAwANCQMTDgEGAQkDAg4BAhQDAwEDUPwYc9Fd5UADAwMAAAESAAAFAgsCAQIFAQsCBAIFBwYEAgwDAQMAAAAAAADwPwMDCBUJdGV4ZWxTaXplBQoEAAAGAgEDAAAAAAAA8D8DAgcFCgUKAAgWCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACBcIc2hhZG93VXYFCgQAAAkDOg4BCgIWBQsRAAUKBQoACBgEek1heAMEAAAJAzUOAQoCFgULCAADAwAIGQNyb3QDBAAABgEGAQkCEQ4BBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwEDH4XrUbgeCUADAwEDAAAAAAAAAEADAwATBAIFAQEDAQECAQAAAAEFAggaDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAABBAAwMADhsBaQEEAAAGFQECAAAAAAEBAgQAAAABDwEAAAUECBwGb2Zmc2V0BQoEAAAGAQYBChECDg8FDAAEAhsBBQwRAAUKAhUFCgUKAgYDBQoABgQCHAUKCQMoDgIGAwYBCQMDDgECGQMDCgIcBQoAAAMDBgEJAwIOAQIZAwMKAhwFCgQAAwMDBgAGAQkDAw4BAhkDAwoCHAUKBAADAwYBCQMCDgECGQMDCgIcBQoAAAMDAwUKBQoIHQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCHAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAh0DAgaDAgwDAhoDAwAAAAAAAQECAgAAAAEFAggeDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAAChAAwMADh8BaQEEAAAGFQECAAAAAAEBAgwAAAABDwEAAAUECCAGb2Zmc2V0BQoEAAAGAQYBChECDw8FDAAMAh8BBQwRAAUKAhUFCgUKAgYDBQoABgQCIAUKCQMoDgIGAwYBCQMDDgECGQMDCgIgBQoAAAMDBgEJAwIOAQIZAwMKAiAFCgQAAwMDBgAGAQkDAw4BAhkDAwoCIAUKBAADAwYBCQMCDgECGQMDCgIgBQoAAAMDAwUKBQoIIQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCIAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAiEDAgaDAgwDAh4DAwAAAAAAAQECAwAAAAEFAggiDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAAFBAAwMADiMBaQEEAAAGFQECAAAAAAEBAkAAAAABDwEAAAUECCQGb2Zmc2V0BQoEAAAGAQYBChECEA8FDABAAiMBBQwRAAUKAhUFCgUKAgYDBQoABgQCJAUKCQMoDgIGAwYBCQMDDgECGQMDCgIkBQoAAAMDBgEJAwIOAQIZAwMKAiQFCgQAAwMDBgAGAQkDAw4BAhkDAwoCJAUKBAADAwYBCQMCDgECGQMDCgIkBQoAAAMDAwUKBQoIJQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCJAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAiUDAgaDAgwDAiIDAwAAAAAAAAAACwICAgUFCCYJc2hhZG93UG9zBQsEAAAGAQILBQsCCQgFCwAIJwVkZXB0aAMEAAAJAz8OAgIIEQEJAzoOAQoCJgULEQAFCgUKAwAIKAR6TWF4AwQAAAkDNQ4BCgImBQsIAAMDAAgpBWRlbHRhAwQAAAYDCQMVDgIEBgACJwMCCgMDAwIoAwMCKAMDAAYEAgwDCQM1DgEJAwkOAQYBAgMDAikDAwMDAwAFBAgqCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACCsIc2hhZG93VXYFCgQAAAkDOg4BCgIqBQsRAAUKBQoACCwFZGVwdGgDBAAACQM/DgICCBEBCgIrBQoRAAUKAwAGBAIMAwsGBwYDCgIqBQsIAAMCCgMDAiwDAgEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwAAAAAAAAYEAg0DAgwDAwA";
h3d_shader_GenTexture.SRC = "HXSLFWgzZC5zaGFkZXIuR2VuVGV4dHVyZQoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEbW9kZQECAAEAAAAAAAsFY29sb3IFDAIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFARMEAgoBAQEBAQIAAAAAAQUBBgQCCAUMCwYHCQMbDgEKAgYFDBEABQoDAQMAAAAAAADwPwMCCQMqDgEBAwAAAAAAAAAAAwUMAgsFDAUMBQwAAAAA";
h3d_shader_LineShader.SRC = "HXSLFWgzZC5zaGFkZXIuTGluZVNoYWRlcgwBBmNhbWVyYQ0BAwIEdmlldwcAAQADBHByb2oHAAEABAh2aWV3UHJvagcAAQAAAAAFBmdsb2JhbA0CAgYJcGl4ZWxTaXplBQoABQAHCW1vZGVsVmlldwcABQEDAAAACAVpbnB1dA0DAwkIcG9zaXRpb24FCwEIAAoGbm9ybWFsBQsBCAALAnV2BQoBCAABAAAMBm91dHB1dA0EAQ0IcG9zaXRpb24FDAQMAAQAAA4RdHJhbnNmb3JtZWROb3JtYWwFCwQAAA8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAEBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAEQtsZW5ndGhTY2FsZQMCAAASBXdpZHRoAwIAABMEcGRpcgUMBAAAFAhfX2luaXRfXw4GAAAVBnZlcnRleA4GAAACAhQAAAUBBQUIFgNkaXIFCwQAAAYBAgoFCwkDMg4BAgcHBgULAAYEAhMFDAYBCQMqDgIGAQIWBQsJAzIOAQICBwYFCwEDAAAAAAAA8D8DBQwCAwcFDAUMBoEKAhMFDBEABQoGAgEDAAAAAAAA8D8DCQMNDgEGAAYBCgITBQwAAAMKAhMFDAAAAwMGAQoCEwUMBAADCgITBQwEAAMDAwMDBQoGgAIPBQsGAQYBAhYFCwoCCwUKAAADBQsCEQMFCwULBgQCDgULCQMfDgECFgULBQsFCwAAABUAAAUBBoAKAhAFDBEABQoGAQYBBgEGAQQGAQoCEwUMBQAFCgkDKA4CAQMAAAAAAADwPwMBAwAAAAAAAPC/AwUKBQoFCgQGAwoCCwUKBAADAQMAAAAAAADgPwMDAwUKCgIQBQwIAAMFCgIGBQoFCgISAwUKBQoA";
h3d_shader_MinMaxShader.SRC = "HXSLF2gzZC5zaGFkZXIuTWluTWF4U2hhZGVyCwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgR0ZXhBCgIAAAsEdGV4QgoCAAAMBWlzTWF4AgIAAQAAAAAADQhfX2luaXRfXw4GAAAOBnZlcnRleA4GAAAPCGZyYWdtZW50DgYAAAMCDQAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA4AAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ8AAAUDCBABYQUMBAAACQMhDgICCgoCCQUKBQwACBEBYgUMBAAACQMhDgICCwoCCQUKBQwABgQCCAUMCwIMAgkDFg4CAhAFDAIRBQwFDAkDFQ4CAhAFDAIRBQwFDAUMBQwA";
h3d_shader_CubeMinMaxShader.SRC = "HXSLG2gzZC5zaGFkZXIuQ3ViZU1pbk1heFNoYWRlcgwBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEdGV4QQwCAAALBHRleEIMAgAADAVpc01heAICAAEAAAAAAA0DbWF0BgIAAA4IX19pbml0X18OBgAADwZ2ZXJ0ZXgOBgAAEAhmcmFnbWVudA4GAAADAg4AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAPAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEQAAAFBQgRAnV2BQoEAAAGAwYBAgkFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAAgSA2RpcgULBAAABgEJAykOAgIRBQoBAwAAAAAAAPA/AwULAg0GBQsACBMBYQUMBAAACQMhDgICCgwCEgULBQwACBQBYgUMBAAACQMhDgICCwwCEgULBQwABgQCCAUMCwIMAgkDFg4CAhMFDAIUBQwFDAkDFQ4CAhMFDAIUBQwFDAUMBQwA";
h3d_shader_NormalMap.SRC = "HXSLFGgzZC5zaGFkZXIuTm9ybWFsTWFwCgEGY2FtZXJhDQECAghwb3NpdGlvbgULAAEAAwNkaXIFCwMBAAAAAAQGZ2xvYmFsDQIBBQltb2RlbFZpZXcHAAQBAwAAAAYFaW5wdXQNAwIHBm5vcm1hbAULAQYACAd0YW5nZW50BQsBBgABAAAJB3RleHR1cmUKAgAACgxjYWxjdWxhdGVkVVYFCgQAAAsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAADBF0cmFuc2Zvcm1lZE5vcm1hbAULBAAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAMAAA4OX19pbml0X192ZXJ0ZXgOBgAADwhmcmFnbWVudA4GAAACAg4AAAUBBgQCDQUMCQMqDgIGAQIIBQsJAzIOAQIFBwYFCwsGBwkDHQ4CAggFCwIIBQsDAQMAAAAAAADgPwMCAQMAAAAAAADwPwMBAwAAAAAAAPC/AwMFDAUMAAEPAAAFBQgQAW4FCwQAAAIMBQsACBECbmYFCwQAAAkDOQ4BCQMhDgICCQoCCgUKBQwFCwAIEgR0YW5YBQsEAAAJAx8OAQoCDQUMkgAFCwULAAgTBHRhblkFCwQAAAYBCQMeDgICEAULAhIFCwULBwMKAg0FDAwAAwMFCwAGBAIMBQsJAx8OAQQGAAYABgEKAhEFCwAAAwISBQsFCwYBCgIRBQsEAAMCEwULBQsFCwYBCgIRBQsIAAMCEAULBQsFCwULBQsFCwA";
h3d_shader_Shadow.SRC = "HXSLEWgzZC5zaGFkZXIuU2hhZG93BgEGc2hhZG93DQEFAgNtYXARAQABAAMEcHJvaggAAQAEBWNvbG9yBQsAAQAFBXBvd2VyAwABAAYEYmlhcwMAAQAAAAAHCnBpeGVsQ29sb3IFDAQAAAgTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAACRhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAoJc2hhZG93UG9zBQsDAAEBCwhmcmFnbWVudA4GAAABAQsAAAUGCAwJc2hhZG93UG9zBQsEAAAGAQIJBQsCAwgFCwAIDQVkZXB0aAMEAAAJAz8OAgICEQEJAzoOAQoCDAULEQAFCgUKAwAIDgR6TWF4AwQAAAkDNQ4BCgIMBQsIAAMDAAgPBWRlbHRhAwQAAAYDCQMVDgIEBgACDQMCBgMDAwIOAwMCDgMDAAgQBXNoYWRlAwQAAAkDNQ4BCQMJDgEGAQIFAwIPAwMDAwAGgQoCBwUMkgAFCwYABgEEBgMBAwAAAAAAAPA/AwIQAwMDCgIEBQuSAAULBQsCEAMFCwULAA";
h3d_shader_SignedDistanceField.SRC = "HXSLHmgzZC5zaGFkZXIuU2lnbmVkRGlzdGFuY2VGaWVsZA4BBWlucHV0DQEDAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEABAVjb2xvcgUMAQEAAQAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAIBHRpbWUDAAAACQ5zcHJpdGVQb3NpdGlvbgUMBAAAChBhYnNvbHV0ZVBvc2l0aW9uBQwEAAALCnBpeGVsQ29sb3IFDAQAAAwMdGV4dHVyZUNvbG9yBQwEAAANDGNhbGN1bGF0ZWRVVgUKAwAADg5vdXRwdXRQb3NpdGlvbgUMBAAADwdjaGFubmVsAQIAAQAAAAAAEAthbHBoYUN1dG9mZgMCAAARCXNtb290aGluZwMCAAASBm1lZGlhbg4GAAATCGZyYWdtZW50DgYAAAIDEgMUAXIDBAAAFQFnAwQAABYBYgMEAAADBQENCQMWDgIJAxUOAgIUAwIVAwMJAxUOAgkDFg4CAhQDAhUDAwIWAwMDAAABEwAABQQIFw10ZXh0dXJlU2FtcGxlBQwEAAACDAUMAAgYCGRpc3RhbmNlAwQAAAAABgQCGAMLBgUCDwEBAgAAAAABAgoCFwUMAAADCwYFAg8BAQIBAAAAAQIKAhcFDAQAAwsGBQIPAQECAgAAAAECCgIXBQwIAAMLBgUCDwEBAgMAAAABAgoCFwUMDAADCQISDgMKAhcFDAAAAwoCFwUMBAADCgIXBQwIAAMDAwMDAwMGBAIMBQwJAyoOBAEDAAAAAAAA8D8DAQMAAAAAAADwPwMBAwAAAAAAAPA/AwkDGg4DBgMCEAMCEQMDBgACEAMCEQMDAhgDAwUMBQwA";
h3d_shader_SkinBase.SRC = "HXSLE2gzZC5zaGFkZXIuU2tpbkJhc2UFARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIAA";
h3d_shader_Skin.SRC = "HXSLD2gzZC5zaGFkZXIuU2tpbggBEHJlbGF0aXZlUG9zaXRpb24FCwQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxF0cmFuc2Zvcm1lZE5vcm1hbAULBAAABAhNYXhCb25lcwECAAEAAAAAAAUNYm9uZXNNYXRyaXhlcw8IBAIAAQgGBWlucHV0DQEEBwhwb3NpdGlvbgULAQYACAZub3JtYWwFCwEGAAkHd2VpZ2h0cwULAQYACgdpbmRleGVzCQQAAAABBgABAAALEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADAZ2ZXJ0ZXgOBgAAAQAMAAAFAgYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQKAgoJBAAAAAAAAQgFCwULCgIJBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAoCCgkEAAAABAABCAULBQsKAgkFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQKAgoJBAAAAAgAAQgFCwULCgIJBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAoCCgkEAAAAAAABCAYFCwULCgIJBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECgIKCQQAAAAEAAEIBgULBQsKAgkFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAoCCgkEAAAACAABCAYFCwULCgIJBQsIAAMFCwULBQsFCwA";
h3d_shader_SkinTangent.SRC = "HXSLFmgzZC5zaGFkZXIuU2tpblRhbmdlbnQIARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIBgVpbnB1dA0BBQcIcG9zaXRpb24FCwEGAAgGbm9ybWFsBQsBBgAJB3RhbmdlbnQFCwEGAAoHd2VpZ2h0cwULAQYACwdpbmRleGVzCQQAAAABBgABAAAMEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADQZ2ZXJ0ZXgOBgAAAQANAAAFAwYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQKAgsJBAAAAAAAAQgFCwULCgIKBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAoCCwkEAAAABAABCAULBQsKAgoFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQKAgsJBAAAAAgAAQgFCwULCgIKBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAoCCwkEAAAAAAABCAYFCwULCgIKBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECgILCQQAAAAEAAEIBgULBQsKAgoFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAoCCwkEAAAACAABCAYFCwULCgIKBQsIAAMFCwULBQsFCwYEAgwFDAkDKg4CCQMfDgEGAAYABgEEBgEKAgkFC5IABQsJAzIOARECBQ8IBAoCCwkEAAAAAAABCAYFCwULCgIKBQsAAAMFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQKAgsJBAAAAAQAAQgGBQsFCwoCCgULBAADBQsFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQKAgsJBAAAAAgAAQgGBQsFCwoCCgULCAADBQsFCwULCgIMBQwMAAMFDAUMAA";
h3d_shader_SpecularTexture.SRC = "HXSLGmgzZC5zaGFkZXIuU3BlY3VsYXJUZXh0dXJlBAEHdGV4dHVyZQoCAAACDGNhbGN1bGF0ZWRVVgUKBAAAAwlzcGVjQ29sb3IFCwQAAAQIZnJhZ21lbnQOBgAAAQEEAAAFAQaBAgMFCwoJAyEOAgIBCgICBQoFDJIABQsFCwA";
h3d_shader_Texture.SRC = "HXSLEmgzZC5zaGFkZXIuVGV4dHVyZQsBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwhhZGRpdGl2ZQICAAEAAAAAAAQJa2lsbEFscGhhAgIAAQAAAAAABQ1zcGVjdWxhckFscGhhAgIAAQAAAAAABhJraWxsQWxwaGFUaHJlc2hvbGQDAgABBwAAAAAAAAAAAAAAAAAA8D8HB3RleHR1cmUKAgAACAxjYWxjdWxhdGVkVVYFCgQAAAkKcGl4ZWxDb2xvcgUMBAAACglzcGVjQ29sb3IFCwQAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAAAgALAAAFAQYEAggFCgICBQoFCgABDAAABQQIDQFjBQwEAAAJAyEOAgIHCgIIBQoFDAALBg4CBAIGCQYDCgINBQwMAAMCBgMDAQMAAAAAAAAAAAMCAgwAAAALAgMCBoACCQUMAg0FDAUMBoECCQUMAg0FDAUMAAsCBQIGgQIKBQsKAg0FDP4ABQsFCwAAAA";
h3d_shader_UVDelta.SRC = "HXSLEmgzZC5zaGFkZXIuVVZEZWx0YQQBB3V2RGVsdGEFCgIAAAIHdXZTY2FsZQUKAgAAAwxjYWxjdWxhdGVkVVYFCgQAAAQGdmVydGV4DgYAAAEABAAABQEGBAIDBQoGAAYBAgMFCgICBQoFCgIBBQoFCgUKAA";
h3d_shader_VertexColorAlpha.SRC = "HXSLG2gzZC5zaGFkZXIuVmVydGV4Q29sb3JBbHBoYQQBBWlucHV0DQEBAgVjb2xvcgUMAQEAAQAAAwpwaXhlbENvbG9yBQwEAAAECGFkZGl0aXZlAgIAAQAAAAAABQhmcmFnbWVudA4GAAABAQUAAAUBCwIEAgaAAgMFDAICBQwFDAaBAgMFDAICBQwFDAAA";
h3d_shader_VolumeDecal.SRC = "HXSLFmgzZC5zaGFkZXIuVm9sdW1lRGVjYWwYAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQhkZXB0aE1hcBEBAAAAJgVzY2FsZQUKAgAAJwZub3JtYWwFCwIAACgHdGFuZ2VudAULAgAAKQppc0NlbnRlcmVkAgIAAQAAAAAAKgxjYWxjdWxhdGVkVVYFCgQAACsSdHJhbnNmb3JtZWRUYW5nZW50BQwEAAAsDl9faW5pdF9fdmVydGV4DgYAAC0IZnJhZ21lbnQOBgAAAgIsAAAFAgYEAh0FCwkDHw4BBAYBAicFCwkDMg4BAg8HBgULBQsFCwULBgQCKwUMCQMqDgIJAx8OAQQGAQIoBQsJAzIOAQIPBwYFCwULBQsBAwAAAAAAAPA/AwUMBQwAAS0AAAUJCC4GbWF0cml4BwQAAAYBAggHAhAHBwAILwlzY3JlZW5Qb3MFCgQAAAYCCgIeBQwRAAUKCgIeBQwMAAMFCgAIMANydXYFDAQAAAkDKg4DAi8FCgkDPw4CAiURAQkDOg4BAi8FCgUKAwEDAAAAAAAA8D8DBQwACDEEd3BvcwUMBAAABgECMAUMAi4HBQwACDIEcHBvcwUMBAAABgECMAUMAggHBQwABgQCHAULBgIKAjIFDJIABQsKAjIFDAwAAwULBQsGBAIqBQoGAQImBQoEBgIKAjEFDBEABQoKAjEFDAwAAwUKBQoFCgUKCwIpAgaAAioFCgEDAAAAAAAA4D8DBQoAAAsGCQkDFQ4CCQMVDgIKAioFCgAAAwoCKgUKBAADAwkDFQ4CBgMBAwAAAAAAAPA/AwoCKgUKAAADAwYDAQMAAAAAAADwPwMKAioFCgQAAwMDAwEDAAAAAAAAAAADAgwAAAAA";
hashagon_Col.RED = 12461619;
hashagon_Text.LEFT = 0;
hashagon_Text.CENTER = -200000;
hashagon_Text.RIGHT = -300000;
hashagon_Text.align = 0;
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hxd_Key.initDone = false;
hxd_Key.keyPressed = [];
hxd_Key.ALLOW_KEY_REPEAT = false;
hxd_Timer.wantedFPS = 60.;
hxd_Timer.maxDeltaTime = 0.5;
hxd_Timer.smoothFactor = 0.95;
hxd_Timer.lastTimeStamp = Date.now() / 1000;
hxd_Timer.elapsedTime = 0.;
hxd_Timer.frameCount = 0;
hxd_Timer.dt = 1 / hxd_Timer.wantedFPS;
hxd_Timer.currentDT = 1 / hxd_Timer.wantedFPS;
hxd_System.setCursor = hxd_System.setNativeCursor;
hxd_System.loopInit = false;
hxd_fs_EmbedFileSystem.invalidChars = new EReg("[^A-Za-z0-9_]","g");
hxd_res_Resource.LIVE_UPDATE = false;
hxd_res_Image.ALLOW_NPOT = true;
hxd_res_Image.DEFAULT_FILTER = h3d_mat_Filter.Linear;
hxd_res_Image.DEFAULT_ASYNC = false;
hxd_res_Image.ENABLE_AUTO_WATCH = true;
hxd_res_Sound.ENABLE_AUTO_WATCH = true;
hxd_snd_Channel.ID = 0;
hxd_snd_Source.ID = 0;
hxd_snd_Manager.STREAM_DURATION = 5.;
hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT = 44100;
hxd_snd_Manager.BUFFER_QUEUE_LENGTH = 2;
hxd_snd_Manager.MAX_SOURCES = 16;
hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE = 256;
hxd_snd_Manager.VIRTUAL_VOLUME_THRESHOLD = 1e-5;
hxd_snd_Manager.BUFFER_STREAM_SPLIT = 16;
hxsl_Tools.UID = 0;
hxsl_Tools.SWIZ = hxsl_Component.__empty_constructs__.slice();
hxsl_Tools.MAX_CHANNELS_BITS = 3;
hxsl_BatchShader.SRC = "HXSLEGh4c2wuQmF0Y2hTaGFkZXICAQtCYXRjaF9Db3VudAECAAEAAAABAAIMQmF0Y2hfQnVmZmVyEAUMAQIAAAA";
hxsl_GlslOut.KWD_LIST = ["input","output","discard","dvec2","dvec3","dvec4","hvec2","hvec3","hvec4","fvec2","fvec3","fvec4","int","float","bool","long","short","double","half","fixed","unsigned","superp","lowp","mediump","highp","precision","invariant","discard","struct","asm","union","template","this","packed","goto","sizeof","namespace","noline","volatile","external","flat","input","output","out","attribute","const","uniform","varying","inout","void"];
hxsl_GlslOut.KWDS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = 0;
		var _g2 = hxsl_GlslOut.KWD_LIST;
		while(_g1 < _g2.length) {
			var k = _g2[_g1];
			++_g1;
			if(__map_reserved[k] != null) {
				_g.setReserved(k,true);
			} else {
				_g.h[k] = true;
			}
		}
	}
	$r = _g;
	return $r;
}(this));
hxsl_GlslOut.GLOBALS = (function($this) {
	var $r;
	var m = new haxe_ds_EnumValueMap();
	{
		var _g = 0;
		var _g1 = hxsl_TGlobal.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			var n = "" + Std.string(g);
			n = n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
			m.set(g,n);
		}
	}
	m.set(hxsl_TGlobal.ToInt,"int");
	m.set(hxsl_TGlobal.ToFloat,"float");
	m.set(hxsl_TGlobal.ToBool,"bool");
	m.set(hxsl_TGlobal.LReflect,"reflect");
	m.set(hxsl_TGlobal.Mat3x4,"_mat3x4");
	m.set(hxsl_TGlobal.VertexID,"gl_VertexID");
	m.set(hxsl_TGlobal.InstanceID,"gl_InstanceID");
	m.set(hxsl_TGlobal.IVec2,"ivec2");
	m.set(hxsl_TGlobal.IVec3,"ivec3");
	m.set(hxsl_TGlobal.IVec4,"ivec4");
	m.set(hxsl_TGlobal.BVec2,"bvec2");
	m.set(hxsl_TGlobal.BVec3,"bvec3");
	m.set(hxsl_TGlobal.BVec4,"bvec4");
	m.set(hxsl_TGlobal.FragCoord,"gl_FragCoord");
	{
		var g1 = m.iterator();
		while(g1.hasNext()) {
			var g2 = g1.next();
			var _this = hxsl_GlslOut.KWDS;
			if(__map_reserved[g2] != null) {
				_this.setReserved(g2,true);
			} else {
				_this.h[g2] = true;
			}
		}
	}
	$r = m;
	return $r;
}(this));
hxsl_GlslOut.MAT34 = "struct _mat3x4 { vec4 a; vec4 b; vec4 c; };";
hxsl__$Linker_ShaderInfos.UID = 0;
hxsl_Printer.SWIZ = ["x","y","z","w"];
hxsl_RuntimeShader.UID = 0;
hxsl_Serializer.TVECS = new haxe_ds_IntMap();
hxsl_Serializer.BOPS = (function($this) {
	var $r;
	var ops = haxe_macro_Binop.__empty_constructs__.slice();
	ops.splice(haxe_macro_Binop.OpAssignOp(null)._hx_index,0,null);
	$r = ops;
	return $r;
}(this));
hxsl_Serializer.UNOPS = haxe_macro_Unop.__empty_constructs__.slice();
hxsl_Serializer.TGLOBALS = hxsl_TGlobal.__empty_constructs__.slice();
hxsl_Serializer.TSWIZ = new haxe_ds_IntMap();
hxsl_Serializer.REGS = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_Serializer.VKINDS = hxsl_VarKind.__empty_constructs__.slice();
hxsl_Serializer.PRECS = hxsl_Prec.__empty_constructs__.slice();
hxsl_Serializer.FKIND = hxsl_FunctionKind.__empty_constructs__.slice();
hxsl_Serializer.SIGN = 9139229;
hxsl_SharedShader.UNROLL_LOOPS = false;
{
	hashagon_Boot.main();
	haxe_EntryPoint.run();
}
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
